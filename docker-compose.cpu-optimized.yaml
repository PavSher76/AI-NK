services:
  # Redis для кэширования - 0.1 ядра
  redis:
    image: redis:alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispass}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      - TZ=Europe/Moscow
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          memory: 128M
          cpus: '0.1'
    cpu_shares: 64
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL для Keycloak - 0.1 ядра
  keycloak-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
      TZ: Europe/Moscow
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          memory: 256M
          cpus: '0.1'
    cpu_shares: 64
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Keycloak для аутентификации - 0.1 ядра
  keycloak:
    image: quay.io/keycloak/keycloak:26.3.2
    command: start --http-enabled=true --http-port=8080 --hostname-strict=false --import-realm --import-realm-strategy=OVERWRITE_EXISTING
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_PROFILE: prod
      QUARKUS_PROFILE: prod
      KC_HTTP_ENABLED: true
      KC_HTTPS_ENABLED: false
      KC_HTTP_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      TZ: Europe/Moscow
    ports:
      - "${KEYCLOAK_PORT:-8081}:8080"
    volumes:
      - ./keycloak/ai-nk-realm.json:/opt/keycloak/data/import/ai-nk-realm.json:ro
      - ./ssl/keycloak.keystore:/opt/keycloak/ssl/keycloak.keystore:ro
      - ./keycloak/conf/keycloak.conf:/opt/keycloak/conf/keycloak.conf:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      keycloak-db:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          memory: 512M
          cpus: '0.1'
    cpu_shares: 64
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # VLLM Service - 1.0 ядро (высокий приоритет)
  vllm-service:
    build: ./vllm_service
    ports:
      - "8005:8005"
    environment:
      - TZ=Europe/Moscow
      - MODEL_NAME=${VLLM_MODEL_NAME:-microsoft/DialoGPT-medium}
      - MAX_TOKENS=${VLLM_MAX_TOKENS:-512}
      - TEMPERATURE=${VLLM_TEMPERATURE:-0.7}
      - TOP_P=${VLLM_TOP_P:-0.9}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
          cpus: '1.0'
    cpu_shares: 1024
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway - 0.4 ядра (базовый приоритет)
  gateway:
    build: ./gateway
    ports:
      - "8443:8443"
    environment:
      - TZ=Europe/Moscow
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=ai-nk
      - KEYCLOAK_CLIENT_ID=ai-nk-gateway
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET:-your-secret}
    volumes:
      - ./ssl/gateway.crt:/app/ssl/gateway.crt:ro
      - ./ssl/gateway.key:/app/ssl/gateway.key:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - keycloak
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
          cpus: '0.4'
    cpu_shares: 256
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:8443/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL основная БД - 0.6 ядер (базовый приоритет)
  norms-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-norms_db}
      POSTGRES_USER: ${POSTGRES_USER:-norms_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-norms_password}
      TZ: Europe/Moscow
    volumes:
      - norms_db_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
          cpus: '0.6'
    cpu_shares: 256
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-norms_user} -d ${POSTGRES_DB:-norms_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Qdrant векторная БД - 0.5 ядер (базовый приоритет)
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      - TZ=Europe/Moscow
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
          cpus: '0.5'
    cpu_shares: 256
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Document Parser - 2.0 ядра (высокий приоритет)
  document-parser:
    build: ./document_parser
    ports:
      - "8001:8001"
    environment:
      - TZ=Europe/Moscow
      - POSTGRES_HOST=norms-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-norms_db}
      - POSTGRES_USER=${POSTGRES_USER:-norms_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-norms_password}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
    volumes:
      - document_parser_uploads:/app/uploads
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - norms-db
      - qdrant
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1.5G
          cpus: '2.0'
    cpu_shares: 1024
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Rule Engine - 0.8 ядер (средний приоритет)
  rule-engine:
    build: ./rule_engine
    ports:
      - "8002:8002"
    environment:
      - TZ=Europe/Moscow
      - POSTGRES_HOST=norms-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-norms_db}
      - POSTGRES_USER=${POSTGRES_USER:-norms_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-norms_password}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - norms-db
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
          cpus: '0.8'
    cpu_shares: 512
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8002/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Calculation Service - 0.8 ядер (средний приоритет)
  calculation-service:
    build: ./calculation_service
    ports:
      - "8004:8002"
    environment:
      - POSTGRES_HOST=norms-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-norms_db}
      - POSTGRES_USER=${POSTGRES_USER:-norms_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-norms_password}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - TZ=Europe/Moscow
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - norms-db
      - qdrant
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
          cpus: '0.8'
    cpu_shares: 512
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8002/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Outgoing Control Service - 0.3 ядра (вспомогательный приоритет)
  outgoing-control-service:
    build: ./outgoing_control_service
    ports:
      - "8006:8006"
    environment:
      - TZ=Europe/Moscow
      - SPELLCHECKER_SERVICE_URL=http://spellchecker-service:8007
    volumes:
      - outgoing_control_uploads:/app/uploads
      - outgoing_control_reports:/app/reports
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - spellchecker-service
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
          cpus: '0.3'
    cpu_shares: 128

  # SpellChecker Service - 0.6 ядер (средний приоритет)
  spellchecker-service:
    build: ./spellchecker_service
    ports:
      - "8007:8007"
    environment:
      - TZ=Europe/Moscow
      - LANGUAGETOOL_URL=http://languagetool:8010
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - languagetool
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
          cpus: '0.6'
    cpu_shares: 512
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RAG Service - 2.5 ядра (высокий приоритет)
  rag-service:
    build: ./rag_service
    ports:
      - "8003:8003"
    environment:
      - TZ=Europe/Moscow
      - POSTGRES_HOST=norms-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-norms_db}
      - POSTGRES_USER=${POSTGRES_USER:-norms_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-norms_password}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - OLLAMA_URL=${OLLAMA_URL:-http://host.docker.internal:11434}
    volumes:
      - rag_uploads:/app/uploads
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - norms-db
      - qdrant
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 6G
        reservations:
          memory: 4G
          cpus: '2.5'
    cpu_shares: 1024
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8003/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LanguageTool - 0.3 ядра (вспомогательный приоритет)
  languagetool:
    image: silviof/docker-languagetool:latest
    ports:
      - "8010:8010"
    environment:
      - TZ=Europe/Moscow
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
          cpus: '0.3'
    cpu_shares: 128
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/v2/languages"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Archive Service - 0.8 ядер (средний приоритет)
  archive-service:
    build: ./archive_service
    ports:
      - "8000:8000"
    environment:
      - TZ=Europe/Moscow
      - POSTGRES_HOST=norms-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-norms_db}
      - POSTGRES_USER=${POSTGRES_USER:-norms_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-norms_password}
    volumes:
      - archive_uploads:/app/uploads
      - archive_storage:/app/storage
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - norms-db
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
          cpus: '0.8'
    cpu_shares: 512
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Analog Objects Service - 0.2 ядра (вспомогательный приоритет)
  analog-objects-service:
    build: ./analog_objects_service
    ports:
      - "8009:8009"
    environment:
      - TZ=Europe/Moscow
      - POSTGRES_HOST=norms-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-norms_db}
      - POSTGRES_USER=${POSTGRES_USER:-norms_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-norms_password}
    volumes:
      - analog_objects_uploads:/app/uploads
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - norms-db
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
          cpus: '0.2'
    cpu_shares: 128
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
  keycloak_db_data:
  norms_db_data:
  qdrant_data:
  document_parser_uploads:
  outgoing_control_uploads:
  outgoing_control_reports:
  rag_uploads:
  archive_uploads:
  archive_storage:
  analog_objects_uploads:

networks:
  default:
    name: ai-nk-network
