#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è AI-–ù–ö
"""
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'calculation_service'))

def test_calculation_engine():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å—á–µ—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫ –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        import sys
        import os
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'calculation_service'))
        from calculations import CalculationEngine
        
        print("‚úÖ –†–∞—Å—á–µ—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞
        engine = CalculationEngine()
        
        print("‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞ —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤
        calculation_types = engine.get_calculation_types()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤: {len(calculation_types)}")
        
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤
        for calc_type_info in calculation_types:
            print(f"  üìä {calc_type_info.type}: {calc_type_info.name}")
            print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {calc_type_info.description}")
            if calc_type_info.categories:
                print(f"     –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(calc_type_info.categories)}")
            print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞: {e}")
        return False

def test_normative_documents():
    """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        import sys
        import os
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'calculation_service'))
        from calculations import CalculationEngine
        engine = CalculationEngine()
        
        print("üìã –ü–†–û–í–ï–†–ö–ê –ù–û–†–ú–ê–¢–ò–í–ù–´–• –î–û–ö–£–ú–ï–ù–¢–û–í:")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞—Å—á–µ—Ç–∞
        for calc_type_info in engine.get_calculation_types():
            try:
                schema = engine._get_parameters_schema(calc_type_info.type)
                if 'normative_document' in schema.get('properties', {}):
                    default_norm = schema['properties']['normative_document'].get('default', '–ù–µ —É–∫–∞–∑–∞–Ω')
                    print(f"  {calc_type_info.type}: {default_norm}")
            except Exception as e:
                print(f"  {calc_type_info.type}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã - {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–ß–ï–¢–ù–û–ì–û –ú–û–î–£–õ–Ø AI-–ù–ö")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –†–∞—Å—á–µ—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞:")
    test1_result = test_calculation_engine()
    
    # –¢–µ—Å—Ç 2: –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
    test2_result = test_normative_documents()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"  –†–∞—Å—á–µ—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test1_result else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"  –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test2_result else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    
    if test1_result and test2_result:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return 0
    else:
        print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        return 1

if __name__ == "__main__":
    sys.exit(main())
