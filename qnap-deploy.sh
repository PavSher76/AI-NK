#!/bin/bash

# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è QNAP NAS
# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Docker 27.1.2-qnap4
set -e

echo "üè† –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ AI-NK –Ω–∞ QNAP NAS"
echo "=================================="
echo "üê≥ Docker –≤–µ—Ä—Å–∏—è: 27.1.2-qnap4"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ QNAP –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_qnap_environment() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ QNAP –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Container Station –Ω–∞ QNAP."
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Docker
    DOCKER_VERSION=$(docker --version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
    echo "‚úÖ Docker –≤–µ—Ä—Å–∏—è: $DOCKER_VERSION"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if command -v docker-compose &> /dev/null; then
        COMPOSE_CMD="docker-compose"
        echo "‚úÖ Docker Compose: standalone"
    elif docker compose version &> /dev/null; then
        COMPOSE_CMD="docker compose"
        echo "‚úÖ Docker Compose: –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π"
    else
        echo "‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    echo "üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞..."
    AVAILABLE_SPACE=$(df -h . | awk 'NR==2 {print $4}' | sed 's/[^0-9]//g')
    if [ "$AVAILABLE_SPACE" -lt 20 ]; then
        echo "‚ö†Ô∏è  –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: ${AVAILABLE_SPACE}GB"
        echo "   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 20GB –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [y/N] " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    else
        echo "‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞: ${AVAILABLE_SPACE}GB"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è QNAP
create_qnap_config() {
    echo "‚öôÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è QNAP..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    cat > .env << 'EOF'
# QNAP Optimized Configuration
# ===========================

# Database Configuration
POSTGRES_HOST=norms-db
POSTGRES_PORT=5432
POSTGRES_DB=norms_db
POSTGRES_USER=norms_user
POSTGRES_PASSWORD=norms_password

# Redis Configuration
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=redispass

# Qdrant Configuration
QDRANT_HOST=qdrant
QDRANT_PORT=6333

# Security
JWT_SECRET_KEY=ai-nk-qnap-$(date +%s)
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30

# QNAP Optimized Limits
MAX_FILE_SIZE=26214400
MAX_CHECKABLE_DOCUMENT_SIZE=26214400
MAX_NORMATIVE_DOCUMENT_SIZE=52428800

# Extended Timeouts for QNAP
LLM_REQUEST_TIMEOUT=300
PAGE_PROCESSING_TIMEOUT=900

# Logging
LOG_LEVEL=INFO
TZ=Europe/Moscow

# QNAP Specific
DOCKER_ENV=true
QNAP_OPTIMIZED=true
QNAP_NAS=true

# External Services
OLLAMA_BASE_URL=http://host.docker.internal:11434

# Monitoring (optional)
PROMETHEUS_PORT=9090
GRAFANA_PORT=3000
GRAFANA_ADMIN_PASSWORD=admin
EOF

    # –°–æ–∑–¥–∞–Ω–∏–µ docker-compose.qnap.yml
    cat > docker-compose.qnap.yml << 'EOF'
version: '3.8'

services:
  # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å AI-NK (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è QNAP)
  ai-nk:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: ai-nk-qnap
    ports:
      - "80:80"
      - "443:443"
      - "8001:8001"
      - "8002:8002"
      - "8003:8003"
      - "8004:8004"
      - "8005:8005"
      - "8006:8006"
      - "8007:8007"
      - "8443:8443"
    volumes:
      - ai-nk-data:/app/data
      - ai-nk-logs:/app/logs
      - ai-nk-uploads:/app/uploads
      - ai-nk-reports:/app/reports
      - ai-nk-models:/app/models
    environment:
      - POSTGRES_HOST=norms-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=norms_db
      - POSTGRES_USER=norms_user
      - POSTGRES_PASSWORD=norms_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redispass
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QNAP_OPTIMIZED=true
      - TZ=Europe/Moscow
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    networks:
      - ai-nk-network

  # PostgreSQL (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è QNAP)
  norms-db:
    image: pgvector/pgvector:pg15
    container_name: ai-nk-norms-db-qnap
    environment:
      POSTGRES_DB: norms_db
      POSTGRES_USER: norms_user
      POSTGRES_PASSWORD: norms_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      TZ: Europe/Moscow
    ports:
      - "5432:5432"
    volumes:
      - norms_db_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U norms_user -d norms_db"]
      interval: 60s
      timeout: 30s
      retries: 3
    networks:
      - ai-nk-network

  # Qdrant (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è QNAP)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: ai-nk-qdrant-qnap
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - TZ=Europe/Moscow
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 60s
      timeout: 30s
      retries: 3
    networks:
      - ai-nk-network

  # Redis (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è QNAP)
  redis:
    image: redis:7-alpine
    container_name: ai-nk-redis-qnap
    command: redis-server --requirepass redispass --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      - TZ=Europe/Moscow
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3
    networks:
      - ai-nk-network

volumes:
  ai-nk-data:
    driver: local
  ai-nk-logs:
    driver: local
  ai-nk-uploads:
    driver: local
  ai-nk-reports:
    driver: local
  ai-nk-models:
    driver: local
  norms_db_data:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local

networks:
  ai-nk-network:
    driver: bridge
    name: ai-nk-qnap-network
EOF

    echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è QNAP —Å–æ–∑–¥–∞–Ω–∞"
}

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–ª—è QNAP
optimize_for_qnap() {
    echo "üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–ª—è QNAP..."
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    echo "üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Å–∏—Å—Ç–µ–º—ã..."
    docker system prune -a -f 2>/dev/null || true
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    echo "‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
    mkdir -p uploads temp logs data reports models
    chmod 755 uploads temp logs data reports models
    
    echo "‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ QNAP
deploy_to_qnap() {
    echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ QNAP..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    $COMPOSE_CMD -f docker-compose.qnap.yml down 2>/dev/null || true
    
    # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
    echo "üì¶ –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ –¥–ª—è QNAP..."
    docker build -f Dockerfile.production -t ai-nk:qnap . --no-cache
    
    if [ $? -ne 0 ]; then
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–∞"
        exit 1
    fi
    
    # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
    echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ QNAP..."
    $COMPOSE_CMD -f docker-compose.qnap.yml up -d
    
    if [ $? -ne 0 ]; then
        echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
        exit 1
    fi
    
    echo "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
check_status() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã..."
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (QNAP –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏)..."
    sleep 90
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    services=("ai-nk-qnap" "ai-nk-norms-db-qnap" "ai-nk-qdrant-qnap" "ai-nk-redis-qnap")
    all_healthy=true
    
    for service in "${services[@]}"; do
        if docker ps --format "table {{.Names}}\t{{.Status}}" | grep -q "$service.*Up"; then
            echo "‚úÖ $service –∑–∞–ø—É—â–µ–Ω"
        else
            echo "‚ùå $service –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            all_healthy=false
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞..."
    if curl -f http://localhost/health >/dev/null 2>&1; then
        echo "‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        echo "‚ö†Ô∏è  –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    echo "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}" 2>/dev/null || echo "   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    return $all_healthy
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_qnap_environment
    create_qnap_config
    optimize_for_qnap
    deploy_to_qnap
    
    if check_status; then
        echo ""
        echo "üéâ AI-NK —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ QNAP!"
        echo "=================================="
        echo ""
        echo "üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost"
        echo "üìä API: https://localhost:8443"
        echo ""
        echo "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
        echo "  –°—Ç–∞—Ç—É—Å: $COMPOSE_CMD -f docker-compose.qnap.yml ps"
        echo "  –õ–æ–≥–∏:   $COMPOSE_CMD -f docker-compose.qnap.yml logs -f"
        echo "  –°—Ç–æ–ø:   $COMPOSE_CMD -f docker-compose.qnap.yml down"
        echo ""
        echo "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è QNAP:"
        echo "  ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—á–∏—â–∞–π—Ç–µ: docker system prune -a"
        echo "  ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –º–µ—Å—Ç–æ: df -h"
        echo "  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SSD –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    else
        echo ""
        echo "‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–º–µ—é—Ç –ø—Ä–æ–±–ª–µ–º—ã"
        echo "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: $COMPOSE_CMD -f docker-compose.qnap.yml logs"
    fi
}

# –ó–∞–ø—É—Å–∫
main "$@"
