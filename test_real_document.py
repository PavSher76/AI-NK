#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –≥—Ä—É–±—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
"""

import requests
import json
import time
from datetime import datetime

class RealDocumentTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –æ—à–∏–±–∫–∞–º–∏"""
    
    def __init__(self):
        self.outgoing_control_url = "http://localhost:8006"
        self.spellchecker_url = "http://localhost:8007"
        self.document_id = "cdb1daec-af47-4a37-9ce0-932cb7f2095b"
        
    def test_document_analysis(self):
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        print("üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        print("="*60)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        try:
            response = requests.get(f"{self.outgoing_control_url}/documents", timeout=10)
            if response.status_code == 200:
                data = response.json()
                documents = data.get('documents', [])
                
                for doc in documents:
                    if doc['id'] == self.document_id:
                        print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {doc['filename']}")
                        print(f"üìä –°—Ç—Ä–∞–Ω–∏—Ü: {doc['pages_count']}")
                        print(f"üìù –ß–∞–Ω–∫–æ–≤: {doc['chunks_count']}")
                        print(f"üìè –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(doc['text'])} —Å–∏–º–≤–æ–ª–æ–≤")
                        print(f"üìÖ –°–æ–∑–¥–∞–Ω: {doc['created_at']}")
                        print(f"üìã –°—Ç–∞—Ç—É—Å: {doc['status']}")
                        print()
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞
                        text_preview = doc['text'][:500] + "..." if len(doc['text']) > 500 else doc['text']
                        print("üìñ –ü—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞:")
                        print("-" * 40)
                        print(text_preview)
                        print("-" * 40)
                        print()
                        break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {e}")
    
    def test_spellcheck_analysis(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏")
        print("="*60)
        
        try:
            response = requests.post(
                f"{self.outgoing_control_url}/spellcheck",
                json={"document_id": self.document_id},
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                spell_results = result.get('spell_check_results', {})
                
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {result.get('status')}")
                print(f"üìä –í—Å–µ–≥–æ —Å–ª–æ–≤: {spell_results.get('total_words', 0)}")
                print(f"‚ùå –û—à–∏–±–æ–∫ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏: {spell_results.get('misspelled_count', 0)}")
                print(f"üìà –¢–æ—á–Ω–æ—Å—Ç—å: {spell_results.get('accuracy', 0):.2f}%")
                print(f"üîß –ú–µ—Ç–æ–¥: {spell_results.get('method', 'unknown')}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                errors = spell_results.get('errors', [])
                if errors:
                    print(f"\nüîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏:")
                    for i, error in enumerate(errors[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                        print(f"  {i}. –°–ª–æ–≤–æ: '{error.get('word', 'N/A')}'")
                        print(f"     –ü–æ–∑–∏—Ü–∏—è: {error.get('position', 'N/A')}")
                        print(f"     –ö–æ–Ω—Ç–µ–∫—Å—Ç: {error.get('context', 'N/A')}")
                        print(f"     –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {', '.join(error.get('suggestions', []))}")
                        print(f"     –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {error.get('confidence', 0):.2f}")
                        print()
                else:
                    print("‚úÖ –û—à–∏–±–æ–∫ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏: HTTP {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
    
    def test_grammar_check_analysis(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏")
        print("="*60)
        
        try:
            response = requests.post(
                f"{self.outgoing_control_url}/grammar-check",
                json={"document_id": self.document_id},
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                grammar_results = result.get('grammar_results', {})
                
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {result.get('status')}")
                print(f"‚ùå –û—à–∏–±–æ–∫ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏: {grammar_results.get('total_errors', 0)}")
                print(f"üîß –ú–µ—Ç–æ–¥: {grammar_results.get('method', 'unknown')}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                errors = grammar_results.get('errors', [])
                if errors:
                    print(f"\nüîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏:")
                    for i, error in enumerate(errors[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                        print(f"  {i}. –°–æ–æ–±—â–µ–Ω–∏–µ: {error.get('message', 'N/A')}")
                        print(f"     –ö–æ–Ω—Ç–µ–∫—Å—Ç: {error.get('context', 'N/A')}")
                        print(f"     –ü–æ–∑–∏—Ü–∏—è: {error.get('offset', 'N/A')}")
                        print(f"     –î–ª–∏–Ω–∞: {error.get('length', 'N/A')}")
                        print(f"     –ó–∞–º–µ–Ω–∞: {', '.join(error.get('replacements', []))}")
                        print(f"     –ü—Ä–∞–≤–∏–ª–æ: {error.get('rule_id', 'N/A')}")
                        print()
                else:
                    print("‚úÖ –û—à–∏–±–æ–∫ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏: HTTP {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏: {e}")
    
    def test_comprehensive_check_analysis(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
        print("="*60)
        
        try:
            start_time = time.time()
            response = requests.post(
                f"{self.outgoing_control_url}/comprehensive-check",
                json={"document_id": self.document_id},
                timeout=120
            )
            end_time = time.time()
            
            if response.status_code == 200:
                result = response.json()
                comprehensive_results = result.get('comprehensive_results', {})
                
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {result.get('status')}")
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
                print(f"üîß –ú–µ—Ç–æ–¥: {result.get('method', 'unknown')}")
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏
                spelling = comprehensive_results.get('spelling', {})
                print(f"\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏:")
                print(f"  –í—Å–µ–≥–æ —Å–ª–æ–≤: {spelling.get('total_words', 0)}")
                print(f"  –û—à–∏–±–æ–∫: {spelling.get('misspelled_count', 0)}")
                print(f"  –¢–æ—á–Ω–æ—Å—Ç—å: {spelling.get('accuracy', 0):.2f}%")
                print(f"  –ú–µ—Ç–æ–¥: {spelling.get('method', 'unknown')}")
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
                grammar = comprehensive_results.get('grammar', {})
                print(f"\nüìö –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏:")
                print(f"  –û—à–∏–±–æ–∫: {grammar.get('total_errors', 0)}")
                print(f"  –ú–µ—Ç–æ–¥: {grammar.get('method', 'unknown')}")
                
                # –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                print(f"\nüìä –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                print(f"  –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {comprehensive_results.get('total_errors', 0)}")
                print(f"  –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {comprehensive_results.get('overall_accuracy', 0):.2f}%")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏
                all_errors = comprehensive_results.get('all_errors', [])
                if all_errors:
                    print(f"\nüîç –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ ({len(all_errors)}):")
                    for i, error in enumerate(all_errors[:15], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 –æ—à–∏–±–æ–∫
                        error_type = error.get('type', 'unknown')
                        word = error.get('word', 'N/A')
                        context = error.get('context', 'N/A')
                        confidence = error.get('confidence', 0)
                        
                        print(f"  {i}. [{error_type.upper()}] '{word}' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
                        print(f"     –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}")
                        if error.get('suggestions'):
                            print(f"     –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {', '.join(error.get('suggestions', []))}")
                        print()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: HTTP {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
    
    def test_manual_error_analysis(self):
        """–†—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        print("üîç –†—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
        print("="*60)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
        try:
            response = requests.get(f"{self.outgoing_control_url}/documents", timeout=10)
            if response.status_code == 200:
                data = response.json()
                documents = data.get('documents', [])
                
                for doc in documents:
                    if doc['id'] == self.document_id:
                        text = doc['text']
                        break
                else:
                    print("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –ò—â–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
                known_errors = [
                    ("—Å–∞–∞ —Ç–≤–µ—Ç—Å—Ç–≤–∏–∏", "–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏"),
                    ("–æ—Ü–µ–Ω–∫ –∞", "–æ—Ü–µ–Ω–∫–∞"),
                    ("–ø—Ä–∏ –¥–ª–æ–∂–µ–Ω–∏–µ", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),
                    ("–∞ –±—ä–µ–∫—Ç—É", "–æ–±—ä–µ–∫—Ç—É"),
                    ("–Ω–µ –ø–æ–ª—É—á–µ–Ω —ã", "–Ω–µ –ø–æ–ª—É—á–µ–Ω—ã"),
                    ("–ø–∞–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"),
                    ("–≥–∞—Ä–∞–Ω—Ç–∏ –∏", "–≥–∞—Ä–∞–Ω—Ç–∏–∏"),
                    ("–ø—Ä–µ –æ—Ä–∏—Ç–µ—Ç–Ω–æ —Å—Ç–∏", "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏"),
                    ("—Å–∞ –≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ", "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ"),
                    ("–Ω–µ–ø–æ–ª—É—á–µ–Ω –∞", "–Ω–µ –ø–æ–ª—É—á–µ–Ω"),
                    ("—Ç–≤–µ—Ç", "–æ—Ç–≤–µ—Ç"),
                    ("–ø—Ä–µ–¥–ø—Ä–∞ –µ–∫—Ç–Ω–æ–π", "–ø—Ä–µ–¥–ø—Ä–æ–µ–∫—Ç–Ω–æ–π"),
                    ("—Å–∞ –≤–µ—â–∞–Ω–∏–π", "—Å–æ–≤–µ—â–∞–Ω–∏–π"),
                    ("–∏–Ω—Ñ–æ —Ä–º–∞—Ü–∏—è", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
                    ("—Ä–∞–Ω–Ω–µ–µ", "—Ä–∞–Ω–µ–µ"),
                    ("–ø—Ä –∞–µ–∫—Ç—É", "–ø—Ä–æ–µ–∫—Ç—É"),
                    ("–ø—Ä–∞ —à—É", "–ø—Ä–æ—à—É"),
                    ("–ø–æ—Ç—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
                    ("–≥–∞ —Ç–æ–≤–Ω–æ—Å—Ç—å", "–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å"),
                    ("–¥–∞–≥–∞–≤–æ—Ä–∞", "–¥–æ–≥–æ–≤–æ—Ä–∞"),
                    ("—Ä–∞—Å–º–æ—Ç—Ä–µ—Ç—å", "—Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å"),
                    ("–æ–±—å –µ–º", "–æ–±—ä–µ–º"),
                    ("—Å—Ç–∞–¥–∏–π–Ω –æ—Å—Ç—å", "—Å—Ç–∞–¥–∏–π–Ω–æ—Å—Ç—å"),
                    ("–ø—Ä–∞–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"),
                    ("–ø–∞ —Å–∫–æ–ª—å–∫—É", "–ø–æ—Å–∫–æ–ª—å–∫—É"),
                    ("—É—Ç–∞—á–Ω–∏—Ç—å", "—É—Ç–æ—á–Ω–∏—Ç—å"),
                    ("–ø–∞—Ä—è–¥–æ–∫", "–ø–æ—Ä—è–¥–æ–∫"),
                    ("—Ä –∏–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"),
                    ("–ü—Ä –∞–µ–∫—Ç", "–ü—Ä–æ–µ–∫—Ç"),
                    ("—É—Ç–∞—á–Ω–∏—Ç—å", "—É—Ç–æ—á–Ω–∏—Ç—å"),
                    ("–ø–∞—Ä—è–¥–æ–∫", "–ø–æ—Ä—è–¥–æ–∫")
                ]
                
                print("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ:")
                found_errors = []
                
                for error_word, correct_word in known_errors:
                    if error_word in text:
                        found_errors.append((error_word, correct_word))
                        print(f"  ‚ùå '{error_word}' ‚Üí '{correct_word}'")
                
                print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"  –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(found_errors)}")
                print(f"  –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö: {len(known_errors)}")
                print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {len(found_errors)/len(known_errors)*100:.1f}%")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ì–û –î–û–ö–£–ú–ï–ù–¢–ê –° –ì–†–£–ë–´–ú–ò –û–®–ò–ë–ö–ê–ú–ò")
        print("="*80)
        print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: E320.E32C-OUT-03484_–æ—Ç_20.05.2025_—Å_–≥—Ä—É–±—ã–º–∏_–æ—à–∏–±–∫–∞–º–∏.pdf")
        print(f"üÜî ID: {self.document_id}")
        print(f"‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        print("="*80)
        print()
        
        # –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        self.test_document_analysis()
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏
        self.test_spellcheck_analysis()
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
        self.test_grammar_check_analysis()
        
        # –¢–µ—Å—Ç 4: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        self.test_comprehensive_check_analysis()
        
        # –¢–µ—Å—Ç 5: –†—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
        self.test_manual_error_analysis()
        
        print("\n" + "="*80)
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("="*80)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = RealDocumentTester()
    tester.run_all_tests()


if __name__ == "__main__":
    main()
