#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã SpellChecker Service
"""

import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE = "https://localhost:8443/api/spellchecker"
TEST_TEXT = """
–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏.

–í —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫:
- –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: "–ø—Ä–∏–≤–µ—Ç" (–ø—Ä–∞–≤–∏–ª—å–Ω–æ), "–æ—à–∏–±–∫–∞" (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)
- –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: "—ç—Ç–æ –µ—Å—Ç—å" (–∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å), "–Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫" (—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ)

–¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–ª–æ–≤–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏: "—Å—É–ø–µ—Ä–¥–ª–∏–Ω–Ω–æ–µ—Å–ª–æ–≤–æ123" –∏ "—Ç–µ—Å—Ç123".

–ü—É–Ω–∫—Ç—É–∞—Ü–∏—è —Ç–æ–∂–µ –≤–∞–∂–Ω–∞: –≥–¥–µ –∑–∞–ø—è—Ç—ã–µ, –≥–¥–µ —Ç–æ—á–∫–∏, –≥–¥–µ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏!

–ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: "–∫—Ä–∞—Å–∏–≤—ã–π –¥–æ–º" –∏ "–∫—Ä–∞—Å–∏–≤–∞—è –º–∞—à–∏–Ω–∞".

–≠—Ç–æ –µ—Å—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ.
"""

def test_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è SpellChecker Service...")
    
    try:
        response = requests.get(f"{API_BASE}/health", verify=False)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"üìä –°—Ç–∞—Ç—É—Å: {data['status']}")
            print(f"üî§ Hunspell –¥–æ—Å—Ç—É–ø–µ–Ω: {data['hunspell_available']}")
            print(f"üìù LanguageTool –¥–æ—Å—Ç—É–ø–µ–Ω: {data['languagetool_available']}")
            return True
        else:
            print(f"‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_spell_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏...")
    
    try:
        data = {
            "text": TEST_TEXT,
            "language": "ru",
            "check_spelling": True,
            "check_grammar": False
        }
        
        response = requests.post(
            f"{API_BASE}/spellcheck",
            json=data,
            verify=False,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {json.dumps(result, indent=2, ensure_ascii=False)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_grammar_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏...")
    
    try:
        data = {
            "text": TEST_TEXT,
            "language": "ru",
            "check_spelling": False,
            "check_grammar": True
        }
        
        response = requests.post(
            f"{API_BASE}/grammar-check",
            json=data,
            verify=False,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {json.dumps(result, indent=2, ensure_ascii=False)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_comprehensive_check():
    """–¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    
    try:
        data = {
            "text": TEST_TEXT,
            "language": "ru",
            "check_spelling": True,
            "check_grammar": True
        }
        
        response = requests.post(
            f"{API_BASE}/comprehensive-check",
            json=data,
            verify=False,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {json.dumps(result, indent=2, ensure_ascii=False)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_languages():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤...")
    
    try:
        response = requests.get(f"{API_BASE}/languages", verify=False)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –Ø–∑—ã–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {json.dumps(result, indent=2, ensure_ascii=False)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_stats():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    try:
        response = requests.get(f"{API_BASE}/stats", verify=False)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {json.dumps(result, indent=2, ensure_ascii=False)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ SpellChecker Service")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞
    if not test_health():
        print("\n‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        exit(1)
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–µ—Ä–≤–∏—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    time.sleep(2)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_spell_check()
    test_grammar_check()
    test_comprehensive_check()
    test_languages()
    test_stats()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
