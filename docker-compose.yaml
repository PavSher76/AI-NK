services:
  # Redis для кэширования
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispass}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      - TZ=Europe/Moscow
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL для Keycloak
  keycloak-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
      TZ: Europe/Moscow
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Keycloak для аутентификации
  keycloak:
    image: quay.io/keycloak/keycloak:26.3.2
    command: start --https-key-store-file=/opt/keycloak/ssl/keycloak.keystore --https-key-store-password=keycloak --https-port=8443 --hostname-strict=false --import-realm --import-realm-strategy=OVERWRITE_EXISTING --http-enabled=true
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_PROFILE: prod
      QUARKUS_PROFILE: prod
      KC_HTTPS_KEYSTORE: /opt/keycloak/ssl/keycloak.keystore
      KC_HTTPS_KEYSTORE_PASSWORD: keycloak
      KC_SSL_REQUIRED: none
      KC_HTTPS_PORT: 8443
      KC_HTTP_ENABLED: false
      KC_HTTPS_ENABLED: true
      TZ: Europe/Moscow
    ports:
      - "${KEYCLOAK_PORT:-8081}:8443"
    volumes:
      - ./keycloak/ai-nk-realm.json:/opt/keycloak/data/import/ai-nk-realm.json:ro
      - ./ssl/keycloak.keystore:/opt/keycloak/ssl/keycloak.keystore:ro
      - ./keycloak/conf/keycloak.conf:/opt/keycloak/conf/keycloak.conf:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      keycloak-db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama для LLM моделей (оптимизированная конфигурация)
  ollama:
    image: ollama/ollama:latest
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    volumes:
      - ollama_data:/root/.ollama
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
      # Оптимизация контекста и производительности
      - OLLAMA_NUM_CTX=16384
      - OLLAMA_FLASH_ATTN=1
      - OLLAMA_NUM_BATCH=1024
      - OLLAMA_NUM_THREAD=8
      - OLLAMA_TEMPERATURE=0.1
      - TZ=Europe/Moscow
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 6G
          cpus: '2.0'
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # vLLM адаптер для Ollama (оптимизированная конфигурация)
  vllm:
    build: ./ollama_adapter
    ports:
      - "8000:8000"
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_CPU_THREADS=2
      - OLLAMA_GPU_LAYERS=0
      - OLLAMA_BATCH_SIZE=1
      - TZ=Europe/Moscow
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - ollama
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # API Gateway
  gateway:
    build: 
      context: .
      dockerfile: gateway/Dockerfile
    ports:
      - "${GATEWAY_PORT:-8443}:8443"
    environment:
      - "UPSTREAM_URL=http://vllm:8000/v1"
      - "OIDC_ISSUER="
      - "OIDC_AUDIENCE="
      - "OIDC_JWKS_URL="
      - "REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0"
      - "RATE_LIMIT_DEFAULT_RPM=300"
      - "RATE_LIMIT_RPM_BY_ROLE={\"admin\": 1000, \"user\": 300}"
      - TZ=Europe/Moscow
    volumes:
      - ./ssl:/app/ssl:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - vllm
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    # healthcheck:
    #   test: ["CMD", "curl", "-k", "-f", "https://localhost:8443/healthz"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # Frontend
  frontend:
    build: ./frontend
    ports:
      - "${FRONTEND_PORT:-443}:443"
    environment:
      - TZ=Europe/Moscow
    volumes:
      - ./ssl/frontend.crt:/etc/nginx/ssl/frontend.crt:ro
      - ./ssl/frontend.key:/etc/nginx/ssl/frontend.key:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - gateway
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus для мониторинга
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    environment:
      - TZ=Europe/Moscow
    volumes:
      - prometheus_data:/prometheus
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_PLUGINS_PREINSTALL=grafana-clock-panel,grafana-simple-json-datasource
      - TZ=Europe/Moscow
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL с pgvector для нормативных документов
  norms-db:
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-norms_db}
      POSTGRES_USER: ${POSTGRES_USER:-norms_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-norms_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      # Настройки логирования PostgreSQL для отладки подключений
      POSTGRES_SHARED_PRELOAD_LIBRARIES: "pg_stat_statements"
      # Переменные для настройки логирования
      POSTGRES_LOG_STATEMENT: "all"
      POSTGRES_LOG_LINE_PREFIX: "%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h "
      POSTGRES_LOG_MIN_DURATION_STATEMENT: 0
      POSTGRES_LOG_CONNECTIONS: "on"
      POSTGRES_LOG_DISCONNECTIONS: "on"
      TZ: Europe/Moscow
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - norms_db_data:/var/lib/postgresql/data
      - ./sql/init_norms_db.sql:/docker-entrypoint-initdb.d/01_init_norms_db.sql:ro
      - ./sql/configure_logging.sql:/docker-entrypoint-initdb.d/02_configure_logging.sql:ro
      - ./sql/configure_keycloak_auth.sql:/docker-entrypoint-initdb.d/03_configure_keycloak_auth.sql:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-norms_user} -d ${POSTGRES_DB:-norms_db}"]
    #   interval: 60s
    #   timeout: 10s
    #   retries: 3

  # PgBouncer для connection pooling
  pgbouncer:
    image: edoburu/pgbouncer:1.18.0
    environment:
      - DB_HOST=norms-db
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-norms_db}
      - DB_USER=${POSTGRES_USER:-norms_user}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-norms_password}
      - PGBOUNCER_PORT=5433
      - PGBOUNCER_POOL_MODE=transaction
      - PGBOUNCER_MAX_CLIENT_CONN=1000
      - PGBOUNCER_DEFAULT_POOL_SIZE=20
      - PGBOUNCER_MIN_POOL_SIZE=10
      - PGBOUNCER_RESERVE_POOL_SIZE=5
      - PGBOUNCER_RESERVE_POOL_TIMEOUT=5
      - PGBOUNCER_MAX_DB_CONNECTIONS=50
      - PGBOUNCER_MAX_USER_CONNECTIONS=50
      - PGBOUNCER_SERVER_RESET_QUERY=DISCARD ALL
      - PGBOUNCER_SERVER_RESET_QUERY_ALWAYS=1
      - PGBOUNCER_QUERY_TIMEOUT=0
      - PGBOUNCER_QUERY_WAIT_TIMEOUT=120
      - PGBOUNCER_CLIENT_TLS_SSLMODE=disable
      - PGBOUNCER_SERVER_TLS_SSLMODE=disable
      - PGBOUNCER_AUTH_TYPE=md5
      - PGBOUNCER_AUTH_FILE=/etc/pgbouncer/userlist.txt
      - TZ=Europe/Moscow
    ports:
      - "5433:5433"
    volumes:
      - ./configs/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - norms-db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-p", "5433", "-U", "${POSTGRES_USER:-norms_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Qdrant для векторного поиска
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "${QDANT_PORT:-6333}:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      - TZ=Europe/Moscow
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # Парсер документов (оптимизированная конфигурация)
  document-parser:
    build: ./document_parser
    ports:
      - "8001:8001"
    environment:
      - POSTGRES_HOST=norms-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-norms_db}
      - POSTGRES_USER=${POSTGRES_USER:-norms_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-norms_password}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
      # Настройки лимитов загрузки файлов
      - MAX_CHECKABLE_DOCUMENT_SIZE=${MAX_CHECKABLE_DOCUMENT_SIZE:-104857600}
      - MAX_NORMATIVE_DOCUMENT_SIZE=${MAX_NORMATIVE_DOCUMENT_SIZE:-209715200}
      - LLM_REQUEST_TIMEOUT=${LLM_REQUEST_TIMEOUT:-120}
      - PAGE_PROCESSING_TIMEOUT=${PAGE_PROCESSING_TIMEOUT:-300}
      - TZ=Europe/Moscow
    volumes:
      - ./uploads:/app/uploads
      - ./temp:/app/temp
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - norms-db
      - qdrant
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1.5G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Rule Engine для проверок
  rule-engine:
    build: ./rule_engine
    ports:
      - "8002:8002"
    environment:
      - POSTGRES_HOST=norms-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-norms_db}
      - POSTGRES_USER=${POSTGRES_USER:-norms_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-norms_password}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - GATEWAY_URL=https://gateway:8443
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
      - TZ=Europe/Moscow
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - norms-db
      - qdrant
      - gateway
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Calculation Service для инженерных расчетов
  calculation-service:
    build: ./calculation_service
    ports:
      - "8004:8002"
    environment:
      - POSTGRES_HOST=norms-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-norms_db}
      - POSTGRES_USER=${POSTGRES_USER:-norms_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-norms_password}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - TZ=Europe/Moscow
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - norms-db
      - qdrant
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RAG Service для поиска по нормам
  rag-service:
    build: 
      context: ./rag_service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-norms_user}:${POSTGRES_PASSWORD:-norms_password}@norms-db:5432/${POSTGRES_DB:-norms_db}
      - QDRANT_URL=http://qdrant:6333
      - OLLAMA_URL=http://ollama:11434
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
      - TRANSFORMERS_CACHE=/app/models
      - HF_HOME=/app/models
      - TZ=Europe/Moscow
    volumes:
      - rag_models:/app/models
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - norms-db
      - qdrant
      - ollama
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 6G
        reservations:
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
    driver: local
  keycloak_db_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  norms_db_data:
    driver: local
  qdrant_data:
    driver: local
  rag_models:
    driver: local

networks:
  default:
    name: ai-nk-network
    driver: bridge
