"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
–°–æ–¥–µ—Ä–∂–∏—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pdfminer, PyPDF2 –∏ OCR
"""

import logging
import io
from typing import Dict, Any, List, Optional
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF
try:
    import PyPDF2
    PDF2_AVAILABLE = True
except ImportError:
    PDF2_AVAILABLE = False

try:
    from pdfminer.high_level import extract_text, extract_pages
    from pdfminer.layout import LAParams, LTTextContainer
    from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
    from pdfminer.converter import TextConverter
    from pdfminer.pdfpage import PDFPage
    PDFMINER_AVAILABLE = True
except ImportError:
    PDFMINER_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
try:
    from .ocr_processor import OCRProcessor
    OCR_AVAILABLE = True
except ImportError:
    OCR_AVAILABLE = False

logger = logging.getLogger(__name__)


class PDFTextExtractor:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OCR"""
    
    def __init__(self, prefer_pdfminer: bool = True, use_ocr: bool = True, ocr_languages: List[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
        
        Args:
            prefer_pdfminer: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å pdfminer –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π)
            use_ocr: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OCR –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∏ —á–µ—Ä—Ç–µ–∂–µ–π
            ocr_languages: –Ø–∑—ã–∫–∏ –¥–ª—è OCR (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: rus+eng)
        """
        self.prefer_pdfminer = prefer_pdfminer
        self.use_ocr = use_ocr and OCR_AVAILABLE
        self.ocr_languages = ocr_languages or ["rus", "eng"]
        
        if not PDF2_AVAILABLE and not PDFMINER_AVAILABLE:
            raise ImportError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyPDF2 –∏–ª–∏ pdfminer.six –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.use_ocr:
            try:
                self.ocr_processor = OCRProcessor(languages=self.ocr_languages)
                logger.info("‚úÖ [PDF_EXTRACT] OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [PDF_EXTRACT] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OCR: {e}")
                self.use_ocr = False
    
    def extract_text_from_file(self, file_path: str) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            if self.prefer_pdfminer and PDFMINER_AVAILABLE:
                return self._extract_with_pdfminer(file_path)
            elif PDF2_AVAILABLE:
                return self._extract_with_pypdf2(file_path)
            else:
                raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF")
                
        except Exception as e:
            logger.error(f"‚ùå [PDF_EXTRACT] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ {file_path}: {e}")
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            if self.prefer_pdfminer and PDF2_AVAILABLE:
                logger.info("üîÑ [PDF_EXTRACT] –ü—Ä–æ–±—É–µ–º PyPDF2 –∫–∞–∫ fallback")
                return self._extract_with_pypdf2(file_path)
            elif PDFMINER_AVAILABLE:
                logger.info("üîÑ [PDF_EXTRACT] –ü—Ä–æ–±—É–µ–º pdfminer –∫–∞–∫ fallback")
                return self._extract_with_pdfminer(file_path)
            else:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF: {e}")
    
    def extract_text_from_bytes(self, file_content: bytes) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤
        
        Args:
            file_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            if self.prefer_pdfminer and PDFMINER_AVAILABLE:
                return self._extract_with_pdfminer_bytes(file_content)
            elif PDF2_AVAILABLE:
                return self._extract_with_pypdf2_bytes(file_content)
            else:
                raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF")
                
        except Exception as e:
            logger.error(f"‚ùå [PDF_EXTRACT] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–∞–π—Ç–æ–≤: {e}")
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            if self.prefer_pdfminer and PDF2_AVAILABLE:
                logger.info("üîÑ [PDF_EXTRACT] –ü—Ä–æ–±—É–µ–º PyPDF2 –∫–∞–∫ fallback")
                return self._extract_with_pypdf2_bytes(file_content)
            elif PDFMINER_AVAILABLE:
                logger.info("üîÑ [PDF_EXTRACT] –ü—Ä–æ–±—É–µ–º pdfminer –∫–∞–∫ fallback")
                return self._extract_with_pdfminer_bytes(file_content)
            else:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF: {e}")
    
    def _extract_with_pdfminer(self, file_path: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é pdfminer (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π)"""
        try:
            pages = []
            full_text = ""
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            laparams = LAParams(
                word_margin=0.1,
                char_margin=2.0,
                line_margin=0.5,
                boxes_flow=0.5,
                all_texts=True
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            for page_num, page_layout in enumerate(extract_pages(file_path, laparams=laparams), 1):
                page_text = ""
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                for element in page_layout:
                    if isinstance(element, LTTextContainer):
                        page_text += element.get_text()
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                cleaned_page_text = page_text
                
                pages.append({
                    "page_number": page_num,
                    "text": cleaned_page_text,
                    "raw_text": page_text,
                    "char_count": len(cleaned_page_text),
                    "word_count": len(cleaned_page_text.split())
                })
                full_text += cleaned_page_text + "\n"
            
            logger.info(f"üìÑ [PDFMINER] –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ PDF")
            return {
                "success": True,
                "text": full_text.strip(),
                "pages": pages,
                "total_pages": len(pages),
                "method": "pdfminer",
                "metadata": {
                    "total_chars": len(full_text),
                    "total_words": len(full_text.split()),
                    "avg_chars_per_page": len(full_text) // len(pages) if pages else 0
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå [PDFMINER] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å pdfminer: {str(e)}")
    
    def _extract_with_pdfminer_bytes(self, file_content: bytes) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é pdfminer –∏–∑ –±–∞–π—Ç–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            import tempfile
            with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:
                temp_file.write(file_content)
                temp_file_path = temp_file.name
            
            try:
                result = self._extract_with_pdfminer(temp_file_path)
                return result
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                Path(temp_file_path).unlink(missing_ok=True)
                
        except Exception as e:
            logger.error(f"‚ùå [PDFMINER_BYTES] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–∞–π—Ç–æ–≤: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å pdfminer –∏–∑ –±–∞–π—Ç–æ–≤: {str(e)}")
    
    def _extract_with_pypdf2(self, file_path: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é PyPDF2"""
        try:
            pages = []
            full_text = ""
            
            with open(file_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                total_pages = len(pdf_reader.pages)
                
                for page_num in range(total_pages):
                    page = pdf_reader.pages[page_num]
                    page_text = page.extract_text()
                    
                    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    cleaned_page_text = page_text
                    
                    pages.append({
                        "page_number": page_num + 1,
                        "text": cleaned_page_text,
                        "raw_text": page_text,
                        "char_count": len(cleaned_page_text),
                        "word_count": len(cleaned_page_text.split())
                    })
                    full_text += cleaned_page_text + "\n"
            
            logger.info(f"üìÑ [PYPDF2] –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ PDF")
            return {
                "success": True,
                "text": full_text.strip(),
                "pages": pages,
                "total_pages": len(pages),
                "method": "pypdf2",
                "metadata": {
                    "total_chars": len(full_text),
                    "total_words": len(full_text.split()),
                    "avg_chars_per_page": len(full_text) // len(pages) if pages else 0
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå [PYPDF2] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å PyPDF2: {str(e)}")
    
    def _extract_with_pypdf2_bytes(self, file_content: bytes) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é PyPDF2 –∏–∑ –±–∞–π—Ç–æ–≤"""
        try:
            pages = []
            full_text = ""
            
            pdf_file = io.BytesIO(file_content)
            pdf_reader = PyPDF2.PdfReader(pdf_file)
            total_pages = len(pdf_reader.pages)
            
            for page_num in range(total_pages):
                page = pdf_reader.pages[page_num]
                page_text = page.extract_text()
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                cleaned_page_text = page_text
                
                pages.append({
                    "page_number": page_num + 1,
                    "text": cleaned_page_text,
                    "raw_text": page_text,
                    "char_count": len(cleaned_page_text),
                    "word_count": len(cleaned_page_text.split())
                })
                full_text += cleaned_page_text + "\n"
            
            logger.info(f"üìÑ [PYPDF2_BYTES] –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ PDF")
            return {
                "success": True,
                "text": full_text.strip(),
                "pages": pages,
                "total_pages": len(pages),
                "method": "pypdf2",
                "metadata": {
                    "total_chars": len(full_text),
                    "total_words": len(full_text.split()),
                    "avg_chars_per_page": len(full_text) // len(pages) if pages else 0
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå [PYPDF2_BYTES] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å PyPDF2 –∏–∑ –±–∞–π—Ç–æ–≤: {str(e)}")
    
    
    def create_chunks(self, text: str, chunk_size: int = 1000, overlap: int = 100) -> List[Dict[str, Any]]:
        """
        –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            chunk_size: –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
            overlap: –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —á–∞–Ω–∫–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        chunks = []
        words = text.split()
        
        for i in range(0, len(words), chunk_size - overlap):
            chunk_words = words[i:i + chunk_size]
            chunk_text = ' '.join(chunk_words)
            
            chunks.append({
                'content': chunk_text,
                'start_word': i,
                'end_word': min(i + chunk_size, len(words)),
                'char_count': len(chunk_text),
                'word_count': len(chunk_words)
            })
        
        return chunks
    
    def extract_with_ocr(self, file_path: str) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OCR –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∏ —á–µ—Ä—Ç–µ–∂–µ–π
        
        Args:
            file_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        if not self.use_ocr:
            logger.warning("‚ö†Ô∏è [PDF_EXTRACT] OCR –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ")
            return self.extract_text_from_file(file_path)
        
        try:
            logger.info(f"üîç [PDF_EXTRACT] –ù–∞—á–∏–Ω–∞–µ–º OCR –æ–±—Ä–∞–±–æ—Ç–∫—É: {file_path}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
            standard_result = self.extract_text_from_file(file_path)
            
            # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º OCR –æ–±—Ä–∞–±–æ—Ç–∫—É
            ocr_result = self.ocr_processor.process_pdf_with_ocr(file_path)
            
            if ocr_result.get('success', False):
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                combined_result = {
                    "success": True,
                    "text": standard_result.get("text", ""),
                    "pages": standard_result.get("pages", []),
                    "total_pages": standard_result.get("total_pages", 0),
                    "method": "standard+ocr",
                    "ocr_data": {
                        "tables": ocr_result.get("tables", []),
                        "drawings": ocr_result.get("drawings", []),
                        "processing_time": ocr_result.get("processing_time", 0)
                    },
                    "metadata": standard_result.get("metadata", {})
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º OCR —Ç–µ–∫—Å—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
                ocr_text = ""
                for table in ocr_result.get("tables", []):
                    ocr_text += f"\n\n[–¢–ê–ë–õ–ò–¶–ê {table.get('table_number', '')} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {table.get('page_number', '')}]:\n"
                    ocr_text += table.get("text", "")
                
                for drawing in ocr_result.get("drawings", []):
                    ocr_text += f"\n\n[–ß–ï–†–¢–ï–ñ {drawing.get('drawing_number', '')} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {drawing.get('page_number', '')}]:\n"
                    ocr_text += drawing.get("text", "")
                
                combined_result["text"] += ocr_text
                
                logger.info(f"‚úÖ [PDF_EXTRACT] OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {len(ocr_result.get('tables', []))} —Ç–∞–±–ª–∏—Ü –∏ {len(ocr_result.get('drawings', []))} —á–µ—Ä—Ç–µ–∂–µ–π")
                return combined_result
            else:
                logger.warning(f"‚ö†Ô∏è [PDF_EXTRACT] OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {ocr_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return standard_result
                
        except Exception as e:
            logger.error(f"‚ùå [PDF_EXTRACT] –û—à–∏–±–∫–∞ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ OCR
            return self.extract_text_from_file(file_path)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def extract_text_from_pdf_file(file_path: str, prefer_pdfminer: bool = True) -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Ñ–∞–π–ª–∞ (—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    
    Args:
        file_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        prefer_pdfminer: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å pdfminer –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    extractor = PDFTextExtractor(prefer_pdfminer=prefer_pdfminer)
    return extractor.extract_text_from_file(file_path)


def extract_text_from_pdf_bytes(file_content: bytes, prefer_pdfminer: bool = True) -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤ (—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    
    Args:
        file_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
        prefer_pdfminer: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å pdfminer –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    extractor = PDFTextExtractor(prefer_pdfminer=prefer_pdfminer)
    return extractor.extract_text_from_bytes(file_content)
