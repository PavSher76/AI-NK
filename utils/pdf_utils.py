"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
–°–æ–¥–µ—Ä–∂–∏—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pdfminer –∏ PyPDF2
"""

import logging
import io
from typing import Dict, Any, List, Optional
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF
try:
    import PyPDF2
    PDF2_AVAILABLE = True
except ImportError:
    PDF2_AVAILABLE = False

try:
    from pdfminer.high_level import extract_text, extract_pages
    from pdfminer.layout import LAParams, LTTextContainer
    from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
    from pdfminer.converter import TextConverter
    from pdfminer.pdfpage import PDFPage
    PDFMINER_AVAILABLE = True
except ImportError:
    PDFMINER_AVAILABLE = False

logger = logging.getLogger(__name__)


class PDFTextExtractor:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, prefer_pdfminer: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
        
        Args:
            prefer_pdfminer: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å pdfminer –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π)
        """
        self.prefer_pdfminer = prefer_pdfminer
        
        if not PDF2_AVAILABLE and not PDFMINER_AVAILABLE:
            raise ImportError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyPDF2 –∏–ª–∏ pdfminer.six –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF")
    
    def extract_text_from_file(self, file_path: str) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            if self.prefer_pdfminer and PDFMINER_AVAILABLE:
                return self._extract_with_pdfminer(file_path)
            elif PDF2_AVAILABLE:
                return self._extract_with_pypdf2(file_path)
            else:
                raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF")
                
        except Exception as e:
            logger.error(f"‚ùå [PDF_EXTRACT] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ {file_path}: {e}")
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            if self.prefer_pdfminer and PDF2_AVAILABLE:
                logger.info("üîÑ [PDF_EXTRACT] –ü—Ä–æ–±—É–µ–º PyPDF2 –∫–∞–∫ fallback")
                return self._extract_with_pypdf2(file_path)
            elif PDFMINER_AVAILABLE:
                logger.info("üîÑ [PDF_EXTRACT] –ü—Ä–æ–±—É–µ–º pdfminer –∫–∞–∫ fallback")
                return self._extract_with_pdfminer(file_path)
            else:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF: {e}")
    
    def extract_text_from_bytes(self, file_content: bytes) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤
        
        Args:
            file_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            if self.prefer_pdfminer and PDFMINER_AVAILABLE:
                return self._extract_with_pdfminer_bytes(file_content)
            elif PDF2_AVAILABLE:
                return self._extract_with_pypdf2_bytes(file_content)
            else:
                raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF")
                
        except Exception as e:
            logger.error(f"‚ùå [PDF_EXTRACT] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–∞–π—Ç–æ–≤: {e}")
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            if self.prefer_pdfminer and PDF2_AVAILABLE:
                logger.info("üîÑ [PDF_EXTRACT] –ü—Ä–æ–±—É–µ–º PyPDF2 –∫–∞–∫ fallback")
                return self._extract_with_pypdf2_bytes(file_content)
            elif PDFMINER_AVAILABLE:
                logger.info("üîÑ [PDF_EXTRACT] –ü—Ä–æ–±—É–µ–º pdfminer –∫–∞–∫ fallback")
                return self._extract_with_pdfminer_bytes(file_content)
            else:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF: {e}")
    
    def _extract_with_pdfminer(self, file_path: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é pdfminer (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π)"""
        try:
            pages = []
            full_text = ""
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            laparams = LAParams(
                word_margin=0.1,
                char_margin=2.0,
                line_margin=0.5,
                boxes_flow=0.5,
                all_texts=True
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            for page_num, page_layout in enumerate(extract_pages(file_path, laparams=laparams), 1):
                page_text = ""
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                for element in page_layout:
                    if isinstance(element, LTTextContainer):
                        page_text += element.get_text()
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                cleaned_page_text = self._clean_extracted_text(page_text)
                
                pages.append({
                    "page_number": page_num,
                    "text": cleaned_page_text,
                    "raw_text": page_text,
                    "char_count": len(cleaned_page_text),
                    "word_count": len(cleaned_page_text.split())
                })
                full_text += cleaned_page_text + "\n"
            
            logger.info(f"üìÑ [PDFMINER] –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ PDF")
            return {
                "success": True,
                "text": full_text.strip(),
                "pages": pages,
                "total_pages": len(pages),
                "method": "pdfminer",
                "metadata": {
                    "total_chars": len(full_text),
                    "total_words": len(full_text.split()),
                    "avg_chars_per_page": len(full_text) // len(pages) if pages else 0
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå [PDFMINER] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å pdfminer: {str(e)}")
    
    def _extract_with_pdfminer_bytes(self, file_content: bytes) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é pdfminer –∏–∑ –±–∞–π—Ç–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            import tempfile
            with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:
                temp_file.write(file_content)
                temp_file_path = temp_file.name
            
            try:
                result = self._extract_with_pdfminer(temp_file_path)
                return result
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                Path(temp_file_path).unlink(missing_ok=True)
                
        except Exception as e:
            logger.error(f"‚ùå [PDFMINER_BYTES] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–∞–π—Ç–æ–≤: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å pdfminer –∏–∑ –±–∞–π—Ç–æ–≤: {str(e)}")
    
    def _extract_with_pypdf2(self, file_path: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é PyPDF2"""
        try:
            pages = []
            full_text = ""
            
            with open(file_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                total_pages = len(pdf_reader.pages)
                
                for page_num in range(total_pages):
                    page = pdf_reader.pages[page_num]
                    page_text = page.extract_text()
                    
                    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    cleaned_page_text = self._clean_extracted_text(page_text)
                    
                    pages.append({
                        "page_number": page_num + 1,
                        "text": cleaned_page_text,
                        "raw_text": page_text,
                        "char_count": len(cleaned_page_text),
                        "word_count": len(cleaned_page_text.split())
                    })
                    full_text += cleaned_page_text + "\n"
            
            logger.info(f"üìÑ [PYPDF2] –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ PDF")
            return {
                "success": True,
                "text": full_text.strip(),
                "pages": pages,
                "total_pages": len(pages),
                "method": "pypdf2",
                "metadata": {
                    "total_chars": len(full_text),
                    "total_words": len(full_text.split()),
                    "avg_chars_per_page": len(full_text) // len(pages) if pages else 0
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå [PYPDF2] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å PyPDF2: {str(e)}")
    
    def _extract_with_pypdf2_bytes(self, file_content: bytes) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é PyPDF2 –∏–∑ –±–∞–π—Ç–æ–≤"""
        try:
            pages = []
            full_text = ""
            
            pdf_file = io.BytesIO(file_content)
            pdf_reader = PyPDF2.PdfReader(pdf_file)
            total_pages = len(pdf_reader.pages)
            
            for page_num in range(total_pages):
                page = pdf_reader.pages[page_num]
                page_text = page.extract_text()
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                cleaned_page_text = self._clean_extracted_text(page_text)
                
                pages.append({
                    "page_number": page_num + 1,
                    "text": cleaned_page_text,
                    "raw_text": page_text,
                    "char_count": len(cleaned_page_text),
                    "word_count": len(cleaned_page_text.split())
                })
                full_text += cleaned_page_text + "\n"
            
            logger.info(f"üìÑ [PYPDF2_BYTES] –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ PDF")
            return {
                "success": True,
                "text": full_text.strip(),
                "pages": pages,
                "total_pages": len(pages),
                "method": "pypdf2",
                "metadata": {
                    "total_chars": len(full_text),
                    "total_words": len(full_text.split()),
                    "avg_chars_per_page": len(full_text) // len(pages) if pages else 0
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå [PYPDF2_BYTES] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å PyPDF2 –∏–∑ –±–∞–π—Ç–æ–≤: {str(e)}")
    
    def _clean_extracted_text(self, text: str) -> str:
        """
        –û—á–∏—Å—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        import re
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'[\u00A0\u2000-\u200F\u2028-\u202F\u205F\u3000]', ' ', text)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤—ã —Å–ª–æ–≤ –≤ PDF (–ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É –±—É–∫–≤–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞)
        # –ü–∞—Ç—Ç–µ—Ä–Ω: –±—É–∫–≤–∞ + –ø—Ä–æ–±–µ–ª + –±—É–∫–≤–∞ (–≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤–∞)
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        for _ in range(3):
            text = re.sub(r'([–∞-—è—ë])\s+([–∞-—è—ë])', r'\1\2', text)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤—ã –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ –∏ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        text = re.sub(r'([–∞-—è—ë])\s+([.,!?;:])', r'\1\2', text)
        text = re.sub(r'([.,!?;:])\s+([–∞-—è—ë])', r'\1 \2', text)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–∑—Ä—ã–≤–∞–º–∏ —Å–ª–æ–≤
        text = re.sub(r'\b—Å–º–µ–∂–Ω—ã\s+—Ö\b', '—Å–º–µ–∂–Ω—ã—Ö', text)
        text = re.sub(r'\b–ø—Ä–æ\s+–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\b', '–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', text)
        text = re.sub(r'\b—Ç—Ä–µ–±–æ–≤–∞\s+–Ω–∏—è–º\b', '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º', text)
        text = re.sub(r'\b—Å–≤\s+–æ–¥–æ–≤\b', '—Å–≤–æ–¥–æ–≤', text)
        text = re.sub(r'\b—É—Å—Ç–∞–Ω–æ–≤\s+–ª–µ–Ω–Ω—ã–µ\b', '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ', text)
        text = re.sub(r'\b—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö\s+—Ä–µ—à–µ–Ω\s+–∏–π\b', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π', text)
        text = re.sub(r'\b–¥–∞–ª—å–Ω–µ–π—à–µ–º—É\s+–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É\b', '–¥–∞–ª—å–Ω–µ–π—à–µ–º—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É', text)
        text = re.sub(r'\b—Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö\s+—É—Å—Ç–∞–Ω–æ–≤\s+–ª–µ–Ω–Ω—ã–µ\b', '—Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ', text)
        text = re.sub(r'\b—Ç–µ—Ö\s+–Ω–∏—á–µ—Å–∫–∏–π\b', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π', text)
        text = re.sub(r'\b–±–µ–∑–æ–ø–∞—Å–Ω\s+–æ—Å—Ç–∏\b', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', text)
        text = re.sub(r'\b—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏\s+–∏\b', '—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏', text)
        text = re.sub(r'\b–∑–¥–∞–Ω–∏–π\s+–∏\s+—Å–æ–æ—Ä\s+—É–∂–µ–Ω–∏–π\b', '–∑–¥–∞–Ω–∏–π –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π', text)
        text = re.sub(r'\b–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∂–∞—Ä–Ω–æ–π\s+–∑–∞—â–∏—Ç—ã\b', '–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∂–∞—Ä–Ω–æ–π –∑–∞—â–∏—Ç—ã', text)
        text = re.sub(r'\b—ç–≤–∞–∫—É–∞—Ü–∏–æ–Ω–Ω—ã–µ\s+–ø—É—Ç–∏\b', '—ç–≤–∞–∫—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—É—Ç–∏', text)
        text = re.sub(r'\b–æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è\s+–æ–≥–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç–∏\b', '–æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ–≥–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç–∏', text)
        text = re.sub(r'\b–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ\s+—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è\b', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è', text)
        text = re.sub(r'\b–æ–±—ä–µ–∫—Ç–∞—Ö\s+–∑–∞\s+—â–∏—Ç—ã\b', '–æ–±—ä–µ–∫—Ç–∞—Ö –∑–∞—â–∏—Ç—ã', text)
        text = re.sub(r'\b–æ–±—ä–µ–º–Ω–æ-–ø–ª–∞–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–º\s+–∏\b', '–æ–±—ä–µ–º–Ω–æ-–ø–ª–∞–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–º', text)
        text = re.sub(r'\b–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º\s+—Ä–µ—à–µ–Ω–∏—è–º\b', '–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º', text)
        text = re.sub(r'\b–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ\s+–∑–¥–∞–Ω–∏—è\b', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è', text)
        text = re.sub(r'\b–∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è\s+—Ä–µ–¥–∞–∫—Ü–∏—è\b', '–∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è', text)
        text = re.sub(r'\b–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ\s+–∏\s+–±—ã—Ç–æ–≤—ã–µ\b', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏ –±—ã—Ç–æ–≤—ã–µ', text)
        text = re.sub(r'\b–∑–¥–∞\s+–Ω–∏—è\b', '–∑–¥–∞–Ω–∏—è', text)
        text = re.sub(r'\b–∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è\s+—Ä–µ\s+–¥–∞–∫—Ü–∏—è\b', '–∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è', text)
        text = re.sub(r'\b–∫—Ä–æ–≤–ª–∏\s+–∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è\b', '–∫—Ä–æ–≤–ª–∏. –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è', text)
        text = re.sub(r'\b—Ç–µ–ø–ª–æ–≤–∞—è\s+–∑–∞—â–∏—Ç–∞\b', '—Ç–µ–ø–ª–æ–≤–∞—è –∑–∞—â–∏—Ç–∞', text)
        text = re.sub(r'\b–∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è\s+—Ä–µ\s+–¥–∞–∫—Ü–∏—è\b', '–∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è', text)
        text = re.sub(r'\b–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ\s+–∏\s+–∏—Å–∫—É\s+—Å—Ç–≤–µ–Ω–Ω–æ–µ\b', '–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ', text)
        text = re.sub(r'\b–æ—Å–≤–µ—â–µ–Ω–∏–µ\s+–∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è\b', '–æ—Å–≤–µ—â–µ–Ω–∏–µ. –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è', text)
        text = re.sub(r'\b—Ä–µ–¥–∞–∫—Ü–∏—è\s+—Å–Ω–∏–ø\b', '—Ä–µ–¥–∞–∫—Ü–∏—è –°–ù–∏–ü', text)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å "—Å–∞–∞—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏" -> "—Å–∞–∞ —Ç–≤–µ—Ç—Å—Ç–≤–∏–∏"
        text = re.sub(r'\b—Å–∞–∞\s+—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏\b', '—Å–∞–∞—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏', text)
        text = re.sub(r'\b–≤\s+—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏\b', '–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏', text)
        text = re.sub(r'\b–≤\s+—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ\b', '–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ', text)
        text = re.sub(r'\b–≤\s+—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏\b', '–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏', text)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ PDF
        text = re.sub(r'\b–≤\s+—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏\s+—Å\b', '–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å', text)
        text = re.sub(r'\b–≤\s+—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ\s+—Å\b', '–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å', text)
        text = re.sub(r'\b–≤\s+—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏\s+—Å\b', '–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å', text)
        
        # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ —Å—Ç—Ä–æ–∫–∞—Ö, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'[ \t]+', ' ', text)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
        lines = text.split('\n')
        lines = [line.strip() for line in lines]
        text = '\n'.join(lines)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ (–±–æ–ª–µ–µ 2 –ø–æ–¥—Ä—è–¥)
        text = re.sub(r'\n\s*\n\s*\n+', '\n\n', text)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        text = re.sub(r'\s+([.,!?;:])', r'\1', text)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏
        text = re.sub(r'\(\s+', '(', text)
        text = re.sub(r'\s+\)', ')', text)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö
        text = re.sub(r'"\s+', '"', text)
        text = re.sub(r'\s+"', '"', text)
        
        return text.strip()
    
    def create_chunks(self, text: str, chunk_size: int = 1000, overlap: int = 100) -> List[Dict[str, Any]]:
        """
        –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            chunk_size: –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
            overlap: –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —á–∞–Ω–∫–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        chunks = []
        words = text.split()
        
        for i in range(0, len(words), chunk_size - overlap):
            chunk_words = words[i:i + chunk_size]
            chunk_text = ' '.join(chunk_words)
            
            chunks.append({
                'content': chunk_text,
                'start_word': i,
                'end_word': min(i + chunk_size, len(words)),
                'char_count': len(chunk_text),
                'word_count': len(chunk_words)
            })
        
        return chunks


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def extract_text_from_pdf_file(file_path: str, prefer_pdfminer: bool = True) -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Ñ–∞–π–ª–∞ (—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    
    Args:
        file_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        prefer_pdfminer: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å pdfminer –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    extractor = PDFTextExtractor(prefer_pdfminer=prefer_pdfminer)
    return extractor.extract_text_from_file(file_path)


def extract_text_from_pdf_bytes(file_content: bytes, prefer_pdfminer: bool = True) -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤ (—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    
    Args:
        file_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
        prefer_pdfminer: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å pdfminer –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    extractor = PDFTextExtractor(prefer_pdfminer=prefer_pdfminer)
    return extractor.extract_text_from_bytes(file_content)
