#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ spellchecker-service —Å outgoing-control-service
"""

import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OUTGOING_CONTROL_URL = "http://localhost:8006"
SPELLCHECKER_URL = "http://localhost:8007"

def test_health_checks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º outgoing-control-service
    try:
        response = requests.get(f"{OUTGOING_CONTROL_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Outgoing Control Service: {data['status']}")
            print(f"üìä Spellchecker Service: {data.get('spellchecker_service', 'unknown')}")
        else:
            print(f"‚ùå Outgoing Control Service: HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå Outgoing Control Service: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º spellchecker-service –Ω–∞–ø—Ä—è–º—É—é
    try:
        response = requests.get(f"{SPELLCHECKER_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Spellchecker Service: {data['status']}")
            print(f"üî§ Hunspell: {data.get('hunspell_available', False)}")
            print(f"üìù LanguageTool: {data.get('languagetool_available', False)}")
        else:
            print(f"‚ùå Spellchecker Service: HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå Spellchecker Service: {e}")

def test_document_upload():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    
    test_content = """–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.

–í —ç—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º:
- –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: "–æ—à–∏–±–∫–∞–∞" (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "–æ—à–∏–±–∫–∞")
- –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: "—ç—Ç–æ –µ—Å—Ç—å" (–∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å)
- –î–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: "—Å—É–ø–µ—Ä–¥–ª–∏–Ω–Ω–æ–µ—Å–ª–æ–≤–æ123"

–ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏.
"""
    
    try:
        files = {'file': ('test_integration.txt', test_content, 'text/plain')}
        response = requests.post(f"{OUTGOING_CONTROL_URL}/upload", files=files)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {data['document_id']}")
            return data['document_id']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def test_spellcheck_integration(document_id, text):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏...")
    
    try:
        data = {
            "document_id": document_id,
            "text": text
        }
        
        response = requests.post(
            f"{OUTGOING_CONTROL_URL}/spellcheck",
            json=data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            print(f"üìä –ú–µ—Ç–æ–¥: {result.get('method', 'unknown')}")
            if 'spell_check_results' in result:
                spell_results = result['spell_check_results']
                print(f"üìù –í—Å–µ–≥–æ —Å–ª–æ–≤: {spell_results.get('total_words', 0)}")
                print(f"‚ùå –û—à–∏–±–æ–∫: {spell_results.get('misspelled_count', 0)}")
                print(f"üìà –¢–æ—á–Ω–æ—Å—Ç—å: {spell_results.get('accuracy', 0):.1f}%")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_grammar_check_integration(document_id, text):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏...")
    
    try:
        data = {
            "document_id": document_id,
            "text": text
        }
        
        response = requests.post(
            f"{OUTGOING_CONTROL_URL}/grammar-check",
            json=data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            print(f"üìä –ú–µ—Ç–æ–¥: {result.get('method', 'unknown')}")
            if 'grammar_results' in result:
                grammar_results = result['grammar_results']
                print(f"‚ùå –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: {grammar_results.get('total_errors', 0)}")
                for error in grammar_results.get('errors', [])[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
                    print(f"  - {error.get('message', 'Unknown error')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_comprehensive_check_integration(document_id, text):
    """–¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    
    try:
        data = {
            "document_id": document_id,
            "text": text
        }
        
        response = requests.post(
            f"{OUTGOING_CONTROL_URL}/comprehensive-check",
            json=data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            print(f"üìä –ú–µ—Ç–æ–¥: {result.get('method', 'unknown')}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_time', 0):.4f}—Å")
            
            if 'comprehensive_results' in result:
                comp_results = result['comprehensive_results']
                print(f"üìù –í—Å–µ–≥–æ —Å–ª–æ–≤: {comp_results.get('spelling', {}).get('total_words', 0)}")
                print(f"‚ùå –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: {comp_results.get('spelling', {}).get('misspelled_count', 0)}")
                print(f"‚ùå –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: {comp_results.get('grammar', {}).get('total_errors', 0)}")
                print(f"üìà –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {comp_results.get('overall_accuracy', 0):.1f}%")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                all_errors = comp_results.get('all_errors', [])
                if all_errors:
                    print("\nüîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:")
                    for i, error in enumerate(all_errors[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                        print(f"  {i}. {error.get('message', 'Unknown error')}")
                        print(f"     –ö–æ–Ω—Ç–µ–∫—Å—Ç: {error.get('context', 'N/A')}")
                        if 'replacements' in error and error['replacements']:
                            print(f"     –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {', '.join(error['replacements'][:3])}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_spellchecker_status():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ spellchecker-service"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ spellchecker-service...")
    
    try:
        response = requests.get(f"{OUTGOING_CONTROL_URL}/spellchecker-status")
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω")
            print(f"üìä –°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}")
            print(f"üî§ Hunspell: {data.get('hunspell_available', False)}")
            print(f"üìù LanguageTool: {data.get('languagetool_available', False)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_spellchecker_stats():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ spellchecker-service"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ spellchecker-service...")
    
    try:
        response = requests.get(f"{OUTGOING_CONTROL_URL}/spellchecker-stats")
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
            print(f"üìä –î–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ spellchecker-service —Å outgoing-control-service")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
    test_health_checks()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    document_id = test_document_upload()
    if not document_id:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        exit(1)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –æ—à–∏–±–∫–∞–º–∏
    test_text = """–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –æ—à–∏–±–∫–∞–º–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏. 
–°–ª–æ–≤–æ –æ—à–∏–±–∫–∞ –Ω–∞–ø–∏—Å–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –æ—à–∏–±–∫–∞–∞ - —Å –æ—à–∏–±–∫–æ–π. 
–≠—Ç–æ –µ—Å—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ. 
–¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: —Å—É–ø–µ—Ä–¥–ª–∏–Ω–Ω–æ–µ—Å–ª–æ–≤–æ123."""
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_spellcheck_integration(document_id, test_text)
    test_grammar_check_integration(document_id, test_text)
    test_comprehensive_check_integration(document_id, test_text)
    test_spellchecker_status()
    test_spellchecker_stats()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
