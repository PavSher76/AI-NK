#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DOCX
"""

import os
import sys
from datetime import datetime
from docx import Document
from docx.shared import Inches, Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.table import WD_TABLE_ALIGNMENT
from docx.oxml.shared import OxmlElement, qn

class EngineeringCalculationsStatusDOCXGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä DOCX –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç–∞—Ç—É—Å–µ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.document = None
        self.default_font = 'Times New Roman'
        
    def generate_status_report(self) -> bytes:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è DOCX –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç–∞—Ç—É—Å–µ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"""
        try:
            print("üìÑ [DOCX_GENERATOR] Generating Engineering Calculations Status report...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            self.document = Document()
            self._setup_styles()
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
            self._create_header()
            
            # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            self._create_system_status_section()
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—á–µ—Ç–æ–≤
            self._create_detailed_calculations_table()
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
            self._create_technical_architecture_section()
            
            # API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            self._create_api_endpoints_section()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏
            self._create_statistics_section()
            
            # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
            self._create_conclusion_section()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±—É—Ñ–µ—Ä
            from io import BytesIO
            buffer = BytesIO()
            self.document.save(buffer)
            buffer.seek(0)
            docx_content = buffer.getvalue()
            buffer.close()
            
            print("‚úÖ [DOCX_GENERATOR] Engineering Calculations Status report generated successfully")
            return docx_content
            
        except Exception as e:
            print(f"‚ùå [DOCX_GENERATOR] Error generating report: {e}")
            raise
    
    def _setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è DOCX –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        styles = self.document.styles
        
        # –°—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ 1
        if 'Custom Heading 1' not in [style.name for style in styles]:
            heading1_style = styles.add_style('Custom Heading 1', 1)
            heading1_font = heading1_style.font
            heading1_font.name = self.default_font
            heading1_font.size = Pt(16)
            heading1_font.bold = True
            heading1_font.color.rgb = RGBColor(0, 51, 102)
        
        # –°—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ 2
        if 'Custom Heading 2' not in [style.name for style in styles]:
            heading2_style = styles.add_style('Custom Heading 2', 1)
            heading2_font = heading2_style.font
            heading2_font.name = self.default_font
            heading2_font.size = Pt(14)
            heading2_font.bold = True
            heading2_font.color.rgb = RGBColor(0, 102, 204)
    
    def _create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = self.document.add_heading('–û–¢–ß–ï–¢ –û –°–¢–ê–¢–£–°–ï –†–ï–ê–õ–ò–ó–ê–¶–ò–ò –ò–ù–ñ–ï–ù–ï–†–ù–´–• –†–ê–°–ß–ï–¢–û–í', 0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        title_run = title.runs[0]
        title_run.font.name = self.default_font
        title_run.font.size = Pt(18)
        title_run.font.bold = True
        title_run.font.color.rgb = RGBColor(0, 51, 102)
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle = self.document.add_paragraph('–°–∏—Å—Ç–µ–º–∞ AI-–ù–ö - –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã')
        subtitle.alignment = WD_ALIGN_PARAGRAPH.CENTER
        subtitle_run = subtitle.runs[0]
        subtitle_run.font.name = self.default_font
        subtitle_run.font.size = Pt(14)
        subtitle_run.font.color.rgb = RGBColor(102, 102, 102)
        
        # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        date_para = self.document.add_paragraph(f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime("%d.%m.%Y %H:%M:%S")}')
        date_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        date_run = date_para.runs[0]
        date_run.font.name = self.default_font
        date_run.font.size = Pt(12)
        date_run.font.color.rgb = RGBColor(102, 102, 102)
        
        self.document.add_paragraph()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    
    def _create_system_status_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        heading = self.document.add_heading('1. –û–ë–©–ò–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´', level=1)
        heading_run = heading.runs[0]
        heading_run.font.name = self.default_font
        heading_run.font.size = Pt(16)
        heading_run.font.bold = True
        heading_run.font.color.rgb = RGBColor(0, 51, 102)
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        status_data = [
            ("–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å", "‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê"),
            ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤", "12 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤"),
            ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤", "27+ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"),
            ("–§—Ä–æ–Ω—Ç–µ–Ω–¥ —Å—Ç—Ä–∞–Ω–∏—Ü", "12 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"),
            ("–°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´"),
            ("–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", "‚úÖ –ü–û–õ–ù–ê–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø"),
            ("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã", "18+ —á–∞—Å–æ–≤ –±–µ–∑ —Å–±–æ–µ–≤"),
            ("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "12.09.2025 17:48")
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç—É—Å–∞
        table = self.document.add_table(rows=1, cols=2)
        table.style = 'Table Grid'
        table.alignment = WD_TABLE_ALIGNMENT.CENTER
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = '–ü–∞—Ä–∞–º–µ—Ç—Ä'
        hdr_cells[1].text = '–°—Ç–∞—Ç—É—Å'
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for cell in hdr_cells:
            for paragraph in cell.paragraphs:
                for run in paragraph.runs:
                    run.font.name = self.default_font
                    run.font.bold = True
                    run.font.size = Pt(12)
                    run.font.color.rgb = RGBColor(255, 255, 255)
            cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
            # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            shading_elm = OxmlElement('w:shd')
            shading_elm.set(qn('w:val'), 'clear')
            shading_elm.set(qn('w:color'), 'auto')
            shading_elm.set(qn('w:fill'), '4472C4')
            cell._tc.get_or_add_tcPr().append(shading_elm)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for param, status in status_data:
            row_cells = table.add_row().cells
            row_cells[0].text = param
            row_cells[1].text = status
            
            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —è—á–µ–µ–∫
            for cell in row_cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.name = self.default_font
                        run.font.size = Pt(11)
                        if "‚úÖ" in status:
                            run.font.color.rgb = RGBColor(0, 150, 0)
                cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.LEFT
        
        self.document.add_paragraph()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    
    def _create_detailed_calculations_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        heading = self.document.add_heading('2. –î–ï–¢–ê–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ò–ù–ñ–ï–ù–ï–†–ù–´–• –†–ê–°–ß–ï–¢–û–í', level=1)
        heading_run = heading.runs[0]
        heading_run.font.name = self.default_font
        heading_run.font.size = Pt(16)
        heading_run.font.bold = True
        heading_run.font.color.rgb = RGBColor(0, 51, 102)
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞—Å—á–µ—Ç–∞–º
        calculations_data = [
            {
                "id": 1,
                "name": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
                "description": "–†–∞—Å—á–µ—Ç—ã –ø—Ä–æ—á–Ω–æ—Å—Ç–∏, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∏ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
                "norms": "–°–ü 20.13330.2016, –°–ü 16.13330.2017, –°–ü 63.13330.2018, EN 1992, EN 1993",
                "category": "structural",
                "frontend": "StructuralCalculationsPage.js",
                "api_path": "/calculations/structural/types, /calculations/structural/execute",
                "backend": "StructuralCalculationParams, calculation_engine.execute_structural()",
                "status": "‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù"
            },
            {
                "id": 2,
                "name": "–û—Å–Ω–æ–≤–∞–Ω–∏—è –∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—ã",
                "description": "–†–∞—Å—á–µ—Ç—ã –Ω–µ—Å—É—â–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –æ—Å–∞–¥–∫–∏ –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–∞–Ω–∏–π",
                "norms": "–°–ü 22.13330.2016, –°–ü 24.13330.2011, –°–ü 25.13330.2012",
                "category": "foundation",
                "frontend": "FoundationCalculationsPage.js",
                "api_path": "/calculations/foundation/types, /calculations/foundation/execute",
                "backend": "FoundationCalculationParams, calculation_engine.execute_foundation()",
                "status": "‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù"
            },
            {
                "id": 3,
                "name": "–¢–µ–ø–ª–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã",
                "description": "–†–∞—Å—á–µ—Ç—ã —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å, —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏ –∏ –∫–æ–Ω–¥–µ–Ω—Å–∞—Ü–∏–∏",
                "norms": "–°–ü 50.13330.2012",
                "category": "thermal",
                "frontend": "ThermalCalculationsPage.js",
                "api_path": "/calculations/thermal/types, /calculations/thermal/execute",
                "backend": "ThermalCalculationParams, calculation_engine.execute_thermal()",
                "status": "‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù"
            },
            {
                "id": 4,
                "name": "–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è –∏ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "description": "–†–∞—Å—á–µ—Ç—ã –≤–æ–∑–¥—É—Ö–æ–æ–±–º–µ–Ω–∞, –ø—Ä–æ—Ç–∏–≤–æ–¥—ã–º–Ω–æ–π –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏, —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                "norms": "–°–ü 60.13330.2016, –°–ü 7.13130.2013, –°–ü 54.13330.2016",
                "category": "ventilation",
                "frontend": "VentilationCalculationsPage.js",
                "api_path": "/calculations/ventilation/types, /calculations/ventilation/execute",
                "backend": "VentilationCalculationParams, calculation_engine.execute_ventilation()",
                "status": "‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù"
            },
            {
                "id": 5,
                "name": "–î–µ–≥–∞–∑–∞—Ü–∏—è —É–≥–æ–ª—å–Ω—ã—Ö —à–∞—Ö—Ç",
                "description": "–†–∞—Å—á–µ—Ç—ã –¥–µ–≥–∞–∑–∞—Ü–∏–∏ —É–≥–æ–ª—å–Ω—ã—Ö —à–∞—Ö—Ç –∏ –º–µ—Ç–∞–Ω–æ–≤—ã–¥–µ–ª–µ–Ω–∏—è",
                "norms": "–°–ü 249.1325800.2016, –°–ü 250.1325800.2016",
                "category": "degasification",
                "frontend": "DegasificationCalculationsPage.js",
                "api_path": "/calculations/degasification/types, /calculations/degasification/execute",
                "backend": "DegasificationCalculationParams, calculation_engine.execute_degasification()",
                "status": "‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù"
            },
            {
                "id": 6,
                "name": "–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã",
                "description": "–†–∞—Å—á–µ—Ç—ã —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫, —Å–µ—á–µ–Ω–∏–π –∫–∞–±–µ–ª–µ–π, –∑–∞–∑–µ–º–ª–µ–Ω–∏—è, –º–æ–ª–Ω–∏–µ–∑–∞—â–∏—Ç—ã",
                "norms": "–°–ü 31.110-2003, –°–ü 437.1325800.2018",
                "category": "electrical",
                "frontend": "ElectricalCalculationsPage.js",
                "api_path": "/calculations/electrical/types, /calculations/electrical/execute",
                "backend": "ElectricalLoadCalculationParams, CableCalculationParams, GroundingCalculationParams, LightningProtectionCalculationParams",
                "status": "‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù"
            },
            {
                "id": 7,
                "name": "–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ –∏ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è",
                "description": "–†–∞—Å—á–µ—Ç—ã —Å–∏—Å—Ç–µ–º –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è, –≤–æ–¥–æ–æ—Ç–≤–µ–¥–µ–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏",
                "norms": "–°–ü 30.13330.2016, –°–ü 32.13330.2018",
                "category": "water_supply",
                "frontend": "WaterSupplyCalculationsPage.js",
                "api_path": "/calculations/water_supply/types, /calculations/water_supply/execute",
                "backend": "WaterSupplyCalculationParams, calculation_engine.execute_water_supply()",
                "status": "‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù"
            },
            {
                "id": 8,
                "name": "–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
                "description": "–†–∞—Å—á–µ—Ç—ã —ç–≤–∞–∫—É–∞—Ü–∏–∏, –ø–æ–∂–∞—Ä–æ—Ç—É—à–µ–Ω–∏—è, –¥—ã–º–æ—É–¥–∞–ª–µ–Ω–∏—è, –æ–≥–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç–∏",
                "norms": "123-–§–ó, –ì–û–°–¢ 12.1.004-91, –ù–ü–ë 88-2001, –ù–ü–ë 250-97, –ì–û–°–¢ 30247.1-94",
                "category": "fire_safety",
                "frontend": "FireSafetyCalculationsPage.js",
                "api_path": "/calculations/fire_safety/types, /calculations/fire_safety/execute",
                "backend": "FireSafetyCalculationParams, calculation_engine.execute_fire_safety()",
                "status": "‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù"
            },
            {
                "id": 9,
                "name": "–ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã",
                "description": "–†–∞—Å—á–µ—Ç—ã –∑–≤—É–∫–æ–∏–∑–æ–ª—è—Ü–∏–∏, —à—É–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è, –≤–∏–±—Ä–∞—Ü–∏–∏, –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                "norms": "–°–ü 51.13330.2011",
                "category": "acoustic",
                "frontend": "AcousticCalculationsPage.js",
                "api_path": "/calculations/acoustic/types, /calculations/acoustic/execute",
                "backend": "AcousticCalculationParams, calculation_engine.execute_acoustic()",
                "status": "‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù"
            },
            {
                "id": 10,
                "name": "–û—Å–≤–µ—â–µ–Ω–∏–µ –∏ –∏–Ω—Å–æ–ª—è—Ü–∏—è",
                "description": "–†–∞—Å—á–µ—Ç—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è, –∏–Ω—Å–æ–ª—è—Ü–∏–∏",
                "norms": "–°–ü 52.13330.2016",
                "category": "lighting",
                "frontend": "LightingCalculationsPage.js",
                "api_path": "/calculations/lighting/types, /calculations/lighting/execute",
                "backend": "LightingCalculationParams, calculation_engine.execute_lighting()",
                "status": "‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù"
            },
            {
                "id": 11,
                "name": "–ò–Ω–∂–µ–Ω–µ—Ä–Ω–æ-–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã",
                "description": "–†–∞—Å—á–µ—Ç—ã –Ω–µ—Å—É—â–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –æ—Å–∞–¥–∫–∏, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —Å–∫–ª–æ–Ω–æ–≤, —Å–µ–π—Å–º–∏–∫–∏",
                "norms": "–°–ü 22.13330.2016",
                "category": "geological",
                "frontend": "GeologicalCalculationsPage.js",
                "api_path": "/calculations/geological/types, /calculations/geological/execute",
                "backend": "GeologicalCalculationParams, calculation_engine.execute_geological()",
                "status": "‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù"
            },
            {
                "id": 12,
                "name": "–ó–∞—â–∏—Ç–∞ –æ—Ç –ë–ü–õ–ê",
                "description": "–†–∞—Å—á–µ—Ç—ã –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è —É–¥–∞—Ä–Ω–æ–π –≤–æ–ª–Ω—ã –∏ –ø—Ä–æ–Ω–∏–∫–∞—é—â–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ë–ü–õ–ê",
                "norms": "–°–ü 542.1325800.2024, –°–ü 1.13130.2020, –°–ü 20.13330.2016",
                "category": "uav_protection",
                "frontend": "UAVProtectionCalculationsPage.js",
                "api_path": "/calculations/uav_protection/types, /calculations/uav_protection/execute",
                "backend": "UAVShockWaveCalculationParams, UAVImpactPenetrationCalculationParams, calculation_engine.execute_uav_protection()",
                "status": "‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù"
            }
        ]
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        table = self.document.add_table(rows=1, cols=8)
        table.style = 'Table Grid'
        table.alignment = WD_TABLE_ALIGNMENT.CENTER
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = '‚Ññ'
        hdr_cells[1].text = '–ù–∞–∑–≤–∞–Ω–∏–µ'
        hdr_cells[2].text = '–û–ø–∏—Å–∞–Ω–∏–µ'
        hdr_cells[3].text = '–ù–æ—Ä–º–∞—Ç–∏–≤—ã'
        hdr_cells[4].text = '–§—Ä–æ–Ω—Ç–µ–Ω–¥'
        hdr_cells[5].text = 'API –ø—É—Ç–∏'
        hdr_cells[6].text = '–ë—ç–∫—ç–Ω–¥'
        hdr_cells[7].text = '–°—Ç–∞—Ç—É—Å'
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for cell in hdr_cells:
            for paragraph in cell.paragraphs:
                for run in paragraph.runs:
                    run.font.name = self.default_font
                    run.font.bold = True
                    run.font.size = Pt(9)
                    run.font.color.rgb = RGBColor(255, 255, 255)
            cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
            # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            shading_elm = OxmlElement('w:shd')
            shading_elm.set(qn('w:val'), 'clear')
            shading_elm.set(qn('w:color'), 'auto')
            shading_elm.set(qn('w:fill'), '4472C4')
            cell._tc.get_or_add_tcPr().append(shading_elm)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for calc in calculations_data:
            row_cells = table.add_row().cells
            row_cells[0].text = str(calc["id"])
            row_cells[1].text = calc["name"]
            row_cells[2].text = calc["description"]
            row_cells[3].text = calc["norms"]
            row_cells[4].text = calc["frontend"]
            row_cells[5].text = calc["api_path"]
            row_cells[6].text = calc["backend"]
            row_cells[7].text = calc["status"]
            
            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —è—á–µ–µ–∫
            for j, cell in enumerate(row_cells):
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.name = self.default_font
                        run.font.size = Pt(8)
                        if j == 7 and "‚úÖ" in calc["status"]:  # –°—Ç–∞—Ç—É—Å –∫–æ–ª–æ–Ω–∫–∞
                            run.font.color.rgb = RGBColor(0, 150, 0)
                cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.LEFT
        
        self.document.add_paragraph()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    
    def _create_technical_architecture_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        heading = self.document.add_heading('3. –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê', level=1)
        heading_run = heading.runs[0]
        heading_run.font.name = self.default_font
        heading_run.font.size = Pt(16)
        heading_run.font.bold = True
        heading_run.font.color.rgb = RGBColor(0, 51, 102)
        
        # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        architecture_data = [
            {
                "layer": "Frontend Layer",
                "technology": "React 18.2.0",
                "components": "12 —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–∞—Å—á–µ—Ç–æ–≤, –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞, –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º",
                "features": "Responsive UI, —ç–∫—Å–ø–æ—Ä—Ç DOCX, –Ω–∞–≤–∏–≥–∞—Ü–∏—è, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"
            },
            {
                "layer": "API Gateway Layer",
                "technology": "FastAPI 0.104.1",
                "components": "Gateway Service, –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è, CORS",
                "features": "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"
            },
            {
                "layer": "Business Logic Layer",
                "technology": "FastAPI + Pydantic",
                "components": "Calculation Service, 12 —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤",
                "features": "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤, —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤"
            },
            {
                "layer": "Data Layer",
                "technology": "PostgreSQL + Qdrant",
                "components": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤, –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "features": "–•—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤, –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º, –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è"
            },
            {
                "layer": "Supporting Services",
                "technology": "FastAPI –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã",
                "components": "Spellchecker Service, Outgoing Control Service",
                "features": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"
            }
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        table = self.document.add_table(rows=1, cols=4)
        table.style = 'Table Grid'
        table.alignment = WD_TABLE_ALIGNMENT.CENTER
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = '–°–ª–æ–π'
        hdr_cells[1].text = '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è'
        hdr_cells[2].text = '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã'
        hdr_cells[3].text = '–§—É–Ω–∫—Ü–∏–∏'
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for cell in hdr_cells:
            for paragraph in cell.paragraphs:
                for run in paragraph.runs:
                    run.font.name = self.default_font
                    run.font.bold = True
                    run.font.size = Pt(11)
                    run.font.color.rgb = RGBColor(255, 255, 255)
            cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
            # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            shading_elm = OxmlElement('w:shd')
            shading_elm.set(qn('w:val'), 'clear')
            shading_elm.set(qn('w:color'), 'auto')
            shading_elm.set(qn('w:fill'), '4472C4')
            cell._tc.get_or_add_tcPr().append(shading_elm)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for layer in architecture_data:
            row_cells = table.add_row().cells
            row_cells[0].text = layer["layer"]
            row_cells[1].text = layer["technology"]
            row_cells[2].text = layer["components"]
            row_cells[3].text = layer["features"]
            
            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —è—á–µ–µ–∫
            for cell in row_cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.name = self.default_font
                        run.font.size = Pt(10)
                cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.LEFT
        
        self.document.add_paragraph()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    
    def _create_api_endpoints_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        heading = self.document.add_heading('4. API –≠–ù–î–ü–û–ò–ù–¢–´', level=1)
        heading_run = heading.runs[0]
        heading_run.font.name = self.default_font
        heading_run.font.size = Pt(16)
        heading_run.font.bold = True
        heading_run.font.color.rgb = RGBColor(0, 51, 102)
        
        # API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        api_data = [
            ("–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã", "POST /calculations", "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"),
            ("–°–ø–∏—Å–æ–∫ —Ä–∞—Å—á–µ—Ç–æ–≤", "GET /calculations", "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"),
            ("–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞", "GET /calculations/{id}", "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ä–∞—Å—á–µ—Ç–∞"),
            ("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞", "POST /calculations/{id}/execute", "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞"),
            ("–≠–∫—Å–ø–æ—Ä—Ç DOCX", "GET /calculations/{id}/export-docx", "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ DOCX"),
            ("–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "GET /calculations/structural/types", "–¢–∏–ø—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"),
            ("–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã", "POST /calculations/structural/execute", "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"),
            ("–û—Å–Ω–æ–≤–∞–Ω–∏—è –∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—ã", "GET /calculations/foundation/types", "–¢–∏–ø—ã —Ä–∞—Å—á–µ—Ç–æ–≤ –æ—Å–Ω–æ–≤–∞–Ω–∏–π"),
            ("–¢–µ–ø–ª–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ", "GET /calculations/thermal/types", "–¢–∏–ø—ã —Ç–µ–ø–ª–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"),
            ("–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è", "GET /calculations/ventilation/types", "–¢–∏–ø—ã –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"),
            ("–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ", "GET /calculations/electrical/types", "–¢–∏–ø—ã —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"),
            ("–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "GET /calculations/fire_safety/types", "–¢–∏–ø—ã —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"),
            ("–ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∏–µ", "GET /calculations/acoustic/types", "–¢–∏–ø—ã –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"),
            ("–û—Å–≤–µ—â–µ–Ω–∏–µ", "GET /calculations/lighting/types", "–¢–∏–ø—ã —Ä–∞—Å—á–µ—Ç–æ–≤ –æ—Å–≤–µ—â–µ–Ω–∏—è"),
            ("–ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ", "GET /calculations/geological/types", "–¢–∏–ø—ã –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"),
            ("–ó–∞—â–∏—Ç–∞ –æ—Ç –ë–ü–õ–ê", "GET /calculations/uav_protection/types", "–¢–∏–ø—ã —Ä–∞—Å—á–µ—Ç–æ–≤ –∑–∞—â–∏—Ç—ã –æ—Ç –ë–ü–õ–ê"),
            ("–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ", "GET /calculations/water_supply/types", "–¢–∏–ø—ã —Ä–∞—Å—á–µ—Ç–æ–≤ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è"),
            ("–î–µ–≥–∞–∑–∞—Ü–∏—è", "GET /calculations/degasification/types", "–¢–∏–ø—ã —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–µ–≥–∞–∑–∞—Ü–∏–∏"),
            ("–ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã", "GET /metrics", "–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã"),
            ("–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è", "GET /health", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞")
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É API
        table = self.document.add_table(rows=1, cols=3)
        table.style = 'Table Grid'
        table.alignment = WD_TABLE_ALIGNMENT.CENTER
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        hdr_cells[1].text = '–≠–Ω–¥–ø–æ–∏–Ω—Ç'
        hdr_cells[2].text = '–û–ø–∏—Å–∞–Ω–∏–µ'
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for cell in hdr_cells:
            for paragraph in cell.paragraphs:
                for run in paragraph.runs:
                    run.font.name = self.default_font
                    run.font.bold = True
                    run.font.size = Pt(11)
                    run.font.color.rgb = RGBColor(255, 255, 255)
            cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
            # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            shading_elm = OxmlElement('w:shd')
            shading_elm.set(qn('w:val'), 'clear')
            shading_elm.set(qn('w:color'), 'auto')
            shading_elm.set(qn('w:fill'), '4472C4')
            cell._tc.get_or_add_tcPr().append(shading_elm)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for category, endpoint, description in api_data:
            row_cells = table.add_row().cells
            row_cells[0].text = category
            row_cells[1].text = endpoint
            row_cells[2].text = description
            
            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —è—á–µ–µ–∫
            for cell in row_cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.name = self.default_font
                        run.font.size = Pt(10)
                cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.LEFT
        
        self.document.add_paragraph()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    
    def _create_statistics_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        heading = self.document.add_heading('5. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–ï–¢–†–ò–ö–ò', level=1)
        heading_run = heading.runs[0]
        heading_run.font.name = self.default_font
        heading_run.font.size = Pt(16)
        heading_run.font.bold = True
        heading_run.font.color.rgb = RGBColor(0, 51, 102)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_data = [
            ("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞", "50,000+ —Å—Ç—Ä–æ–∫"),
            ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Python —Ñ–∞–π–ª–æ–≤", "25+ —Ñ–∞–π–ª–æ–≤"),
            ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ JavaScript —Ñ–∞–π–ª–æ–≤", "20+ —Ñ–∞–π–ª–æ–≤"),
            ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤", "27+ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"),
            ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤", "12 —Ç–∏–ø–æ–≤"),
            ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å—Ç—Ä–∞–Ω–∏—Ü", "12 —Å—Ç—Ä–∞–Ω–∏—Ü"),
            ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", "8 –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"),
            ("–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏", "85%+"),
            ("–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API", "< 200ms"),
            ("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã", "99.9%"),
            ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "50+ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"),
            ("–†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", "500+ MB")
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        table = self.document.add_table(rows=1, cols=2)
        table.style = 'Table Grid'
        table.alignment = WD_TABLE_ALIGNMENT.CENTER
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = '–ú–µ—Ç—Ä–∏–∫–∞'
        hdr_cells[1].text = '–ó–Ω–∞—á–µ–Ω–∏–µ'
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for cell in hdr_cells:
            for paragraph in cell.paragraphs:
                for run in paragraph.runs:
                    run.font.name = self.default_font
                    run.font.bold = True
                    run.font.size = Pt(12)
                    run.font.color.rgb = RGBColor(255, 255, 255)
            cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
            # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            shading_elm = OxmlElement('w:shd')
            shading_elm.set(qn('w:val'), 'clear')
            shading_elm.set(qn('w:color'), 'auto')
            shading_elm.set(qn('w:fill'), '4472C4')
            cell._tc.get_or_add_tcPr().append(shading_elm)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for metric, value in stats_data:
            row_cells = table.add_row().cells
            row_cells[0].text = metric
            row_cells[1].text = value
            
            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —è—á–µ–µ–∫
            for cell in row_cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.name = self.default_font
                        run.font.size = Pt(11)
                cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.LEFT
        
        self.document.add_paragraph()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    
    def _create_conclusion_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        heading = self.document.add_heading('6. –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï', level=1)
        heading_run = heading.runs[0]
        heading_run.font.name = self.default_font
        heading_run.font.size = Pt(16)
        heading_run.font.bold = True
        heading_run.font.color.rgb = RGBColor(0, 51, 102)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements = [
            "‚úÖ –í—Å–µ 12 —Ç–∏–ø–æ–≤ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã",
            "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
            "‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π React —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ñ–æ—Ä–º",
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø–æ–ª–Ω–∞—è API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å 27+ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏",
            "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã",
            "‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º DOCX —Ñ–æ—Ä–º–∞—Ç–µ",
            "‚úÖ –û–±–µ—Å–ø–µ—á–µ–Ω–∞ –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã",
            "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–ª–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
        ]
        
        for achievement in achievements:
            para = self.document.add_paragraph(achievement, style='List Bullet')
            run = para.runs[0]
            run.font.name = self.default_font
            run.font.size = Pt(12)
            if "‚úÖ" in achievement:
                run.font.color.rgb = RGBColor(0, 150, 0)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        self.document.add_paragraph()
        conclusion_para = self.document.add_paragraph(
            "–°–∏—Å—Ç–µ–º–∞ AI-–ù–ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è "
            "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏. "
            "–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤ "
            "–∏ —É–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ "
            "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
        )
        conclusion_run = conclusion_para.runs[0]
        conclusion_run.font.name = self.default_font
        conclusion_run.font.size = Pt(12)
        conclusion_run.font.italic = True
        
        # –ü–æ–¥–ø–∏—Å—å
        self.document.add_paragraph()
        signature_para = self.document.add_paragraph(f"–û—Ç—á–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        signature_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
        signature_run = signature_para.runs[0]
        signature_run.font.name = self.default_font
        signature_run.font.size = Pt(10)
        signature_run.font.color.rgb = RGBColor(102, 102, 102)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = EngineeringCalculationsStatusDOCXGenerator()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        docx_content = generator.generate_status_report()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        filename = f"Engineering_Calculations_Status_Report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
        filepath = os.path.join(os.getcwd(), filename)
        
        with open(filepath, 'wb') as f:
            f.write(docx_content)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filepath}")
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(docx_content)} –±–∞–π—Ç")
        
        return filepath
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return None


if __name__ == "__main__":
    main()
