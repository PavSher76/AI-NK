#!/bin/bash

# –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Ollama
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./test_ollama_quick.sh

set -e

echo "üß™ [QUICK_TEST] –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Ollama..."
echo "===================================="

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log() {
    echo -e "${BLUE}[TEST]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama..."
if curl -s http://localhost:11434/api/tags > /dev/null; then
    success "Ollama –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    error "Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ollama serve"
    exit 1
fi

# –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–µ–ª–∏
log "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:"
curl -s http://localhost:11434/api/tags | jq -r '.models[] | "  - \(.name) (\(.details.parameter_size))"'

# –¢–µ—Å—Ç GPT-OSS
log "–¢–µ—Å—Ç–∏—Ä—É–µ–º GPT-OSS..."
start_time=$(date +%s%N)

response=$(curl -s http://localhost:11434/api/generate \
    -d '{"model": "gpt-oss:latest", "prompt": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", "stream": false}')

end_time=$(date +%s%N)
total_time=$(( (end_time - start_time) / 1000000 ))

eval_duration=$(echo "$response" | jq -r '.eval_duration // 0')
response_text=$(echo "$response" | jq -r '.response // ""')

if [ "$response_text" != "null" ] && [ -n "$response_text" ]; then
    success "GPT-OSS —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "  - –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: $((eval_duration / 1000000))ms"
    echo "  - –û–±—â–µ–µ –≤—Ä–µ–º—è: ${total_time}ms"
    echo "  - –û—Ç–≤–µ—Ç: ${response_text:0:100}..."
else
    error "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GPT-OSS"
fi

# –¢–µ—Å—Ç BGE-M3
log "–¢–µ—Å—Ç–∏—Ä—É–µ–º BGE-M3..."
start_time=$(date +%s%N)

response=$(curl -s http://localhost:11434/api/embeddings \
    -d '{"model": "bge-m3", "prompt": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞"}')

end_time=$(date +%s%N)
total_time=$(( (end_time - start_time) / 1000000 ))

embedding=$(echo "$response" | jq -r '.embedding // []')

if [ "$embedding" != "[]" ] && [ "$embedding" != "null" ]; then
    success "BGE-M3 —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "  - –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${total_time}ms"
    echo "  - –†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: $(echo "$embedding" | jq 'length')"
else
    error "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è BGE-M3"
fi

# –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
if curl -s http://localhost:11434/api/tags | jq -e '.models[] | select(.name | contains("gpt-oss-optimized"))' > /dev/null; then
    log "–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å..."
    start_time=$(date +%s%N)
    
    response=$(curl -s http://localhost:11434/api/generate \
        -d '{"model": "gpt-oss-optimized", "prompt": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", "stream": false}')
    
    end_time=$(date +%s%N)
    total_time=$(( (end_time - start_time) / 1000000 ))
    
    eval_duration=$(echo "$response" | jq -r '.eval_duration // 0')
    response_text=$(echo "$response" | jq -r '.response // ""')
    
    if [ "$response_text" != "null" ] && [ -n "$response_text" ]; then
        success "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç"
        echo "  - –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: $((eval_duration / 1000000))ms"
        echo "  - –û–±—â–µ–µ –≤—Ä–µ–º—è: ${total_time}ms"
        echo "  - –û—Ç–≤–µ—Ç: ${response_text:0:100}..."
    else
        error "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"
    fi
else
    log "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ: ./ollama_optimization_config.sh"
fi

echo ""
echo "üéâ [QUICK_TEST] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "===================================="
echo ""
echo "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
echo "  - Ollama: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
echo "  - GPT-OSS: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
echo "  - BGE-M3: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
echo "  - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: $(if curl -s http://localhost:11434/api/tags | jq -e '.models[] | select(.name | contains("gpt-oss-optimized"))' > /dev/null; then echo "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"; else echo "‚ö†Ô∏è –ù–µ —Å–æ–∑–¥–∞–Ω–∞"; fi)"
echo ""
echo "üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
