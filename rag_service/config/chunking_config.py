"""
Конфигурация для гранулярного чанкования документов
"""

# Параметры гранулярного чанкования
CHUNKING_CONFIG = {
    # Размеры чанков в токенах
    'target_tokens': 800,      # Целевое количество токенов
    'min_tokens': 512,         # Минимальное количество токенов
    'max_tokens': 1200,        # Максимальное количество токенов
    
    # Перекрытие между чанками
    'overlap_ratio': 0.2,      # Перекрытие между чанками (20%)
    'min_overlap_sentences': 1, # Минимальное количество предложений для перекрытия
    
    # Логика склейки чанков
    'merge_enabled': True,     # Включить логику склейки с заголовками
    'max_merged_tokens': 1200, # Максимальный размер объединенного чанка
    
    # Улучшенные паттерны для разбиения на предложения
    'sentence_patterns': [
        # Основные паттерны для нормативных документов
        r'[.!?]+(?=\s+[А-ЯЁ])',           # Перед заглавными буквами
        r'[.!?]+(?=\s+\d+\.\d+)',         # Перед номерами пунктов (1.1, 2.3.1)
        r'[.!?]+(?=\s+[А-ЯЁ]\s)',         # Перед заголовками
        r'[.!?]+(?=\s*$)',                # В конце текста
        r'[.!?]+(?=\s+Глава\s)',          # Перед "Глава"
        r'[.!?]+(?=\s+Раздел\s)',         # Перед "Раздел"
        r'[.!?]+(?=\s+Пункт\s)',          # Перед "Пункт"
        r'[.!?]+(?=\s+Статья\s)',         # Перед "Статья"
    ],
    
    # Минимальная длина предложения
    'min_sentence_length': 10,
    
    # Улучшенные паттерны для определения заголовков
    'header_patterns': [
        'глава', 'раздел', 'часть', 'пункт', 'подпункт',
        'статья', 'параграф', 'абзац', 'подраздел',
        'приложение', 'список', 'таблица', 'рисунок'
    ],
    
    # Паттерны для определения незавершенных конструкций
    'unfinished_patterns': {
        'quotes': ['"', '«', '»', "'", "'"],           # Кавычки
        'brackets': ['(', '[', '{', '(', '['],         # Скобки
        'lists': ['-', '•', '1.', '2.', 'а)', 'б)']   # Списки
    },
    
    # Эвристика для оценки токенов
    'tokens_per_char': 4,      # 1 токен ≈ 4 символа для русского текста
    
    # Fallback параметры
    'fallback_chunk_size': 1000,  # Размер чанка для fallback режима
    'enable_fallback': True,       # Включить fallback режим
    
    # Иерархические настройки
    'hierarchical_chunking': True,  # Включить иерархическое чанкование
    'preserve_structure': True,     # Сохранять структуру документа
    'chapter_boundaries': True,     # Не разрывать границы глав
    'section_boundaries': True,     # Не разрывать границы разделов
    
    # Семантические настройки
    'semantic_chunking': True,      # Включить семантическое чанкование
    'semantic_similarity_threshold': 0.7,  # Порог семантического сходства
    'semantic_window_size': 3,      # Размер окна для анализа семантики
    'topic_change_threshold': 0.3,  # Порог изменения темы
    'semantic_coherence_weight': 0.8,  # Вес семантической связности
    'use_embedding_similarity': True,  # Использовать эмбеддинги для анализа
    'semantic_merge_threshold': 0.85,  # Порог для объединения семантически близких чанков
}

# Улучшенные паттерны для иерархической структуры
HIERARCHICAL_PATTERNS = {
    'chapters': [
        r'^ГЛАВА\s+(\d+)\s*[\.\-]?\s*(.+)$',
        r'^Глава\s+(\d+)\s*[\.\-]?\s*(.+)$',
        r'^РАЗДЕЛ\s+(\d+)\s*[\.\-]?\s*(.+)$',
        r'^Раздел\s+(\d+)\s*[\.\-]?\s*(.+)$',
        r'^ЧАСТЬ\s+(\d+)\s*[\.\-]?\s*(.+)$',
        r'^Часть\s+(\d+)\s*[\.\-]?\s*(.+)$'
    ],
    'sections': [
        r'^(\d+\.\d+\.\d+\.\d+\.\d+)\s+(.+)$',  # 1.1.1.1.1
        r'^(\d+\.\d+\.\d+\.\d+)\s+(.+)$',        # 1.1.1.1
        r'^(\d+\.\d+\.\d+)\s+(.+)$',             # 1.1.1
        r'^(\d+\.\d+)\s+(.+)$',                  # 1.1
        r'^(\d+)\s+(.+)$'                        # 1
    ],
    'paragraphs': [
        r'^-\s+(.+)$',                           # Маркированные списки
        r'^•\s+(.+)$',                           # Маркированные списки
        r'^\d+\)\s+(.+)$',                       # Нумерованные списки
        r'^[а-я]\)\s+(.+)$',                     # Буквенные списки
        r'^[А-Я]\)\s+(.+)$',                     # Заглавные буквенные списки
    ],
    'special_structures': [
        r'^Таблица\s+(\d+\.\d+)',                # Таблицы
        r'^Рисунок\s+(\d+\.\d+)',                # Рисунки
        r'^Приложение\s+([А-Я])',                # Приложения
        r'^Список\s+литературы',                 # Список литературы
    ]
}

# Семантические паттерны для анализа смысла
SEMANTIC_PATTERNS = {
    'topic_indicators': [
        # Переходы между темами
        r'^(Кроме того|Также|Дополнительно|Вместе с тем|Однако|С другой стороны)',
        r'^(Рассмотрим|Рассмотрим подробнее|Остановимся на|Перейдем к)',
        r'^(Важно отметить|Следует подчеркнуть|Необходимо учитывать)',
        r'^(В соответствии с|Согласно|В соответствии с требованиями)',
        r'^(При этом|При этом следует|При этом необходимо)',
        
        # Завершение тем
        r'^(Таким образом|Итак|В заключение|Подводя итоги)',
        r'^(В результате|В итоге|В конечном счете)',
        
        # Начало новых тем
        r'^(Далее|Продолжим|Перейдем|Рассмотрим далее)',
        r'^(Следующий|Следующим|Следующая|Следующие)',
    ],
    
    'coherence_indicators': [
        # Связующие слова и фразы
        r'^(Поэтому|Следовательно|Таким образом|Отсюда)',
        r'^(Кроме того|Более того|Помимо этого|Вдобавок)',
        r'^(Например|В частности|В том числе|Включая)',
        r'^(Однако|Но|Тем не менее|В то же время)',
        r'^(Сначала|Затем|Далее|После этого)',
        
        # Ссылки на предыдущий контент
        r'^(Как было сказано|Как упоминалось|Как отмечалось)',
        r'^(Выше|Ранее|Предыдущий|Предыдущая)',
        r'^(В связи с этим|В связи с вышеизложенным)',
    ],
    
    'semantic_boundaries': [
        # Границы смысловых блоков
        r'^(Введение|Заключение|Резюме|Выводы)',
        r'^(Общие положения|Основные принципы|Общие требования)',
        r'^(Методы|Способы|Процедуры|Технологии)',
        r'^(Требования|Нормы|Правила|Условия)',
        r'^(Контроль|Проверка|Мониторинг|Надзор)',
        
        # Технические разделы
        r'^(Расчет|Вычисление|Определение|Оценка)',
        r'^(Проектирование|Конструирование|Разработка)',
        r'^(Эксплуатация|Применение|Использование)',
        r'^(Техническое обслуживание|Ремонт|Замена)',
    ],
    
    'domain_specific': {
        'construction': [
            r'^(Фундамент|Основание|Конструкция|Каркас)',
            r'^(Материал|Бетон|Сталь|Дерево)',
            r'^(Нагрузка|Усилие|Напряжение|Деформация)',
            r'^(Сейсмичность|Ветровая нагрузка|Снеговая нагрузка)',
        ],
        'safety': [
            r'^(Безопасность|Охрана труда|Пожарная безопасность)',
            r'^(Эвакуация|Аварийный выход|Сигнализация)',
            r'^(Защита|Предотвращение|Минимизация рисков)',
        ],
        'environmental': [
            r'^(Экология|Окружающая среда|Экологическая безопасность)',
            r'^(Выбросы|Отходы|Загрязнение|Очистка)',
            r'^(Энергоэффективность|Ресурсосбережение)',
        ]
    }
}

# Специфичные настройки для разных типов документов
DOCUMENT_TYPE_CONFIGS = {
    'gost': {
        'target_tokens': 600,      # ГОСТ документы - более мелкие чанки
        'min_tokens': 400,
        'max_tokens': 800,
        'overlap_ratio': 0.25,     # Больше перекрытия для точности
        'hierarchical_chunking': True,
        'preserve_structure': True,
    },
    'sp': {
        'target_tokens': 800,      # СП документы - стандартный размер
        'min_tokens': 512,
        'max_tokens': 1200,
        'overlap_ratio': 0.2,
        'hierarchical_chunking': True,
        'preserve_structure': True,
    },
    'snip': {
        'target_tokens': 1000,     # СНиП документы - крупные чанки
        'min_tokens': 600,
        'max_tokens': 1500,
        'overlap_ratio': 0.15,     # Меньше перекрытия
        'hierarchical_chunking': True,
        'preserve_structure': True,
    },
    'corporate': {
        'target_tokens': 700,      # Корпоративные документы
        'min_tokens': 450,
        'max_tokens': 1000,
        'overlap_ratio': 0.2,
        'hierarchical_chunking': True,
        'preserve_structure': True,
    }
}

def get_chunking_config(document_type: str = 'default') -> dict:
    """
    Получение конфигурации чанкования для конкретного типа документа
    
    Args:
        document_type: Тип документа ('gost', 'sp', 'snip', 'corporate', 'default')
    
    Returns:
        dict: Конфигурация чанкования
    """
    base_config = CHUNKING_CONFIG.copy()
    
    if document_type in DOCUMENT_TYPE_CONFIGS:
        # Объединяем базовую конфигурацию с типовой
        type_config = DOCUMENT_TYPE_CONFIGS[document_type]
        base_config.update(type_config)
    
    return base_config

def validate_chunking_config(config: dict) -> bool:
    """
    Валидация конфигурации чанкования
    
    Args:
        config: Конфигурация для валидации
    
    Returns:
        bool: True если конфигурация корректна
    """
    try:
        # Проверяем обязательные поля
        required_fields = ['target_tokens', 'min_tokens', 'max_tokens', 'overlap_ratio']
        for field in required_fields:
            if field not in config:
                return False
        
        # Проверяем логические ограничения
        if config['min_tokens'] >= config['max_tokens']:
            return False
        
        if config['target_tokens'] < config['min_tokens'] or config['target_tokens'] > config['max_tokens']:
            return False
        
        if config['overlap_ratio'] < 0 or config['overlap_ratio'] > 1:
            return False
        
        # Проверяем иерархические настройки
        if 'hierarchical_chunking' in config and config['hierarchical_chunking']:
            if 'preserve_structure' not in config or not config['preserve_structure']:
                return False
        
        return True
        
    except Exception:
        return False

def get_hierarchical_patterns() -> dict:
    """
    Получение паттернов для иерархической структуры
    
    Returns:
        dict: Паттерны для извлечения структуры
    """
    return HIERARCHICAL_PATTERNS.copy()

def get_semantic_patterns() -> dict:
    """
    Получение семантических паттернов для анализа смысла
    
    Returns:
        dict: Семантические паттерны
    """
    return SEMANTIC_PATTERNS.copy()

# Экспортируем основную конфигурацию
DEFAULT_CONFIG = get_chunking_config('default')
