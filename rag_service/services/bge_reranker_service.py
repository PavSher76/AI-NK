"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é BGE-ranking-base
"""

import logging
import requests
import os
import json
from typing import List, Dict, Any, Tuple
import numpy as np
from datetime import datetime

logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º URL Ollama –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
OLLAMA_URL = os.getenv("OLLAMA_URL", "http://host.docker.internal:11434")

class BGERankingService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º BGE-ranking-base —á–µ—Ä–µ–∑ Ollama"""
    
    def __init__(self, ollama_url: str = None, model_name: str = "bge-ranking-base"):
        self.ollama_url = ollama_url or OLLAMA_URL
        self.model_name = model_name
        self.max_batch_size = 10  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.timeout = 30  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        
        logger.info(f"üîÑ [BGE_RERANKER] Initialized with {self.model_name} at {self.ollama_url}")
    
    def rerank_search_results(self, query: str, search_results: List[Dict[str, Any]], 
                            top_k: int = 8, initial_top_k: int = 50) -> List[Dict[str, Any]]:
        """
        –†–µ—Ä–∞–Ω–∫–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é BGE-ranking-base
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            search_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –æ—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            top_k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            initial_top_k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
        
        Returns:
            –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        try:
            if not search_results:
                logger.warning("‚ö†Ô∏è [BGE_RERANKER] No search results to rerank")
                return []
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
            candidates = search_results[:initial_top_k]
            logger.info(f"üîÑ [BGE_RERANKER] Reranking {len(candidates)} candidates for query: '{query[:100]}...'")
            
            if len(candidates) <= top_k:
                logger.info(f"‚úÖ [BGE_RERANKER] Not enough candidates for reranking, returning top {len(candidates)}")
                return candidates
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –∑–∞–ø—Ä–æ—Å-–¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
            query_document_pairs = []
            for result in candidates:
                content = result.get('content', '')
                if content.strip():
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    content = content[:2000]  # –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤
                    query_document_pairs.append({
                        'query': query,
                        'document': content,
                        'result': result
                    })
            
            if not query_document_pairs:
                logger.warning("‚ö†Ô∏è [BGE_RERANKER] No valid content for reranking")
                return candidates[:top_k]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥ –±–∞—Ç—á–∞–º–∏
            reranked_scores = self._get_rerank_scores_batch(query_document_pairs)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –Ω–æ–≤—ã–º —Å–∫–æ—Ä-–∞–º
            reranked_results = []
            for i, score in enumerate(reranked_scores):
                if i < len(candidates):
                    result = candidates[i].copy()
                    result['rerank_score'] = score
                    result['original_score'] = result.get('score', 0)
                    result['search_type'] = result.get('search_type', 'hybrid')
                    reranked_results.append(result)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å–∫–æ—Ä-–∞ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
            reranked_results.sort(key=lambda x: x.get('rerank_score', 0), reverse=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-k —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            final_results = reranked_results[:top_k]
            
            logger.info(f"‚úÖ [BGE_RERANKER] Successfully reranked {len(candidates)} ‚Üí {len(final_results)} results")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            for i, result in enumerate(final_results[:3]):
                logger.info(f"üèÜ [BGE_RERANKER] Top {i+1}: rerank_score={result.get('rerank_score', 0):.4f}, "
                          f"original_score={result.get('original_score', 0):.4f}, "
                          f"title='{result.get('document_title', 'Unknown')[:50]}...'")
            
            return final_results
            
        except Exception as e:
            logger.error(f"‚ùå [BGE_RERANKER] Error during reranking: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            return search_results[:top_k]
    
    def _get_rerank_scores_batch(self, query_document_pairs: List[Dict[str, Any]]) -> List[float]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–æ—Ä-–æ–≤ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞ –¥–ª—è –ø–∞—Ä –∑–∞–ø—Ä–æ—Å-–¥–æ–∫—É–º–µ–Ω—Ç –±–∞—Ç—á–∞–º–∏
        
        Args:
            query_document_pairs: –°–ø–∏—Å–æ–∫ –ø–∞—Ä –∑–∞–ø—Ä–æ—Å-–¥–æ–∫—É–º–µ–Ω—Ç
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–∫–æ—Ä-–æ–≤ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
        """
        try:
            all_scores = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            for i in range(0, len(query_document_pairs), self.max_batch_size):
                batch = query_document_pairs[i:i + self.max_batch_size]
                batch_scores = self._process_batch(batch)
                all_scores.extend(batch_scores)
                
                logger.debug(f"üîÑ [BGE_RERANKER] Processed batch {i//self.max_batch_size + 1}, "
                           f"scores: {[f'{s:.3f}' for s in batch_scores]}")
            
            return all_scores
            
        except Exception as e:
            logger.error(f"‚ùå [BGE_RERANKER] Error getting rerank scores: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–∫–æ—Ä-—ã
            return [0.5] * len(query_document_pairs)
    
    def _process_batch(self, batch: List[Dict[str, Any]]) -> List[float]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ –ø–∞—Ä –∑–∞–ø—Ä–æ—Å-–¥–æ–∫—É–º–µ–Ω—Ç
        
        Args:
            batch: –ë–∞—Ç—á –ø–∞—Ä –∑–∞–ø—Ä–æ—Å-–¥–æ–∫—É–º–µ–Ω—Ç
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–∫–æ—Ä-–æ–≤ –¥–ª—è –±–∞—Ç—á–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è BGE-ranking-base
            prompt_parts = []
            prompt_parts.append("–ó–∞–¥–∞—á–∞: –û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫ –∑–∞–ø—Ä–æ—Å—É.")
            prompt_parts.append("–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –¢–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –æ—Ç 0.0 –¥–æ 1.0, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É.")
            prompt_parts.append("")
            
            for i, pair in enumerate(batch):
                query = pair['query']
                document = pair['document']
                
                prompt_parts.append(f"–ó–∞–ø—Ä–æ—Å {i+1}: {query}")
                prompt_parts.append(f"–î–æ–∫—É–º–µ–Ω—Ç {i+1}: {document[:500]}...")  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                prompt_parts.append("")
            
            prompt_parts.append("–û—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É):")
            
            prompt = "\n".join(prompt_parts)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ollama
            payload = {
                "model": self.model_name,
                "prompt": prompt,
                "stream": False,
                "options": {
                    "temperature": 0.0,  # –ù—É–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                    "top_p": 0.1,
                    "num_predict": len(batch) * 10,  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —á–∏—Å–µ–ª
                    "stop": ["\n\n", "–ó–∞–ø—Ä–æ—Å", "–î–æ–∫—É–º–µ–Ω—Ç"]  # –°—Ç–æ–ø-—Å–ª–æ–≤–∞
                }
            }
            
            response = requests.post(
                f"{self.ollama_url}/api/generate",
                json=payload,
                timeout=self.timeout
            )
            
            if response.status_code == 200:
                result = response.json()
                generated_text = result.get('response', '').strip()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å–∫–æ—Ä-—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
                scores = self._extract_scores_from_response(generated_text, len(batch))
                
                logger.debug(f"üîÑ [BGE_RERANKER] Batch processed: {len(scores)} scores extracted")
                return scores
            else:
                logger.warning(f"‚ö†Ô∏è [BGE_RERANKER] Ollama API error: {response.status_code}")
                return [0.5] * len(batch)
                
        except Exception as e:
            logger.error(f"‚ùå [BGE_RERANKER] Error processing batch: {e}")
            return [0.5] * len(batch)
    
    def _extract_scores_from_response(self, response_text: str, expected_count: int) -> List[float]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö —Å–∫–æ—Ä-–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
        
        Args:
            response_text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
            expected_count: –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ—Ä-–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —á–∏—Å–ª–æ–≤—ã—Ö —Å–∫–æ—Ä-–æ–≤ (0.0 - 1.0)
        """
        try:
            import re
            
            # –ò—â–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –≤ –æ—Ç–≤–µ—Ç–µ
            numbers = re.findall(r'\d+\.?\d*', response_text)
            
            scores = []
            for num_str in numbers:
                try:
                    score = float(num_str)
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [0, 1]
                    if score > 1.0:
                        score = score / 10.0  # –ï—Å–ª–∏ —Å–∫–æ—Ä –±–æ–ª—å—à–µ 1, –¥–µ–ª–∏–º –Ω–∞ 10
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
                    score = max(0.0, min(1.0, score))
                    scores.append(score)
                    
                except ValueError:
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–∫–æ—Ä-–æ–≤, –¥–æ–ø–æ–ª–Ω—è–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º–∏
            while len(scores) < expected_count:
                scores.append(0.5)
            
            # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∫–æ—Ä-–æ–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ
            scores = scores[:expected_count]
            
            logger.debug(f"üîÑ [BGE_RERANKER] Extracted {len(scores)} scores: {[f'{s:.3f}' for s in scores]}")
            return scores
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è [BGE_RERANKER] Error extracting scores from response: {e}")
            return [0.5] * expected_count
    
    def rerank_with_fallback(self, query: str, search_results: List[Dict[str, Any]], 
                           top_k: int = 8, initial_top_k: int = 50) -> List[Dict[str, Any]]:
        """
        –†–µ—Ä–∞–Ω–∫–∏–Ω–≥ —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            search_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            top_k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            initial_top_k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
        
        Returns:
            –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BGE-ranking-base
            return self.rerank_search_results(query, search_results, top_k, initial_top_k)
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è [BGE_RERANKER] BGE ranking failed, using fallback: {e}")
            
            # Fallback: –ø—Ä–æ—Å—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Å–∫–æ—Ä-–∞–º
            candidates = search_results[:initial_top_k]
            sorted_results = sorted(candidates, key=lambda x: x.get('score', 0), reverse=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É fallback
            for result in sorted_results[:top_k]:
                result['rerank_score'] = result.get('score', 0)
                result['rerank_method'] = 'fallback'
            
            logger.info(f"‚úÖ [BGE_RERANKER] Fallback completed: {len(candidates)} ‚Üí {top_k} results")
            return sorted_results[:top_k]
    
    def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞"""
        try:
            response = requests.get(f"{self.ollama_url}/api/tags", timeout=5)
            if response.status_code == 200:
                models = response.json().get("models", [])
                model_names = [model.get("name") for model in models]
                return self.model_name in model_names
            return False
        except Exception as e:
            logger.error(f"‚ùå [BGE_RERANKER] Health check failed: {e}")
            return False
    
    def get_model_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞"""
        try:
            response = requests.get(f"{self.ollama_url}/api/tags", timeout=10)
            if response.status_code == 200:
                models = response.json().get("models", [])
                for model in models:
                    if model.get("name") == self.model_name:
                        return {
                            "name": model.get("name"),
                            "size": model.get("size"),
                            "modified_at": model.get("modified_at"),
                            "status": "available",
                            "type": "bge-ranking-base"
                        }
            return {"name": self.model_name, "status": "not_found"}
        except Exception as e:
            logger.error(f"‚ùå [BGE_RERANKER] Error getting model info: {e}")
            return {"name": self.model_name, "status": "error"}
    
    def get_reranking_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞"""
        return {
            "model_name": self.model_name,
            "max_batch_size": self.max_batch_size,
            "timeout": self.timeout,
            "health_status": self.health_check(),
            "model_info": self.get_model_info(),
            "timestamp": datetime.now().isoformat()
        }
