"""
–°–µ—Ä–≤–∏—Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import logging
import re
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass
from enum import Enum
import requests
import os
from datetime import datetime

logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º URL Ollama –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
OLLAMA_URL = os.getenv("OLLAMA_URL", "http://host.docker.internal:11434")

class IntentType(Enum):
    """–¢–∏–ø—ã –Ω–∞–º–µ—Ä–µ–Ω–∏–π –∑–∞–ø—Ä–æ—Å–∞"""
    DEFINITION = "definition"           # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ —Ç–µ—Ä–º–∏–Ω—ã
    APPLICABILITY = "applicability"     # –û–±–ª–∞—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    REQUIREMENTS = "requirements"       # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    PROCEDURE = "procedure"            # –ü—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ –º–µ—Ç–æ–¥—ã
    EXCEPTIONS = "exceptions"          # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏
    GENERAL = "general"                # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã

@dataclass
class IntentClassification:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è"""
    intent_type: IntentType
    confidence: float
    keywords: List[str]
    reasoning: str
    suggested_sections: List[str]

@dataclass
class QueryRewriting:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
    original_query: str
    intent_type: IntentType
    rewritten_queries: List[str]
    section_filters: List[str]
    chunk_type_filters: List[str]

class IntentClassifierService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –∑–∞–ø—Ä–æ—Å–∞"""
    
    def __init__(self, ollama_url: str = None, model_name: str = "llama3.1:8b"):
        self.ollama_url = ollama_url or OLLAMA_URL
        self.model_name = model_name
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        self.intent_keywords = {
            IntentType.DEFINITION: [
                "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "—Ç–µ—Ä–º–∏–Ω", "–ø–æ–Ω—è—Ç–∏–µ", "—á—Ç–æ —Ç–∞–∫–æ–µ", "–æ–∑–Ω–∞—á–∞–µ—Ç", "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞",
                "–∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞", "—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ", "–∑–Ω–∞—á–µ–Ω–∏–µ", "—Å–º—ã—Å–ª", "–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å", "–æ–ø–∏—Å–∞—Ç—å",
                "–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "—Ç–∏–ø", "–≤–∏–¥", "–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "–≥—Ä—É–ø–ø–∞", "—Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç—å"
            ],
            IntentType.APPLICABILITY: [
                "–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ", "–æ–±–ª–∞—Å—Ç—å", "—Å—Ñ–µ—Ä–∞", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–¥–ª—è —á–µ–≥–æ", "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ",
                "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", "–ø—Ä–∏–º–µ–Ω–∏–º–æ", "–ø–æ–¥—Ö–æ–¥–∏—Ç", "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç", "–æ—Ç–Ω–æ—Å–∏—Ç—Å—è",
                "—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è", "–¥–µ–π—Å—Ç–≤—É–µ—Ç", "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ", "–∞–∫—Ç—É–∞–ª—å–Ω–æ", "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ"
            ],
            IntentType.REQUIREMENTS: [
                "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ", "–¥–æ–ª–∂–µ–Ω", "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ", "–Ω—É–∂–Ω–æ", "—Å–ª–µ–¥—É–µ—Ç",
                "–æ–±—è–∑–∞–Ω", "—Ç—Ä–µ–±—É–µ—Ç—Å—è", "–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ", "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
                "–Ω–æ—Ä–º–∞", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç", "–∫—Ä–∏—Ç–µ—Ä–∏–π", "—É—Å–ª–æ–≤–∏–µ", "–ø–∞—Ä–∞–º–µ—Ç—Ä", "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞",
                "–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–≤–µ–ª–∏—á–∏–Ω–∞", "—Ä–∞–∑–º–µ—Ä", "—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", "–≤—ã—Å–æ—Ç–∞", "—à–∏—Ä–∏–Ω–∞"
            ],
            IntentType.PROCEDURE: [
                "–ø—Ä–æ—Ü–µ–¥—É—Ä–∞", "–º–µ—Ç–æ–¥", "—Å–ø–æ—Å–æ–±", "–ø–æ—Ä—è–¥–æ–∫", "–∞–ª–≥–æ—Ä–∏—Ç–º", "—ç—Ç–∞–ø", "—à–∞–≥",
                "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", "–æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ", "–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ", "—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è", "–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ",
                "–¥–µ–π—Å—Ç–≤–∏–µ", "–æ–ø–µ—Ä–∞—Ü–∏—è", "–ø—Ä–æ—Ü–µ—Å—Å", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "—Ç–µ—Ö–Ω–∏–∫–∞", "–ø—Ä–∏–µ–º",
                "–∫–∞–∫", "–∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º", "–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "—Å—Ç–∞–¥–∏—è", "—Ñ–∞–∑–∞"
            ],
            IntentType.EXCEPTIONS: [
                "–∏—Å–∫–ª—é—á–µ–Ω–∏–µ", "–æ—Å–æ–±—ã–π", "—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π", "–æ—Ç–¥–µ–ª—å–Ω—ã–π", "—á–∞—Å—Ç–Ω—ã–π", "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π",
                "–Ω–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è", "–Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è", "–Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è", "–Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç",
                "–∫—Ä–æ–º–µ", "–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º", "–ø–æ–º–∏–º–æ", "–∏—Å–∫–ª—é—á–∞—è", "–Ω–µ –≤–∫–ª—é—á–∞—è",
                "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ", "–Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è", "–∑–∞–ø—Ä–µ—â–µ–Ω–æ", "–Ω–µ–ª—å–∑—è"
            ]
        }
        
        # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –Ω–∞ —Ä–∞–∑–¥–µ–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.intent_to_sections = {
            IntentType.DEFINITION: [
                "—Ç–µ—Ä–º–∏–Ω—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", "—Ç–µ—Ä–º–∏–Ω—ã", "–ø–æ–Ω—è—Ç–∏—è",
                "—Å–æ–∫—Ä–∞—â–µ–Ω–∏—è", "–∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã", "–≥–ª–æ—Å—Å–∞—Ä–∏–π", "—Å–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤"
            ],
            IntentType.APPLICABILITY: [
                "–æ–±–ª–∞—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è", "—Å—Ñ–µ—Ä–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è", "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ", "–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ",
                "—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ", "–¥–µ–π—Å—Ç–≤–∏–µ", "–ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å", "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"
            ],
            IntentType.REQUIREMENTS: [
                "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "–æ–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
                "–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
                "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", "–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", "–∫—Ä–∏—Ç–µ—Ä–∏–∏", "—É—Å–ª–æ–≤–∏—è"
            ],
            IntentType.PROCEDURE: [
                "–º–µ—Ç–æ–¥—ã", "–ø—Ä–æ—Ü–µ–¥—É—Ä—ã", "–ø–æ—Ä—è–¥–æ–∫", "–∞–ª–≥–æ—Ä–∏—Ç–º", "—ç—Ç–∞–ø—ã", "—Å—Ç–∞–¥–∏–∏",
                "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", "–æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ", "–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ", "—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è",
                "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "—Ç–µ—Ö–Ω–∏–∫–∞", "–ø—Ä–∏–µ–º—ã", "–æ–ø–µ—Ä–∞—Ü–∏–∏"
            ],
            IntentType.EXCEPTIONS: [
                "–∏—Å–∫–ª—é—á–µ–Ω–∏—è", "–æ—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", "–∑–∞–ø—Ä–µ—Ç—ã",
                "–Ω–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è", "–Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è", "–Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è"
            ]
        }
        
        # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –Ω–∞ —Ç–∏–ø—ã —á–∞–Ω–∫–æ–≤
        self.intent_to_chunk_types = {
            IntentType.DEFINITION: ["definition", "term", "glossary"],
            IntentType.APPLICABILITY: ["scope", "application", "coverage"],
            IntentType.REQUIREMENTS: ["requirement", "mandatory", "obligatory"],
            IntentType.PROCEDURE: ["procedure", "method", "process", "step"],
            IntentType.EXCEPTIONS: ["exception", "limitation", "restriction"]
        }
        
        logger.info(f"üéØ [INTENT_CLASSIFIER] Initialized with {self.model_name} at {self.ollama_url}")
    
    def classify_intent(self, query: str) -> IntentClassification:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        """
        try:
            logger.info(f"üéØ [INTENT_CLASSIFIER] Classifying intent for query: '{query[:100]}...'")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–∞–≤–∏–ª–æ-–æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
            rule_based_result = self._rule_based_classification(query)
            
            # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if rule_based_result.confidence >= 0.8:
                logger.info(f"‚úÖ [INTENT_CLASSIFIER] Rule-based classification: {rule_based_result.intent_type.value} (confidence: {rule_based_result.confidence:.3f})")
                return rule_based_result
            
            # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º ML-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
            ml_result = self._ml_classification(query)
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if ml_result.confidence > rule_based_result.confidence:
                logger.info(f"‚úÖ [INTENT_CLASSIFIER] ML classification: {ml_result.intent_type.value} (confidence: {ml_result.confidence:.3f})")
                return ml_result
            else:
                logger.info(f"‚úÖ [INTENT_CLASSIFIER] Rule-based classification: {rule_based_result.intent_type.value} (confidence: {rule_based_result.confidence:.3f})")
                return rule_based_result
                
        except Exception as e:
            logger.error(f"‚ùå [INTENT_CLASSIFIER] Error classifying intent: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π —Ç–∏–ø –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return IntentClassification(
                intent_type=IntentType.GENERAL,
                confidence=0.5,
                keywords=[],
                reasoning="–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—â–∏–π —Ç–∏–ø",
                suggested_sections=[]
            )
    
    def _rule_based_classification(self, query: str) -> IntentClassification:
        """–ü—Ä–∞–≤–∏–ª–æ-–æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è"""
        try:
            query_lower = query.lower()
            intent_scores = {}
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä-—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            for intent_type, keywords in self.intent_keywords.items():
                score = 0
                matched_keywords = []
                
                for keyword in keywords:
                    if keyword in query_lower:
                        score += 1
                        matched_keywords.append(keyword)
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∫–æ—Ä
                if keywords:
                    intent_scores[intent_type] = {
                        'score': score / len(keywords),
                        'keywords': matched_keywords
                    }
            
            # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å–∫–æ—Ä-–æ–º
            if intent_scores:
                best_intent = max(intent_scores.items(), key=lambda x: x[1]['score'])
                intent_type = best_intent[0]
                score_data = best_intent[1]
                
                # –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                confidence = min(0.95, score_data['score'] * 2)  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ 0.95
                
                return IntentClassification(
                    intent_type=intent_type,
                    confidence=confidence,
                    keywords=score_data['keywords'],
                    reasoning=f"–ü—Ä–∞–≤–∏–ª–æ-–æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: –Ω–∞–π–¥–µ–Ω–æ {len(score_data['keywords'])} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤",
                    suggested_sections=self.intent_to_sections.get(intent_type, [])
                )
            else:
                return IntentClassification(
                    intent_type=IntentType.GENERAL,
                    confidence=0.3,
                    keywords=[],
                    reasoning="–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                    suggested_sections=[]
                )
                
        except Exception as e:
            logger.error(f"‚ùå [INTENT_CLASSIFIER] Error in rule-based classification: {e}")
            return IntentClassification(
                intent_type=IntentType.GENERAL,
                confidence=0.1,
                keywords=[],
                reasoning=f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª–æ-–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}",
                suggested_sections=[]
            )
    
    def _ml_classification(self, query: str) -> IntentClassification:
        """ML-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Ollama"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            prompt = f"""–ó–∞–¥–∞—á–∞: –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º.

–ó–∞–ø—Ä–æ—Å: "{query}"

–¢–∏–ø—ã –Ω–∞–º–µ—Ä–µ–Ω–∏–π:
1. definition - –∑–∞–ø—Ä–æ—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π, —Ç–µ—Ä–º–∏–Ω–æ–≤, –ø–æ–Ω—è—Ç–∏–π
2. applicability - –∑–∞–ø—Ä–æ—Å –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, —Å—Ñ–µ—Ä—ã –¥–µ–π—Å—Ç–≤–∏—è
3. requirements - –∑–∞–ø—Ä–æ—Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤, –Ω–æ—Ä–º
4. procedure - –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ü–µ–¥—É—Ä, –º–µ—Ç–æ–¥–æ–≤, –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
5. exceptions - –∑–∞–ø—Ä–æ—Å –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤
6. general - –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "intent_type": "—Ç–∏–ø_–Ω–∞–º–µ—Ä–µ–Ω–∏—è",
    "confidence": 0.0-1.0,
    "reasoning": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞",
    "keywords": ["–∫–ª—é—á–µ–≤—ã–µ", "—Å–ª–æ–≤–∞"]
}}"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ollama
            payload = {
                "model": self.model_name,
                "prompt": prompt,
                "stream": False,
                "options": {
                    "temperature": 0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                    "top_p": 0.9,
                    "num_predict": 200
                }
            }
            
            response = requests.post(
                f"{self.ollama_url}/api/generate",
                json=payload,
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                generated_text = result.get('response', '').strip()
                
                # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
                classification_data = self._parse_classification_response(generated_text)
                
                if classification_data:
                    intent_type = IntentType(classification_data.get('intent_type', 'general'))
                    confidence = float(classification_data.get('confidence', 0.5))
                    reasoning = classification_data.get('reasoning', 'ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è')
                    keywords = classification_data.get('keywords', [])
                    
                    return IntentClassification(
                        intent_type=intent_type,
                        confidence=confidence,
                        keywords=keywords,
                        reasoning=reasoning,
                        suggested_sections=self.intent_to_sections.get(intent_type, [])
                    )
            
            # –ï—Å–ª–∏ ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π —Ç–∏–ø
            return IntentClassification(
                intent_type=IntentType.GENERAL,
                confidence=0.3,
                keywords=[],
                reasoning="ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å",
                suggested_sections=[]
            )
            
        except Exception as e:
            logger.error(f"‚ùå [INTENT_CLASSIFIER] Error in ML classification: {e}")
            return IntentClassification(
                intent_type=IntentType.GENERAL,
                confidence=0.1,
                keywords=[],
                reasoning=f"–û—à–∏–±–∫–∞ –≤ ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}",
                suggested_sections=[]
            )
    
    def _parse_classification_response(self, response_text: str) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ML –º–æ–¥–µ–ª–∏"""
        try:
            import json
            
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                json_str = json_match.group(0)
                return json.loads(json_str)
            
            return None
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è [INTENT_CLASSIFIER] Error parsing classification response: {e}")
            return None
    
    def rewrite_query(self, query: str, intent_classification: IntentClassification) -> QueryRewriting:
        """
        –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        
        Args:
            query: –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            intent_classification: –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            
        Returns:
            –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã
        """
        try:
            logger.info(f"üîÑ [INTENT_CLASSIFIER] Rewriting query for intent: {intent_classification.intent_type.value}")
            
            intent_type = intent_classification.intent_type
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            rewritten_queries = self._generate_rewritten_queries(query, intent_type)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
            section_filters = self.intent_to_sections.get(intent_type, [])
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–∏–ø–æ–≤ —á–∞–Ω–∫–æ–≤
            chunk_type_filters = self.intent_to_chunk_types.get(intent_type, [])
            
            return QueryRewriting(
                original_query=query,
                intent_type=intent_type,
                rewritten_queries=rewritten_queries,
                section_filters=section_filters,
                chunk_type_filters=chunk_type_filters
            )
            
        except Exception as e:
            logger.error(f"‚ùå [INTENT_CLASSIFIER] Error rewriting query: {e}")
            return QueryRewriting(
                original_query=query,
                intent_type=IntentType.GENERAL,
                rewritten_queries=[query],
                section_filters=[],
                chunk_type_filters=[]
            )
    
    def _generate_rewritten_queries(self, query: str, intent_type: IntentType) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è"""
        try:
            rewritten_queries = [query]  # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            if intent_type == IntentType.DEFINITION:
                rewritten_queries.extend([
                    f"–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {query}",
                    f"—á—Ç–æ —Ç–∞–∫–æ–µ {query}",
                    f"—Ç–µ—Ä–º–∏–Ω {query}",
                    f"–ø–æ–Ω—è—Ç–∏–µ {query}"
                ])
            elif intent_type == IntentType.APPLICABILITY:
                rewritten_queries.extend([
                    f"–æ–±–ª–∞—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è {query}",
                    f"–≥–¥–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è {query}",
                    f"—Å—Ñ–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {query}",
                    f"–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ {query}"
                ])
            elif intent_type == IntentType.REQUIREMENTS:
                rewritten_queries.extend([
                    f"—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ {query}",
                    f"–Ω–æ—Ä–º—ã –¥–ª—è {query}",
                    f"–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è {query}",
                    f"–ø–∞—Ä–∞–º–µ—Ç—Ä—ã {query}"
                ])
            elif intent_type == IntentType.PROCEDURE:
                rewritten_queries.extend([
                    f"–º–µ—Ç–æ–¥ {query}",
                    f"–ø—Ä–æ—Ü–µ–¥—É—Ä–∞ {query}",
                    f"–∫–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å {query}",
                    f"–ø–æ—Ä—è–¥–æ–∫ {query}"
                ])
            elif intent_type == IntentType.EXCEPTIONS:
                rewritten_queries.extend([
                    f"–∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {query}",
                    f"–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è {query}",
                    f"–Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ {query}",
                    f"–æ—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ {query}"
                ])
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            unique_queries = list(dict.fromkeys(rewritten_queries))[:5]
            
            return unique_queries
            
        except Exception as e:
            logger.error(f"‚ùå [INTENT_CLASSIFIER] Error generating rewritten queries: {e}")
            return [query]
    
    def get_intent_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        return {
            "service_type": "intent_classifier",
            "model_name": self.model_name,
            "intent_types": [intent.value for intent in IntentType],
            "keywords_count": {intent.value: len(keywords) for intent, keywords in self.intent_keywords.items()},
            "sections_mapping": {intent.value: len(sections) for intent, sections in self.intent_to_sections.items()},
            "chunk_types_mapping": {intent.value: len(types) for intent, types in self.intent_to_chunk_types.items()},
            "timestamp": datetime.now().isoformat()
        }
    
    def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        try:
            response = requests.get(f"{self.ollama_url}/api/tags", timeout=5)
            if response.status_code == 200:
                models = response.json().get("models", [])
                model_names = [model.get("name") for model in models]
                return self.model_name in model_names
            return False
        except Exception as e:
            logger.error(f"‚ùå [INTENT_CLASSIFIER] Health check failed: {e}")
            return False
