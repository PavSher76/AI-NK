import logging
import os
import tempfile
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class DocumentParser:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        pass
    
    async def extract_text_from_document(self, content: bytes, filename: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix=f".{filename.split('.')[-1]}") as temp_file:
                temp_file.write(content)
                temp_file_path = temp_file.name
            
            try:
                if filename.lower().endswith('.pdf'):
                    return await self.extract_text_from_pdf(temp_file_path)
                elif filename.lower().endswith('.docx'):
                    return await self.extract_text_from_docx(temp_file_path)
                elif filename.lower().endswith('.txt'):
                    return content.decode('utf-8', errors='ignore')
                else:
                    logger.error(f"‚ùå [EXTRACT_TEXT] Unsupported file type: {filename}")
                    return ""
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_file_path):
                    os.unlink(temp_file_path)
                    
        except Exception as e:
            logger.error(f"‚ùå [EXTRACT_TEXT] Error extracting text: {e}")
            return ""

    async def extract_text_from_pdf(self, file_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF"""
        try:
            import PyPDF2
            
            text = ""
            with open(file_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                for page_num in range(len(pdf_reader.pages)):
                    page = pdf_reader.pages[page_num]
                    text += page.extract_text() + "\n"
            
            return text.strip()
            
        except Exception as e:
            logger.error(f"‚ùå [EXTRACT_PDF] Error extracting text from PDF: {e}")
            return ""

    async def extract_text_from_docx(self, file_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX"""
        try:
            from docx import Document
            
            doc = Document(file_path)
            text = ""
            for paragraph in doc.paragraphs:
                text += paragraph.text + "\n"
            
            return text.strip()
            
        except Exception as e:
            logger.error(f"‚ùå [EXTRACT_DOCX] Error extracting text from DOCX: {e}")
            return ""

    def extract_document_code(self, document_title: str) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è (–ì–û–°–¢, –°–ü, –°–ù–∏–ü –∏ —Ç.–¥.)
        """
        try:
            import re
            
            # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            title_without_ext = re.sub(r'\.(pdf|txt|doc|docx)$', '', document_title, flags=re.IGNORECASE)
            
            patterns = [
                r'–ì–û–°–¢\s+[\d\.-]+', 
                r'–°–ü\s+[\d\.-]+', 
                r'–°–ù–∏–ü\s+[\d\.-]+',
                r'–¢–†\s+–¢–°\s+[\d\.-]+', 
                r'–°–¢–û\s+[\d\.-]+', 
                r'–†–î\s+[\d\.-]+',
                r'–¢–£\s+[\d\.-]+',
                r'–ü–ë\s+[\d\.-]+',
                r'–ù–ü–ë\s+[\d\.-]+',
                r'–°–ü–±\s+[\d\.-]+',
                r'–ú–ì–°–ù\s+[\d\.-]+'
            ]
            
            for pattern in patterns:
                match = re.search(pattern, title_without_ext, re.IGNORECASE)
                if match:
                    code = match.group(0).strip()
                    logger.info(f"üîç [CODE_EXTRACTION] Extracted code '{code}' from title '{document_title}'")
                    return code
            
            logger.warning(f"‚ö†Ô∏è [CODE_EXTRACTION] No code pattern found in title: '{document_title}'")
            return ""
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è [CODE_EXTRACTION] Error extracting document code: {e}")
            return ""

    def extract_document_code_from_query(self, query: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            import re
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            patterns = [
                r'–°–ü\s+(\d+\.\d+\.\d+)',  # –°–ü 22.13330.2016
                r'–°–ù–∏–ü\s+(\d+\.\d+\.\d+)',  # –°–ù–∏–ü 2.01.01-82
                r'–ì–û–°–¢\s+(\d+\.\d+\.\d+)',  # –ì–û–°–¢ 27751-2014
                r'–¢–£\s+(\d+\.\d+\.\d+)',   # –¢–£ 3812-001-12345678-2016
                r'–ü–ë\s+(\d+\.\d+\.\d+)',   # –ü–ë 03-428-02
                r'–ù–ü–ë\s+(\d+\.\d+\.\d+)',  # –ù–ü–ë 5-2000
                r'–°–ü–±\s+(\d+\.\d+\.\d+)',  # –°–ü–± 70.13330.2012
                r'–ú–ì–°–ù\s+(\d+\.\d+\.\d+)'  # –ú–ì–°–ù 4.19-2005
            ]
            
            for pattern in patterns:
                match = re.search(pattern, query, re.IGNORECASE)
                if match:
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    if '–°–ü' in pattern:
                        return f"–°–ü {match.group(1)}"
                    elif '–°–ù–∏–ü' in pattern:
                        return f"–°–ù–∏–ü {match.group(1)}"
                    elif '–ì–û–°–¢' in pattern:
                        return f"–ì–û–°–¢ {match.group(1)}"
                    elif '–¢–£' in pattern:
                        return f"–¢–£ {match.group(1)}"
                    elif '–ü–ë' in pattern:
                        return f"–ü–ë {match.group(1)}"
                    elif '–ù–ü–ë' in pattern:
                        return f"–ù–ü–ë {match.group(1)}"
                    elif '–°–ü–±' in pattern:
                        return f"–°–ü–± {match.group(1)}"
                    elif '–ú–ì–°–ù' in pattern:
                        return f"–ú–ì–°–ù {match.group(1)}"
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå [DOCUMENT_CODE_EXTRACTION] Error extracting document code: {e}")
            return None
