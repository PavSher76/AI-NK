"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫—Ä–æ—Å—Å-—ç–Ω–∫–æ–¥–µ—Ä–∞ BGE-Reranker
"""

import logging
import requests
import os
from typing import List, Dict, Any, Tuple
import numpy as np

logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º URL Ollama –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
OLLAMA_URL = os.getenv("OLLAMA_URL", "http://host.docker.internal:11434")


class BGERerankerService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º BGE-Reranker —á–µ—Ä–µ–∑ Ollama"""
    
    def __init__(self, ollama_url: str = None, model_name: str = "llama3.1:8b"):
        self.ollama_url = ollama_url or OLLAMA_URL
        self.model_name = model_name
        logger.info(f"üîÑ [RERANKER] Initialized with {self.model_name} at {self.ollama_url}")
    
    def rerank_search_results(self, query: str, search_results: List[Dict[str, Any]], 
                            top_k: int = 8, initial_top_k: int = 50) -> List[Dict[str, Any]]:
        """
        –†–µ—Ä–∞–Ω–∫–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫—Ä–æ—Å—Å-—ç–Ω–∫–æ–¥–µ—Ä–∞
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            search_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –æ—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            top_k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            initial_top_k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= top_k)
        
        Returns:
            –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        try:
            if not search_results:
                logger.warning("‚ö†Ô∏è [RERANKER] No search results to rerank")
                return []
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
            candidates = search_results[:initial_top_k]
            logger.info(f"üîÑ [RERANKER] Reranking {len(candidates)} candidates for query: '{query[:100]}...'")
            
            if len(candidates) <= top_k:
                logger.info(f"‚úÖ [RERANKER] Not enough candidates for reranking, returning top {len(candidates)}")
                return candidates
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –∑–∞–ø—Ä–æ—Å-–¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
            query_document_pairs = []
            for result in candidates:
                content = result.get('content', '')
                if content.strip():
                    query_document_pairs.append({
                        'query': query,
                        'document': content,
                        'result': result
                    })
            
            if not query_document_pairs:
                logger.warning("‚ö†Ô∏è [RERANKER] No valid content for reranking")
                return candidates[:top_k]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥
            reranked_scores = self._get_rerank_scores(query_document_pairs)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –Ω–æ–≤—ã–º —Å–∫–æ—Ä-–∞–º
            reranked_results = []
            for i, score in enumerate(reranked_scores):
                if i < len(candidates):
                    result = candidates[i].copy()
                    result['rerank_score'] = score
                    reranked_results.append(result)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å–∫–æ—Ä-–∞ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
            reranked_results.sort(key=lambda x: x.get('rerank_score', 0), reverse=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-k —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            final_results = reranked_results[:top_k]
            
            logger.info(f"‚úÖ [RERANKER] Successfully reranked {len(candidates)} ‚Üí {len(final_results)} results")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            for i, result in enumerate(final_results[:3]):
                logger.info(f"üèÜ [RERANKER] Top {i+1}: score={result.get('rerank_score', 0):.4f}, "
                          f"title='{result.get('document_title', 'Unknown')[:50]}...'")
            
            return final_results
            
        except Exception as e:
            logger.error(f"‚ùå [RERANKER] Error during reranking: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            return search_results[:top_k]
    
    def _get_rerank_scores(self, query_document_pairs: List[Dict[str, Any]]) -> List[float]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–æ—Ä-–æ–≤ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞ –¥–ª—è –ø–∞—Ä –∑–∞–ø—Ä–æ—Å-–¥–æ–∫—É–º–µ–Ω—Ç
        
        Args:
            query_document_pairs: –°–ø–∏—Å–æ–∫ –ø–∞—Ä –∑–∞–ø—Ä–æ—Å-–¥–æ–∫—É–º–µ–Ω—Ç
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–∫–æ—Ä-–æ–≤ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
        """
        try:
            scores = []
            
            for pair in query_document_pairs:
                query = pair['query']
                document = pair['document']
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
                prompt = f"""–ó–∞–ø—Ä–æ—Å: {query}

–î–æ–∫—É–º–µ–Ω—Ç: {document}

–û—Ü–µ–Ω–∏—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å. –ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10, –≥–¥–µ:
10 - –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
5 - –¥–æ–∫—É–º–µ–Ω—Ç —á–∞—Å—Ç–∏—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å  
1 - –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å

–û—Ü–µ–Ω–∫–∞:"""
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ollama
                payload = {
                    "model": self.model_name,
                    "prompt": prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                        "top_p": 0.9,
                        "num_predict": 10  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
                    }
                }
                
                response = requests.post(
                    f"{self.ollama_url}/api/generate",
                    json=payload,
                    timeout=15  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                )
                
                if response.status_code == 200:
                    result = response.json()
                    generated_text = result.get('response', '').strip()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π —Å–∫–æ—Ä –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    score = self._extract_score_from_response(generated_text)
                    scores.append(score)
                    
                    logger.debug(f"üîÑ [RERANKER] Query: '{query[:50]}...' ‚Üí Score: {score}")
                else:
                    logger.warning(f"‚ö†Ô∏è [RERANKER] Ollama API error: {response.status_code}")
                    scores.append(0.0)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∫–æ—Ä-—ã –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [0, 1]
            if scores:
                min_score = min(scores)
                max_score = max(scores)
                if max_score > min_score:
                    scores = [(s - min_score) / (max_score - min_score) for s in scores]
                else:
                    scores = [0.5] * len(scores)  # –ï—Å–ª–∏ –≤—Å–µ —Å–∫–æ—Ä-—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            
            return scores
            
        except Exception as e:
            logger.error(f"‚ùå [RERANKER] Error getting rerank scores: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–∫–æ—Ä-—ã
            return [0.5] * len(query_document_pairs)
    
    def _extract_score_from_response(self, response_text: str) -> float:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ —Å–∫–æ—Ä-–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
        
        Args:
            response_text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
            
        Returns:
            –ß–∏—Å–ª–æ–≤–æ–π —Å–∫–æ—Ä (0.0 - 1.0)
        """
        try:
            # –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ
            import re
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫–æ—Ä-–æ–≤ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
            patterns = [
                r'–æ—Ü–µ–Ω–∫–∞[:\s]*(\d+)',  # "–æ—Ü–µ–Ω–∫–∞: 8"
                r'(\d+)\s*–∏–∑\s*10',  # "8 –∏–∑ 10"
                r'(\d+)/10',  # "8/10"
                r'(\d+)',  # –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            ]
            
            for pattern in patterns:
                matches = re.findall(pattern, response_text.lower())
                if matches:
                    try:
                        score = float(matches[0])
                        
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [0, 1] (—à–∫–∞–ª–∞ 1-10)
                        if score > 10:  # –ï—Å–ª–∏ —Å–∫–æ—Ä –±–æ–ª—å—à–µ 10
                            score = score / 100
                        elif score > 1:  # –ï—Å–ª–∏ —Å–∫–æ—Ä –ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ
                            score = (score - 1) / 9  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 1-10 –≤ 0-1
                        
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
                        score = max(0.0, min(1.0, score))
                        
                        return score
                    except ValueError:
                        continue
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–∫–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –æ—Ç–≤–µ—Ç–µ
            positive_words = ['—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω', '—Ö–æ—Ä–æ—à', '–æ—Ç–ª–∏—á–Ω', '–≤—ã—Å–æ–∫', '—Å–∏–ª—å–Ω', '—Ç–æ—á–Ω', '–ø–æ–¥—Ö–æ–¥—è—â']
            negative_words = ['–Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω', '–ø–ª–æ—Ö', '—Å–ª–∞–±', '–Ω–∏–∑–∫', '–Ω–µ—Ç–æ—á–Ω', '–Ω–µ–ø–æ–¥—Ö–æ–¥—è—â']
            
            response_lower = response_text.lower()
            positive_count = sum(1 for word in positive_words if word in response_lower)
            negative_count = sum(1 for word in negative_words if word in response_lower)
            
            if positive_count > negative_count:
                return 0.8  # –í—ã—Å–æ–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
            elif negative_count > positive_count:
                return 0.2  # –ù–∏–∑–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
            else:
                return 0.5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è [RERANKER] Error extracting score from response: {e}")
            return 0.5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞"""
        try:
            response = requests.get(f"{self.ollama_url}/api/tags", timeout=5)
            if response.status_code == 200:
                models = response.json().get("models", [])
                model_names = [model.get("name") for model in models]
                return self.model_name in model_names
            return False
        except Exception as e:
            logger.error(f"‚ùå [RERANKER] Health check failed: {e}")
            return False
    
    def get_model_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞"""
        try:
            response = requests.get(f"{self.ollama_url}/api/tags", timeout=10)
            if response.status_code == 200:
                models = response.json().get("models", [])
                for model in models:
                    if model.get("name") == self.model_name:
                        return {
                            "name": model.get("name"),
                            "size": model.get("size"),
                            "modified_at": model.get("modified_at"),
                            "status": "available"
                        }
            return {"name": self.model_name, "status": "not_found"}
        except Exception as e:
            logger.error(f"‚ùå [RERANKER] Error getting model info: {e}")
            return {"name": self.model_name, "status": "error"}
