"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
"""

import logging
import io
from typing import Dict, Any, List, Optional
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DOCX
try:
    from docx import Document
    from docx.document import Document as DocumentType
    from docx.text.paragraph import Paragraph
    from docx.table import Table
    DOCX_AVAILABLE = True
except ImportError:
    DOCX_AVAILABLE = False

logger = logging.getLogger(__name__)


class DOCXTextExtractor:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, extract_tables: bool = True, extract_headers: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
        
        Args:
            extract_tables: –ò–∑–≤–ª–µ–∫–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü
            extract_headers: –ò–∑–≤–ª–µ–∫–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
        """
        self.extract_tables = extract_tables
        self.extract_headers = extract_headers
        
        if not DOCX_AVAILABLE:
            raise ImportError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å python-docx –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DOCX")
    
    def extract_text_from_file(self, file_path: str) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ DOCX —Ñ–∞–π–ª—É
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            doc = Document(file_path)
            return self._extract_from_document(doc, file_path)
                
        except Exception as e:
            logger.error(f"‚ùå [DOCX_EXTRACT] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ {file_path}: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX: {e}")
    
    def extract_text_from_bytes(self, file_content: bytes) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤
        
        Args:
            file_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ DOCX —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            doc = Document(io.BytesIO(file_content))
            return self._extract_from_document(doc, "bytes")
                
        except Exception as e:
            logger.error(f"‚ùå [DOCX_EXTRACT] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–∞–π—Ç–æ–≤: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX –±–∞–π—Ç–æ–≤: {e}")
    
    def _extract_from_document(self, doc: DocumentType, source: str) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Document
        
        Args:
            doc: –û–±—ä–µ–∫—Ç Document
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–ø—É—Ç—å –∏–ª–∏ "bytes")
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            paragraphs = []
            headers = []
            tables = []
            full_text = ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
            for para_num, paragraph in enumerate(doc.paragraphs, 1):
                para_text = paragraph.text.strip()
                if not para_text:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
                para_type = self._get_paragraph_type(paragraph)
                
                para_data = {
                    "paragraph_number": para_num,
                    "text": para_text,
                    "type": para_type,
                    "style": paragraph.style.name if paragraph.style else "Normal",
                    "char_count": len(para_text),
                    "word_count": len(para_text.split())
                }
                
                paragraphs.append(para_data)
                
                # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
                if self.extract_headers and para_type in ["header", "title"]:
                    headers.append(para_data)
                
                full_text += para_text + "\n"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            if self.extract_tables:
                for table_num, table in enumerate(doc.tables, 1):
                    table_data = self._extract_table_data(table, table_num)
                    tables.append(table_data)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–∞–±–ª–∏—Ü—ã –∫ –æ–±—â–µ–º—É —Ç–µ–∫—Å—Ç—É
                    table_text = self._table_to_text(table_data)
                    full_text += table_text + "\n"
            
            # –û—á–∏—â–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            cleaned_text = self._clean_extracted_text(full_text)
            
            logger.info(f"üìÑ [DOCX] –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(paragraphs)} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤, {len(tables)} —Ç–∞–±–ª–∏—Ü –∏–∑ DOCX")
            
            return {
                "success": True,
                "text": cleaned_text,
                "paragraphs": paragraphs,
                "headers": headers,
                "tables": tables,
                "method": "python-docx",
                "metadata": {
                    "total_paragraphs": len(paragraphs),
                    "total_headers": len(headers),
                    "total_tables": len(tables),
                    "total_chars": len(cleaned_text),
                    "total_words": len(cleaned_text.split()),
                    "source": source
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå [DOCX_EXTRACT] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ DOCX –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
    
    def _get_paragraph_type(self, paragraph: Paragraph) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
        
        Args:
            paragraph: –û–±—ä–µ–∫—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
            
        Returns:
            –¢–∏–ø –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
        """
        if not paragraph.style:
            return "normal"
        
        style_name = paragraph.style.name.lower()
        
        if "heading" in style_name or "title" in style_name:
            return "header"
        elif "title" in style_name:
            return "title"
        elif "caption" in style_name:
            return "caption"
        elif "list" in style_name:
            return "list"
        else:
            return "normal"
    
    def _extract_table_data(self, table: Table, table_num: int) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        
        Args:
            table: –û–±—ä–µ–∫—Ç —Ç–∞–±–ª–∏—Ü—ã
            table_num: –ù–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü—ã
        """
        try:
            rows_data = []
            table_text = ""
            
            for row_num, row in enumerate(table.rows):
                row_data = []
                row_text = ""
                
                for cell in row.cells:
                    cell_text = cell.text.strip()
                    row_data.append(cell_text)
                    row_text += cell_text + "\t"
                
                rows_data.append({
                    "row_number": row_num + 1,
                    "cells": row_data,
                    "text": row_text.strip()
                })
                table_text += row_text.strip() + "\n"
            
            return {
                "table_number": table_num,
                "rows": rows_data,
                "text": table_text.strip(),
                "row_count": len(rows_data),
                "col_count": len(rows_data[0]["cells"]) if rows_data else 0
            }
            
        except Exception as e:
            logger.error(f"‚ùå [DOCX_TABLE] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {table_num}: {e}")
            return {
                "table_number": table_num,
                "rows": [],
                "text": "",
                "row_count": 0,
                "col_count": 0,
                "error": str(e)
            }
    
    def _table_to_text(self, table_data: Dict[str, Any]) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã –≤ —Ç–µ–∫—Å—Ç
        
        Args:
            table_data: –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        """
        if not table_data.get("rows"):
            return ""
        
        text_lines = []
        for row in table_data["rows"]:
            text_lines.append(row["text"])
        
        return "\n".join(text_lines)
    
    def _clean_extracted_text(self, text: str) -> str:
        """
        –û—á–∏—Å—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        import re
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'[\u00A0\u2000-\u200F\u2028-\u202F\u205F\u3000]', ' ', text)
        
        # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ —Å—Ç—Ä–æ–∫–∞—Ö, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'[ \t]+', ' ', text)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
        lines = text.split('\n')
        lines = [line.strip() for line in lines]
        text = '\n'.join(lines)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ (–±–æ–ª–µ–µ 2 –ø–æ–¥—Ä—è–¥)
        text = re.sub(r'\n\s*\n\s*\n+', '\n\n', text)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        text = re.sub(r'\s+([.,!?;:])', r'\1', text)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏
        text = re.sub(r'\(\s+', '(', text)
        text = re.sub(r'\s+\)', ')', text)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö
        text = re.sub(r'"\s+', '"', text)
        text = re.sub(r'\s+"', '"', text)
        
        return text.strip()
    
    def create_chunks(self, text: str, chunk_size: int = 1000, overlap: int = 100) -> List[Dict[str, Any]]:
        """
        –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            chunk_size: –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
            overlap: –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —á–∞–Ω–∫–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        chunks = []
        words = text.split()
        
        for i in range(0, len(words), chunk_size - overlap):
            chunk_words = words[i:i + chunk_size]
            chunk_text = ' '.join(chunk_words)
            
            chunks.append({
                'content': chunk_text,
                'start_word': i,
                'end_word': min(i + chunk_size, len(words)),
                'char_count': len(chunk_text),
                'word_count': len(chunk_words)
            })
        
        return chunks


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def extract_text_from_docx_file(file_path: str, extract_tables: bool = True, extract_headers: bool = True) -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX —Ñ–∞–π–ª–∞ (—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    
    Args:
        file_path: –ü—É—Ç—å –∫ DOCX —Ñ–∞–π–ª—É
        extract_tables: –ò–∑–≤–ª–µ–∫–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü
        extract_headers: –ò–∑–≤–ª–µ–∫–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    extractor = DOCXTextExtractor(extract_tables=extract_tables, extract_headers=extract_headers)
    return extractor.extract_text_from_file(file_path)


def extract_text_from_docx_bytes(file_content: bytes, extract_tables: bool = True, extract_headers: bool = True) -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤ (—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    
    Args:
        file_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ DOCX —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
        extract_tables: –ò–∑–≤–ª–µ–∫–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü
        extract_headers: –ò–∑–≤–ª–µ–∫–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    extractor = DOCXTextExtractor(extract_tables=extract_tables, extract_headers=extract_headers)
    return extractor.extract_text_from_bytes(file_content)
