"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import logging
import os
from typing import Dict, Any, List, Optional, Union
from pathlib import Path

from .pdf_utils import PDFTextExtractor, extract_text_from_pdf_file, extract_text_from_pdf_bytes
from .docx_utils import DOCXTextExtractor, extract_text_from_docx_file, extract_text_from_docx_bytes
from .text_processing import TextProcessor, TextChunk, hierarchical_text_chunking, clean_text

logger = logging.getLogger(__name__)


class UniversalDocumentParser:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    
    def __init__(self, 
                 prefer_pdfminer: bool = True,
                 extract_tables: bool = True,
                 extract_headers: bool = True,
                 create_hierarchical_chunks: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
        
        Args:
            prefer_pdfminer: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å pdfminer –¥–ª—è PDF (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π)
            extract_tables: –ò–∑–≤–ª–µ–∫–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –∏–∑ DOCX
            extract_headers: –ò–∑–≤–ª–µ–∫–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
            create_hierarchical_chunks: –°–æ–∑–¥–∞–≤–∞—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ —á–∞–Ω–∫–∏
        """
        self.pdf_extractor = PDFTextExtractor(prefer_pdfminer=prefer_pdfminer)
        self.docx_extractor = DOCXTextExtractor(
            extract_tables=extract_tables, 
            extract_headers=extract_headers
        )
        self.text_processor = TextProcessor()
        self.create_hierarchical_chunks = create_hierarchical_chunks
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        self.supported_formats = {
            '.pdf': self._parse_pdf,
            '.docx': self._parse_docx,
            '.doc': self._parse_docx,  # DOCX —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å DOC
            '.txt': self._parse_txt
        }
    
    def parse_document(self, file_path: str) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            file_path = Path(file_path)
            
            if not file_path.exists():
                raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
            file_extension = file_path.suffix.lower()
            
            if file_extension not in self.supported_formats:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")
            
            # –ü–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
            parse_func = self.supported_formats[file_extension]
            result = parse_func(str(file_path))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            result.update({
                "file_path": str(file_path),
                "file_name": file_path.name,
                "file_extension": file_extension,
                "file_size": file_path.stat().st_size
            })
            
            # –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if self.create_hierarchical_chunks and result.get("success", False):
                text = result.get("text", "")
                if text:
                    chunks = self.text_processor.hierarchical_chunking(text)
                    result["chunks"] = [
                        {
                            "chunk_id": chunk.chunk_id,
                            "text": chunk.content,
                            "hierarchy": chunk.hierarchy,
                            "metadata": chunk.metadata
                        }
                        for chunk in chunks
                    ]
            
            logger.info(f"üìÑ [DOCUMENT_PARSER] –î–æ–∫—É–º–µ–Ω—Ç {file_path.name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå [DOCUMENT_PARSER] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {file_path}: {e}")
            return {
                "success": False,
                "error": str(e),
                "file_path": str(file_path) if 'file_path' in locals() else None,
                "file_name": Path(file_path).name if 'file_path' in locals() else None
            }
    
    def parse_document_from_bytes(self, file_content: bytes, filename: str) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –±–∞–π—Ç–æ–≤
        
        Args:
            file_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            file_extension = Path(filename).suffix.lower()
            
            if file_extension not in self.supported_formats:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")
            
            # –ü–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
            if file_extension == '.pdf':
                result = self.pdf_extractor.extract_text_from_bytes(file_content)
            elif file_extension in ['.docx', '.doc']:
                result = self.docx_extractor.extract_text_from_bytes(file_content)
            elif file_extension == '.txt':
                result = self._parse_txt_bytes(file_content)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            result.update({
                "file_name": filename,
                "file_extension": file_extension,
                "file_size": len(file_content)
            })
            
            # –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if self.create_hierarchical_chunks and result.get("success", False):
                text = result.get("text", "")
                if text:
                    chunks = self.text_processor.hierarchical_chunking(text)
                    result["chunks"] = [
                        {
                            "chunk_id": chunk.chunk_id,
                            "text": chunk.content,
                            "hierarchy": chunk.hierarchy,
                            "metadata": chunk.metadata
                        }
                        for chunk in chunks
                    ]
            
            logger.info(f"üìÑ [DOCUMENT_PARSER] –î–æ–∫—É–º–µ–Ω—Ç {filename} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–∑ –±–∞–π—Ç–æ–≤")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå [DOCUMENT_PARSER] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {filename} –∏–∑ –±–∞–π—Ç–æ–≤: {e}")
            return {
                "success": False,
                "error": str(e),
                "file_name": filename
            }
    
    def _parse_pdf(self, file_path: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ PDF —Ñ–∞–π–ª–∞"""
        try:
            result = self.pdf_extractor.extract_text_from_file(file_path)
            
            # –û—á–∏—â–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            if result.get("success", False) and result.get("text"):
                cleaned_text = self.text_processor.clean_text(result["text"])
                result["text"] = cleaned_text
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ—á–∏—â–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                if "pages" in result:
                    for page in result["pages"]:
                        if "text" in page:
                            page["text"] = self.text_processor.clean_text(page["text"])
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå [PDF_PARSE] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF {file_path}: {e}")
            return {
                "success": False,
                "error": str(e),
                "method": "pdf"
            }
    
    def _parse_docx(self, file_path: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ DOCX —Ñ–∞–π–ª–∞"""
        try:
            result = self.docx_extractor.extract_text_from_file(file_path)
            
            # –û—á–∏—â–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            if result.get("success", False) and result.get("text"):
                cleaned_text = self.text_processor.clean_text(result["text"])
                result["text"] = cleaned_text
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å –æ—á–∏—â–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                if "paragraphs" in result:
                    for para in result["paragraphs"]:
                        if "text" in para:
                            para["text"] = self.text_processor.clean_text(para["text"])
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå [DOCX_PARSE] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ DOCX {file_path}: {e}")
            return {
                "success": False,
                "error": str(e),
                "method": "docx"
            }
    
    def _parse_txt(self, file_path: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ TXT —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                text = file.read()
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
            cleaned_text = self.text_processor.clean_text(text)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ —É –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            result = {
                "success": True,
                "text": cleaned_text,
                "pages": [{
                    "page_number": 1,
                    "text": cleaned_text,
                    "char_count": len(cleaned_text),
                    "word_count": len(cleaned_text.split())
                }],
                "method": "txt",
                "metadata": {
                    "total_chars": len(cleaned_text),
                    "total_words": len(cleaned_text.split()),
                    "language": self.text_processor.detect_language(cleaned_text)
                }
            }
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå [TXT_PARSE] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ TXT {file_path}: {e}")
            return {
                "success": False,
                "error": str(e),
                "method": "txt"
            }
    
    def _parse_txt_bytes(self, file_content: bytes) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ TXT —Ñ–∞–π–ª–∞ –∏–∑ –±–∞–π—Ç–æ–≤"""
        try:
            text = file_content.decode('utf-8')
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
            cleaned_text = self.text_processor.clean_text(text)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ —É –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            result = {
                "success": True,
                "text": cleaned_text,
                "pages": [{
                    "page_number": 1,
                    "text": cleaned_text,
                    "char_count": len(cleaned_text),
                    "word_count": len(cleaned_text.split())
                }],
                "method": "txt",
                "metadata": {
                    "total_chars": len(cleaned_text),
                    "total_words": len(cleaned_text.split()),
                    "language": self.text_processor.detect_language(cleaned_text)
                }
            }
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå [TXT_PARSE_BYTES] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ TXT –∏–∑ –±–∞–π—Ç–æ–≤: {e}")
            return {
                "success": False,
                "error": str(e),
                "method": "txt"
            }
    
    def get_supported_formats(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤
        """
        return list(self.supported_formats.keys())
    
    def get_text_statistics(self, text: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        return self.text_processor.get_text_statistics(text)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def parse_document(file_path: str, 
                  prefer_pdfminer: bool = True,
                  extract_tables: bool = True,
                  extract_headers: bool = True,
                  create_hierarchical_chunks: bool = True) -> Dict[str, Any]:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        prefer_pdfminer: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å pdfminer –¥–ª—è PDF
        extract_tables: –ò–∑–≤–ª–µ–∫–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –∏–∑ DOCX
        extract_headers: –ò–∑–≤–ª–µ–∫–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
        create_hierarchical_chunks: –°–æ–∑–¥–∞–≤–∞—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ —á–∞–Ω–∫–∏
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    parser = UniversalDocumentParser(
        prefer_pdfminer=prefer_pdfminer,
        extract_tables=extract_tables,
        extract_headers=extract_headers,
        create_hierarchical_chunks=create_hierarchical_chunks
    )
    return parser.parse_document(file_path)


def parse_document_from_bytes(file_content: bytes, 
                            filename: str,
                            prefer_pdfminer: bool = True,
                            extract_tables: bool = True,
                            extract_headers: bool = True,
                            create_hierarchical_chunks: bool = True) -> Dict[str, Any]:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –±–∞–π—Ç–æ–≤ (—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    
    Args:
        file_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
        filename: –ò–º—è —Ñ–∞–π–ª–∞
        prefer_pdfminer: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å pdfminer –¥–ª—è PDF
        extract_tables: –ò–∑–≤–ª–µ–∫–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –∏–∑ DOCX
        extract_headers: –ò–∑–≤–ª–µ–∫–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
        create_hierarchical_chunks: –°–æ–∑–¥–∞–≤–∞—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ —á–∞–Ω–∫–∏
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    parser = UniversalDocumentParser(
        prefer_pdfminer=prefer_pdfminer,
        extract_tables=extract_tables,
        extract_headers=extract_headers,
        create_hierarchical_chunks=create_hierarchical_chunks
    )
    return parser.parse_document_from_bytes(file_content, filename)
