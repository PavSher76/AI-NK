"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å calculation_service (—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""
import os
import sys
import time
import logging
import asyncio
import signal
from datetime import datetime
from typing import List, Dict, Any, Optional
from contextlib import asynccontextmanager

import qdrant_client
from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, Response
from fastapi.security import OAuth2PasswordRequestForm
import uvicorn

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import (
    HOST, PORT, DEBUG, CORS_ORIGINS, LOG_LEVEL, LOG_FORMAT, LOG_FILE,
    QDRANT_URL, QDRANT_API_KEY
)
from models import (
    CalculationCreate, CalculationResponse, CalculationUpdate, CalculationExecute,
    HealthResponse, ErrorResponse
)
from auth import auth_service, get_current_active_user
from database import db_manager
from calculations import calculation_engine
from utils.calculation_docx_generator import CalculationDOCXGenerator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL.upper()),
    format=LOG_FORMAT,
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(LOG_FILE)
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º startup_time
startup_time = datetime.now()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è graceful shutdown
shutdown_event = asyncio.Event()
is_shutting_down = False


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global startup_time
    startup_time = datetime.now()
    logger.info("üöÄ Calculation service starting up...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Qdrant –∫–ª–∏–µ–Ω—Ç–∞
    try:
        qdrant_client.QdrantClient(
            url=QDRANT_URL,
            api_key=QDRANT_API_KEY
        )
        logger.info("‚úÖ Qdrant client initialized")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Qdrant client initialization failed: {e}")
    
    yield
    
    # Graceful shutdown
    global is_shutting_down
    is_shutting_down = True
    shutdown_event.set()
    logger.info("üõë Calculation service shutting down...")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Calculation Service",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤",
    version="1.0.0",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request, call_next):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    request_id = f"req_{int(time.time() * 1000)}"
    logger.info(f"üîç [REQUEST] {request_id}: {request.method} {request.url.path}")
    
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    
    logger.info(f"üîç [RESPONSE] {request_id}: {response.status_code} ({process_time:.3f}s)")
    return response


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    global is_shutting_down
    is_shutting_down = True
    shutdown_event.set()
    logger.info(f"üõë Received signal {signum}, initiating graceful shutdown...")


signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)


# Health check endpoint
@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        import psutil
        process = psutil.Process()
        memory_info = process.memory_info()
        logger.debug(f"üîç [HEALTH] Memory check: RSS: {memory_info.rss/1024/1024:.1f}MB, VMS: {memory_info.vms/1024/1024:.1f}MB")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
        try:
            with db_manager.get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute("SELECT 1")
            logger.debug("üîç [HEALTH] PostgreSQL check: healthy")
        except Exception as e:
            logger.error(f"üîç [HEALTH] PostgreSQL check failed: {e}")
            raise HTTPException(status_code=503, detail="Database connection failed")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Qdrant
        try:
            client = qdrant_client.QdrantClient(url=QDRANT_URL, api_key=QDRANT_API_KEY)
            client.get_collections()
            logger.debug("üîç [HEALTH] Qdrant check: healthy")
        except Exception as e:
            logger.warning(f"üîç [HEALTH] Qdrant check failed: {e}")
        
        uptime = (datetime.now() - startup_time).total_seconds()
        logger.debug(f"üîç [HEALTH] Health check passed in {time.time() - time.time():.3f}s")
        
        return HealthResponse(
            status="healthy",
            timestamp=datetime.now(),
            uptime=uptime,
            version="1.0.0",
            services={
                "database": "healthy",
                "qdrant": "healthy" if QDRANT_URL else "disabled"
            }
        )
        
    except Exception as e:
        logger.error(f"üîç [HEALTH] Health check failed: {e}")
        raise HTTPException(status_code=503, detail="Health check failed")


# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
@app.post("/token")
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")

    logger.info(f"üîç [AUTH] Login attempt for user: {form_data.username}")
    
    try:
        user = auth_service.authenticate_user(form_data.username, form_data.password)
        if not user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Incorrect username or password",
                headers={"WWW-Authenticate": "Bearer"},
            )
        
        from datetime import timedelta
        access_token_expires = timedelta(minutes=auth_service.access_token_expire_minutes)
        access_token = auth_service.create_access_token(
            data={"sub": user.username, "user_id": user.id, "role": user.role},
            expires_delta=access_token_expires
        )
        
        logger.info(f"üîç [AUTH] Successful login for user: {user.username}")
        return {
            "access_token": access_token,
            "token_type": "bearer",
            "user": {
                "id": user.id,
                "username": user.username,
                "email": user.email,
                "role": user.role
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üîç [AUTH] Login error: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


@app.get("/me")
async def read_users_me(current_user = Depends(get_current_active_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    return {
        "id": current_user.id,
        "username": current_user.username,
        "email": current_user.email,
        "role": current_user.role,
        "permissions": current_user.permissions
    }


# CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏
@app.post("/calculations", response_model=CalculationResponse)
async def create_calculation(
    calculation: CalculationCreate
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        calculation_id = db_manager.create_calculation(calculation, user_id=1)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π user_id –¥–ª—è –¥–µ–º–æ
        created_calculation = db_manager.get_calculation(calculation_id)
        
        logger.info(f"‚úÖ Calculation created: {calculation_id}")
        return created_calculation
        
    except Exception as e:
        logger.error(f"‚ùå Error creating calculation: {e}")
        raise HTTPException(status_code=500, detail="Failed to create calculation")


@app.get("/calculations", response_model=List[CalculationResponse])
async def get_calculations(
    calculation_type: Optional[str] = None,
    category: Optional[str] = None,
    limit: int = 100,
    offset: int = 0
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        calculations = db_manager.get_calculations(
            user_id=1,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π user_id –¥–ª—è –¥–µ–º–æ
            calculation_type=calculation_type,
            category=category,
            limit=limit,
            offset=offset
        )
        return calculations
        
    except Exception as e:
        logger.error(f"‚ùå Error getting calculations: {e}")
        raise HTTPException(status_code=500, detail="Failed to get calculations")


@app.get("/calculations/{calculation_id}", response_model=CalculationResponse)
async def get_calculation(
    calculation_id: int
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ ID"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        calculation = db_manager.get_calculation(calculation_id)
        if not calculation:
            raise HTTPException(status_code=404, detail="Calculation not found")
        
        return calculation
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error getting calculation {calculation_id}: {e}")
        raise HTTPException(status_code=500, detail="Failed to get calculation")


@app.put("/calculations/{calculation_id}", response_model=CalculationResponse)
async def update_calculation(
    calculation_id: int,
    calculation_update: CalculationUpdate
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        updated_calculation = db_manager.update_calculation(calculation_id, calculation_update)
        if not updated_calculation:
            raise HTTPException(status_code=404, detail="Calculation not found")
        
        logger.info(f"‚úÖ Calculation updated: {calculation_id}")
        return updated_calculation
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error updating calculation {calculation_id}: {e}")
        raise HTTPException(status_code=500, detail="Failed to update calculation")


@app.delete("/calculations/{calculation_id}")
async def delete_calculation(
    calculation_id: int
):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        success = db_manager.delete_calculation(calculation_id)
        if not success:
            raise HTTPException(status_code=404, detail="Calculation not found")
        
        logger.info(f"‚úÖ Calculation deleted: {calculation_id}")
        return {"message": "Calculation deleted successfully"}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error deleting calculation {calculation_id}: {e}")
        raise HTTPException(status_code=500, detail="Failed to delete calculation")


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
@app.get("/calculations/structural/types")
async def get_structural_calculation_types():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        return calculation_engine.get_calculation_types()
        
    except Exception as e:
        logger.error(f"‚ùå Error getting calculation types: {e}")
        raise HTTPException(status_code=500, detail="Failed to get calculation types")


# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)
@app.post("/calculations/structural/execute")
async def execute_structural_calculation(
    calculation_data: dict
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        calculation_type = calculation_data.get("calculation_type")
        parameters = calculation_data.get("parameters", {})
        
        if not calculation_type:
            raise HTTPException(status_code=400, detail="calculation_type is required")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –¥–≤–∏–∂–æ–∫
        results = calculation_engine.execute_calculation_by_type(calculation_type, parameters)
        return results
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error executing structural calculation: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to execute structural calculation: {str(e)}")


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–µ–≥–∞–∑–∞—Ü–∏–∏
@app.get("/calculations/degasification/types")
async def get_degasification_calculation_types():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–µ–≥–∞–∑–∞—Ü–∏–∏"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        return calculation_engine.get_calculation_types()
        
    except Exception as e:
        logger.error(f"‚ùå Error getting degasification calculation types: {e}")
        raise HTTPException(status_code=500, detail="Failed to get degasification calculation types")


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
@app.get("/calculations/electrical/types")
async def get_electrical_calculation_types():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        return calculation_engine.get_calculation_types()
        
    except Exception as e:
        logger.error(f"‚ùå Error getting electrical calculation types: {e}")
        raise HTTPException(status_code=500, detail="Failed to get electrical calculation types")


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö —Ç–µ–ø–ª–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
@app.get("/calculations/thermal/types")
async def get_thermal_calculation_types():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ–ø–ª–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        return calculation_engine.get_calculation_types()
        
    except Exception as e:
        logger.error(f"‚ùå Error getting thermal calculation types: {e}")
        raise HTTPException(status_code=500, detail="Failed to get thermal calculation types")


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
@app.get("/calculations/ventilation/types")
async def get_ventilation_calculation_types():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        return calculation_engine.get_calculation_types()
        
    except Exception as e:
        logger.error(f"‚ùå Error getting ventilation calculation types: {e}")
        raise HTTPException(status_code=500, detail="Failed to get ventilation calculation types")


# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–µ–≥–∞–∑–∞—Ü–∏–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)
@app.post("/calculations/degasification/execute")
async def execute_degasification_calculation(
    calculation_data: dict
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –¥–µ–≥–∞–∑–∞—Ü–∏–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        calculation_type = calculation_data.get("calculation_type")
        parameters = calculation_data.get("parameters", {})
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
        results = calculation_engine.execute_calculation_by_type(calculation_type, parameters)
        
        logger.info(f"‚úÖ Degasification calculation executed successfully")
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Error executing degasification calculation: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to execute degasification calculation: {str(e)}")


# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)
@app.post("/calculations/electrical/execute")
async def execute_electrical_calculation(
    calculation_data: dict
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        calculation_type = calculation_data.get("calculation_type")
        parameters = calculation_data.get("parameters", {})
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
        results = calculation_engine.execute_calculation_by_type(calculation_type, parameters)
        
        logger.info(f"‚úÖ Electrical calculation executed successfully")
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Error executing electrical calculation: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to execute electrical calculation: {str(e)}")


# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–ø–ª–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)
@app.post("/calculations/thermal/execute")
async def execute_thermal_calculation(
    calculation_data: dict
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–ø–ª–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        calculation_type = calculation_data.get("calculation_type")
        parameters = calculation_data.get("parameters", {})
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
        results = calculation_engine.execute_calculation_by_type(calculation_type, parameters)
        
        logger.info(f"‚úÖ Thermal calculation executed successfully")
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Error executing thermal calculation: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to execute thermal calculation: {str(e)}")


# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)
@app.post("/calculations/ventilation/execute")
async def execute_ventilation_calculation(
    calculation_data: dict
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        calculation_type = calculation_data.get("calculation_type")
        parameters = calculation_data.get("parameters", {})
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
        results = calculation_engine.execute_calculation_by_type(calculation_type, parameters)
        
        logger.info(f"‚úÖ Ventilation calculation executed successfully")
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Error executing ventilation calculation: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to execute ventilation calculation: {str(e)}")


# –û–±—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–æ —Ç–∏–ø—É
@app.post("/calculations/{calculation_type}/execute")
async def execute_calculation_by_type_endpoint(
    calculation_type: str,
    calculation_data: dict
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ —Ç–∏–ø—É"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        parameters = calculation_data.get("parameters", {})
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
        results = calculation_engine.execute_calculation_by_type(calculation_type, parameters)
        
        logger.info(f"‚úÖ {calculation_type} calculation executed successfully")
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Error executing {calculation_type} calculation: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to execute {calculation_type} calculation: {str(e)}")


# –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ DOCX
@app.get("/calculations/{calculation_id}/export-docx")
async def export_calculation_docx(
    calculation_id: int
):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DOCX"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        calculation = db_manager.get_calculation(calculation_id)
        if not calculation:
            raise HTTPException(status_code=404, detail="Calculation not found")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è DOCX
        docx_generator = CalculationDOCXGenerator()
        docx_content = docx_generator.generate_calculation_report(calculation)
        
        # –í–æ–∑–≤—Ä–∞—Ç —Ñ–∞–π–ª–∞
        return Response(
            content=docx_content,
            media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            headers={"Content-Disposition": f"attachment; filename=calculation_{calculation_id}.docx"}
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error exporting calculation {calculation_id} to DOCX: {e}")
        raise HTTPException(status_code=500, detail="Failed to export calculation")


# –ú–µ—Ç—Ä–∏–∫–∏
@app.get("/metrics")
async def get_metrics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–∏—Å–∞"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        stats = db_manager.get_calculation_stats()
        uptime = (datetime.now() - startup_time).total_seconds()
        
        return {
            "uptime_seconds": uptime,
            "calculations": stats,
            "service_status": "running" if not is_shutting_down else "shutting_down"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error getting metrics: {e}")
        raise HTTPException(status_code=500, detail="Failed to get metrics")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"‚ùå Unhandled exception: {exc}")
    return JSONResponse(
        status_code=500,
        content=ErrorResponse(
            detail="Internal server error",
            error_code="INTERNAL_ERROR"
        ).dict()
    )


# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤ (–æ–±—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ)
@app.post("/calculations/{calculation_id}/execute")
async def execute_calculation(
    calculation_id: int,
    calculation_execute: CalculationExecute
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        logger.info(f"üîç [DEBUG] Executing calculation {calculation_id} with parameters: {calculation_execute.parameters}")
        logger.info(f"üîç [DEBUG] calculation_execute object: {calculation_execute}")
        logger.info(f"üîç [DEBUG] calculation_execute.parameters: {calculation_execute.parameters}")
        results = calculation_engine.execute_calculation(calculation_id, calculation_execute.parameters)
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Error executing calculation {calculation_id}: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to execute {calculation_id} calculation: {str(e)}")


# ===== –í–û–î–û–°–ù–ê–ë–ñ–ï–ù–ò–ï –ò –í–û–î–û–û–¢–í–ï–î–ï–ù–ò–ï =====

@app.get("/calculations/water_supply/types")
async def get_water_supply_calculation_types():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        return calculation_engine.get_calculation_types()
        
    except Exception as e:
        logger.error(f"‚ùå Error getting water supply calculation types: {e}")
        raise HTTPException(status_code=500, detail="Failed to get water supply calculation types")

@app.post("/calculations/water_supply/execute")
async def execute_water_supply_calculation(
    calculation_data: dict
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        calculation_type = calculation_data.get("calculation_type")
        parameters = calculation_data.get("parameters", {})
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
        results = calculation_engine.execute_calculation_by_type(calculation_type, parameters)
        
        logger.info(f"‚úÖ Water supply calculation executed successfully")
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Error executing water supply calculation: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to execute water supply calculation: {str(e)}")


# ===== –ü–û–ñ–ê–†–ù–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ =====

@app.get("/calculations/fire_safety/types")
async def get_fire_safety_calculation_types():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        return calculation_engine.get_calculation_types()
        
    except Exception as e:
        logger.error(f"‚ùå Error getting fire safety calculation types: {e}")
        raise HTTPException(status_code=500, detail="Failed to get fire safety calculation types")

@app.post("/calculations/fire_safety/execute")
async def execute_fire_safety_calculation(
    calculation_data: dict
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        calculation_type = calculation_data.get("calculation_type")
        parameters = calculation_data.get("parameters", {})
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
        results = calculation_engine.execute_calculation_by_type(calculation_type, parameters)
        
        logger.info(f"‚úÖ Fire safety calculation executed successfully")
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Error executing fire safety calculation: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to execute fire safety calculation: {str(e)}")


# ===== –ê–ö–£–°–¢–ò–ß–ï–°–ö–ò–ï –†–ê–°–ß–ï–¢–´ =====

@app.get("/calculations/acoustic/types")
async def get_acoustic_calculation_types():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        return calculation_engine.get_calculation_types()
        
    except Exception as e:
        logger.error(f"‚ùå Error getting acoustic calculation types: {e}")
        raise HTTPException(status_code=500, detail="Failed to get acoustic calculation types")

@app.post("/calculations/acoustic/execute")
async def execute_acoustic_calculation(
    calculation_data: dict
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        calculation_type = calculation_data.get("calculation_type")
        parameters = calculation_data.get("parameters", {})
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
        results = calculation_engine.execute_calculation_by_type(calculation_type, parameters)
        
        logger.info(f"‚úÖ Acoustic calculation executed successfully")
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Error executing acoustic calculation: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to execute acoustic calculation: {str(e)}")


# ===== –û–°–í–ï–©–ï–ù–ò–ï –ò –ò–ù–°–û–õ–Ø–¶–ò–Ø =====

@app.get("/calculations/lighting/types")
async def get_lighting_calculation_types():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ –æ—Å–≤–µ—â–µ–Ω–∏—è"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        return calculation_engine.get_calculation_types()
        
    except Exception as e:
        logger.error(f"‚ùå Error getting lighting calculation types: {e}")
        raise HTTPException(status_code=500, detail="Failed to get lighting calculation types")

@app.post("/calculations/lighting/execute")
async def execute_lighting_calculation(
    calculation_data: dict
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        calculation_type = calculation_data.get("calculation_type")
        parameters = calculation_data.get("parameters", {})
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
        results = calculation_engine.execute_calculation_by_type(calculation_type, parameters)
        
        logger.info(f"‚úÖ Lighting calculation executed successfully")
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Error executing lighting calculation: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to execute lighting calculation: {str(e)}")


# ===== –ò–ù–ñ–ï–ù–ï–†–ù–û-–ì–ï–û–õ–û–ì–ò–ß–ï–°–ö–ò–ï –†–ê–°–ß–ï–¢–´ =====

@app.get("/calculations/geological/types")
async def get_geological_calculation_types():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ-–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        return calculation_engine.get_calculation_types()
        
    except Exception as e:
        logger.error(f"‚ùå Error getting geological calculation types: {e}")
        raise HTTPException(status_code=500, detail="Failed to get geological calculation types")

@app.post("/calculations/geological/execute")
async def execute_geological_calculation(
    calculation_data: dict
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ-–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        calculation_type = calculation_data.get("calculation_type")
        parameters = calculation_data.get("parameters", {})
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
        results = calculation_engine.execute_calculation_by_type(calculation_type, parameters)
        
        logger.info(f"‚úÖ Geological calculation executed successfully")
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Error executing geological calculation: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to execute geological calculation: {str(e)}")


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ –∑–∞—â–∏—Ç—ã –æ—Ç –ë–ü–õ–ê
@app.get("/calculations/uav_protection/types")
async def get_uav_protection_calculation_types():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ –∑–∞—â–∏—Ç—ã –æ—Ç –ë–ü–õ–ê"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        types = calculation_engine.get_calculation_types()
        uav_types = [t for t in types if t.type == "uav_protection"]
        return {"types": [t.dict() for t in uav_types]}
        
    except Exception as e:
        logger.error(f"‚ùå Error getting UAV protection calculation types: {e}")
        raise HTTPException(status_code=500, detail="Failed to get UAV protection calculation types")

@app.post("/calculations/uav_protection/execute")
async def execute_uav_protection_calculation(
    calculation_data: dict
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ë–ü–õ–ê (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)"""
    if is_shutting_down:
        raise HTTPException(status_code=503, detail="Service is shutting down")
    
    try:
        calculation_type = calculation_data.get("calculation_type")
        parameters = calculation_data.get("parameters", {})
        
        logger.info(f"üîç [DEBUG] Executing UAV protection calculation: {calculation_type}")
        logger.info(f"üîç [DEBUG] Parameters: {parameters}")
        
        results = calculation_engine.execute_calculation_by_type("uav_protection", parameters)
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Error executing UAV protection calculation: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to execute UAV protection calculation: {str(e)}")


if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host=HOST,
        port=PORT,
        reload=DEBUG,
        log_level=LOG_LEVEL.lower()
    )
