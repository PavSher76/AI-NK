#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–∞ —Å –≤–∏–¥–∞–º–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
"""

import pandas as pd
import json
import os
from typing import List, Dict, Any

def parse_structural_calculations():
    """–ü–∞—Ä—Å–∏–Ω–≥ –≤–∏–¥–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    file_path = "Docs_templates/–í–∏–¥—ã_—Ä–∞—Å—á–µ—Ç–æ–≤_—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö_–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π_—Å_–≤–≤–æ–¥–æ–º.xlsx"
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return []
    
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        print(f"üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: {file_path}")
        
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ –ª–∏—Å—Ç—ã
        excel_file = pd.ExcelFile(file_path)
        print(f"üìä –ù–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã: {excel_file.sheet_names}")
        
        calculation_types = []
        
        for sheet_name in excel_file.sheet_names:
            print(f"\nüìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: {sheet_name}")
            
            # –ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç
            df = pd.read_excel(file_path, sheet_name=sheet_name)
            print(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {df.shape}")
            print(f"üìä –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
            print(f"üìä –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏:")
            print(df.head())
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if not df.empty:
                # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ä–∞—Å—á–µ—Ç–æ–≤
                name_columns = [col for col in df.columns if any(keyword in str(col).lower() 
                                                               for keyword in ['–Ω–∞–∑–≤–∞–Ω–∏–µ', '–≤–∏–¥', '—Ç–∏–ø', '—Ä–∞—Å—á–µ—Ç'])]
                
                if name_columns:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏: {name_columns}")
                    
                    for idx, row in df.iterrows():
                        # –ò—â–µ–º –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
                        for col in name_columns:
                            value = row[col]
                            if pd.notna(value) and str(value).strip():
                                calculation_type = {
                                    "id": f"structural_{sheet_name}_{idx}",
                                    "name": str(value).strip(),
                                    "category": "construction",
                                    "subcategory": sheet_name,
                                    "description": f"–†–∞—Å—á–µ—Ç {str(value).strip()}",
                                    "norms": ["–°–ü 20.13330.2016", "–°–ü 16.13330.2017", "–°–ü 63.13330.2018"],
                                    "icon": "üèóÔ∏è",
                                    "parameters": {},
                                    "formula": "",
                                    "units": {}
                                }
                                
                                # –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
                                for col_name in df.columns:
                                    if col_name != col and pd.notna(row[col_name]):
                                        param_value = row[col_name]
                                        if isinstance(param_value, (int, float, str)):
                                            calculation_type["parameters"][str(col_name)] = param_value
                                
                                calculation_types.append(calculation_type)
                                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—á–µ—Ç: {calculation_type['name']}")
                
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É
                    first_col = df.columns[0]
                    print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É: {first_col}")
                    
                    for idx, row in df.iterrows():
                        value = row[first_col]
                        if pd.notna(value) and str(value).strip():
                            calculation_type = {
                                "id": f"structural_{sheet_name}_{idx}",
                                "name": str(value).strip(),
                                "category": "construction",
                                "subcategory": sheet_name,
                                "description": f"–†–∞—Å—á–µ—Ç {str(value).strip()}",
                                "norms": ["–°–ü 20.13330.2016", "–°–ü 16.13330.2017", "–°–ü 63.13330.2018"],
                                "icon": "üèóÔ∏è",
                                "parameters": {},
                                "formula": "",
                                "units": {}
                            }
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                            for col_name in df.columns[1:]:
                                if pd.notna(row[col_name]):
                                    param_value = row[col_name]
                                    if isinstance(param_value, (int, float, str)):
                                        calculation_type["parameters"][str(col_name)] = param_value
                            
                            calculation_types.append(calculation_type)
                            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—á–µ—Ç: {calculation_type['name']}")
        
        print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤: {len(calculation_types)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
        output_file = "structural_calculation_types.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(calculation_types, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
        
        return calculation_types
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞: {e}")
        import traceback
        traceback.print_exc()
        return []

def create_calculation_templates():
    """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    
    calculation_types = parse_structural_calculations()
    
    if not calculation_types:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥—ã —Ä–∞—Å—á–µ—Ç–æ–≤")
        return
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞—Å—á–µ—Ç–∞
    templates = {}
    
    for calc_type in calculation_types:
        template = {
            "id": calc_type["id"],
            "name": calc_type["name"],
            "category": calc_type["category"],
            "subcategory": calc_type["subcategory"],
            "description": calc_type["description"],
            "norms": calc_type["norms"],
            "icon": calc_type["icon"],
            "input_fields": [
                {
                    "name": "material_strength",
                    "label": "–†–∞—Å—á–µ—Ç–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –ú–ü–∞",
                    "type": "number",
                    "required": True,
                    "default": 235,
                    "unit": "–ú–ü–∞"
                },
                {
                    "name": "section_area",
                    "label": "–ü–ª–æ—â–∞–¥—å —Å–µ—á–µ–Ω–∏—è, —Å–º¬≤",
                    "type": "number",
                    "required": True,
                    "default": 100,
                    "unit": "—Å–º¬≤"
                },
                {
                    "name": "load_value",
                    "label": "–†–∞—Å—á–µ—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞, –∫–ù",
                    "type": "number",
                    "required": True,
                    "default": 100,
                    "unit": "–∫–ù"
                },
                {
                    "name": "safety_factor",
                    "label": "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏",
                    "type": "number",
                    "required": False,
                    "default": 1.1,
                    "unit": ""
                }
            ],
            "output_fields": [
                {
                    "name": "stress",
                    "label": "–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ",
                    "unit": "–ú–ü–∞",
                    "formula": "load_value * 1000 / section_area"
                },
                {
                    "name": "utilization_ratio",
                    "label": "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                    "unit": "%",
                    "formula": "(stress / material_strength) * 100"
                },
                {
                    "name": "safety_margin",
                    "label": "–ó–∞–ø–∞—Å –ø—Ä–æ—á–Ω–æ—Å—Ç–∏",
                    "unit": "",
                    "formula": "material_strength / stress"
                }
            ],
            "formulas": {
                "stress": "load_value * 1000 / section_area",
                "utilization_ratio": "(stress / material_strength) * 100",
                "safety_margin": "material_strength / stress"
            },
            "validation_rules": [
                {
                    "field": "material_strength",
                    "rule": "min",
                    "value": 100,
                    "message": "–†–∞—Å—á–µ—Ç–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 100 –ú–ü–∞"
                },
                {
                    "field": "section_area",
                    "rule": "min",
                    "value": 1,
                    "message": "–ü–ª–æ—â–∞–¥—å —Å–µ—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"
                },
                {
                    "field": "load_value",
                    "rule": "min",
                    "value": 0,
                    "message": "–ù–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"
                }
            ]
        }
        
        templates[calc_type["id"]] = template
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã
    output_file = "calculation_templates.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(templates, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ –®–∞–±–ª–æ–Ω—ã —Ä–∞—Å—á–µ—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∏–¥–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
    create_calculation_templates()
    print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
