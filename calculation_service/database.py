"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""
import logging
import json
import psycopg2
from psycopg2.extras import RealDictCursor
from contextlib import contextmanager
from typing import List, Dict, Any, Optional
from datetime import datetime

from config import DATABASE_URL
from models import CalculationCreate, CalculationResponse, CalculationUpdate

logger = logging.getLogger(__name__)


class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.database_url = DATABASE_URL
        self._init_database()
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS calculations (
                            id SERIAL PRIMARY KEY,
                            name VARCHAR(255) NOT NULL,
                            description TEXT,
                            type VARCHAR(100) NOT NULL,
                            category VARCHAR(100) NOT NULL,
                            parameters JSONB,
                            results JSONB,
                            status VARCHAR(50) DEFAULT 'created',
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            user_id INTEGER
                        )
                    """)
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ user_id, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    cursor.execute("""
                        ALTER TABLE calculations 
                        ADD COLUMN IF NOT EXISTS user_id INTEGER
                    """)
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ created_by, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    cursor.execute("""
                        ALTER TABLE calculations 
                        ADD COLUMN IF NOT EXISTS created_by INTEGER
                    """)
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
                    cursor.execute("""
                        CREATE INDEX IF NOT EXISTS idx_calculations_type 
                        ON calculations(type)
                    """)
                    
                    cursor.execute("""
                        CREATE INDEX IF NOT EXISTS idx_calculations_category 
                        ON calculations(category)
                    """)
                    
                    cursor.execute("""
                        CREATE INDEX IF NOT EXISTS idx_calculations_user_id 
                        ON calculations(user_id)
                    """)
                    
                    conn.commit()
                    logger.info("‚úÖ Database initialized successfully")
                    
        except Exception as e:
            logger.error(f"‚ùå Database initialization failed: {e}")
            raise
    
    @contextmanager
    def get_connection(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        conn = None
        try:
            conn = psycopg2.connect(self.database_url)
            yield conn
        except Exception as e:
            if conn:
                conn.rollback()
            logger.error(f"‚ùå Database connection error: {e}")
            raise
        finally:
            if conn:
                conn.close()
    
    @contextmanager
    def get_cursor(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞"""
        with self.get_connection() as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cursor:
                yield cursor
    
    def create_calculation(self, calculation: CalculationCreate, user_id: Optional[int] = None) -> int:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"""
        try:
            with self.get_cursor() as cursor:
                cursor.execute("""
                    INSERT INTO calculations (name, description, type, category, parameters, user_id, created_by)
                    VALUES (%(name)s, %(description)s, %(type)s, %(category)s, %(parameters)s, %(user_id)s, %(created_by)s)
                    RETURNING id
                """, {
                    'name': calculation.name,
                    'description': calculation.description,
                    'type': calculation.type,
                    'category': calculation.category,
                    'parameters': json.dumps(calculation.parameters) if calculation.parameters else None,
                    'user_id': user_id,
                    'created_by': user_id or 1  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–ª–∏ 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                })
                
                result = cursor.fetchone()
                calculation_id = result['id']
                
                cursor.connection.commit()
                logger.info(f"‚úÖ Calculation created with ID: {calculation_id}")
                return calculation_id
                
        except Exception as e:
            logger.error(f"‚ùå Error creating calculation: {e}")
            raise
    
    def get_calculation(self, calculation_id: int) -> Optional[CalculationResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ ID"""
        try:
            with self.get_cursor() as cursor:
                cursor.execute("""
                    SELECT * FROM calculations WHERE id = %s
                """, (calculation_id,))
                
                result = cursor.fetchone()
                if result:
                    logger.info(f"üîç [DEBUG] Database result: {result}")
                    calculation = CalculationResponse(**dict(result))
                    logger.info(f"üîç [DEBUG] CalculationResponse object: {calculation}")
                    logger.info(f"üîç [DEBUG] CalculationResponse type: {calculation.type}")
                    return calculation
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Error getting calculation {calculation_id}: {e}")
            raise
    
    def get_calculations(self, user_id: Optional[int] = None, 
                        calculation_type: Optional[str] = None,
                        category: Optional[str] = None,
                        limit: int = 100, offset: int = 0) -> List[CalculationResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤"""
        try:
            with self.get_cursor() as cursor:
                query = "SELECT * FROM calculations WHERE 1=1"
                params = []
                
                if user_id is not None:
                    query += " AND user_id = %s"
                    params.append(user_id)
                
                if calculation_type:
                    query += " AND type = %s"
                    params.append(calculation_type)
                
                if category:
                    query += " AND category = %s"
                    params.append(category)
                
                query += " ORDER BY created_at DESC LIMIT %s OFFSET %s"
                params.extend([limit, offset])
                
                cursor.execute(query, params)
                results = cursor.fetchall()
                
                return [CalculationResponse(**dict(row)) for row in results]
                
        except Exception as e:
            logger.error(f"‚ùå Error getting calculations: {e}")
            raise
    
    def update_calculation(self, calculation_id: int, 
                          calculation_update: CalculationUpdate) -> Optional[CalculationResponse]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞"""
        try:
            with self.get_cursor() as cursor:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                update_fields = []
                params = []
                
                if calculation_update.name is not None:
                    update_fields.append("name = %s")
                    params.append(calculation_update.name)
                
                if calculation_update.description is not None:
                    update_fields.append("description = %s")
                    params.append(calculation_update.description)
                
                if calculation_update.parameters is not None:
                    update_fields.append("parameters = %s")
                    params.append(json.dumps(calculation_update.parameters))
                
                if not update_fields:
                    return self.get_calculation(calculation_id)
                
                update_fields.append("updated_at = CURRENT_TIMESTAMP")
                params.append(calculation_id)
                
                query = f"""
                    UPDATE calculations 
                    SET {', '.join(update_fields)}
                    WHERE id = %s
                    RETURNING *
                """
                
                cursor.execute(query, params)
                result = cursor.fetchone()
                
                if result:
                    cursor.connection.commit()
                    return CalculationResponse(**dict(result))
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Error updating calculation {calculation_id}: {e}")
            raise
    
    def delete_calculation(self, calculation_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞"""
        try:
            with self.get_cursor() as cursor:
                cursor.execute("""
                    DELETE FROM calculations WHERE id = %s
                """, (calculation_id,))
                
                deleted_count = cursor.rowcount
                cursor.connection.commit()
                
                if deleted_count > 0:
                    logger.info(f"‚úÖ Calculation {calculation_id} deleted")
                    return True
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error deleting calculation {calculation_id}: {e}")
            raise
    
    def update_calculation_results(self, calculation_id: int, 
                                 results: Dict[str, Any], 
                                 status: str = "completed") -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞"""
        try:
            with self.get_cursor() as cursor:
                cursor.execute("""
                    UPDATE calculations 
                    SET result = %s, status = %s, updated_at = CURRENT_TIMESTAMP
                    WHERE id = %s
                """, (json.dumps(results), status, calculation_id))
                
                updated_count = cursor.rowcount
                cursor.connection.commit()
                
                if updated_count > 0:
                    logger.info(f"‚úÖ Calculation {calculation_id} results updated")
                    return True
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error updating calculation results {calculation_id}: {e}")
            raise
    
    def get_calculation_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–∞—Å—á–µ—Ç–∞–º"""
        try:
            with self.get_cursor() as cursor:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤
                cursor.execute("SELECT COUNT(*) as total FROM calculations")
                total = cursor.fetchone()['total']
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —Ç–∏–ø–∞–º
                cursor.execute("""
                    SELECT type, COUNT(*) as count 
                    FROM calculations 
                    GROUP BY type
                """)
                by_type = {row['type']: row['count'] for row in cursor.fetchall()}
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                cursor.execute("""
                    SELECT category, COUNT(*) as count 
                    FROM calculations 
                    GROUP BY category
                """)
                by_category = {row['category']: row['count'] for row in cursor.fetchall()}
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                cursor.execute("""
                    SELECT status, COUNT(*) as count 
                    FROM calculations 
                    GROUP BY status
                """)
                by_status = {row['status']: row['count'] for row in cursor.fetchall()}
                
                return {
                    'total': total,
                    'by_type': by_type,
                    'by_category': by_category,
                    'by_status': by_status
                }
                
        except Exception as e:
            logger.error(f"‚ùå Error getting calculation stats: {e}")
            raise


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_manager = DatabaseManager()
