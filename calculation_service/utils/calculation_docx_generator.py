import json
import logging
from datetime import datetime
from typing import Dict, Any, List
from docx import Document
from docx.shared import Inches, Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.table import WD_TABLE_ALIGNMENT

logger = logging.getLogger(__name__)

class CalculationDOCXGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä DOCX –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.document = None
        self.default_font = 'Times New Roman'
        self.bold_font = 'Times New Roman'
        
    def generate_calculation_report(self, calculation_data: Dict[str, Any]) -> bytes:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è DOCX –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞"""
        try:
            logger.info(f"üìÑ [DOCX_GENERATOR] Generating calculation report for: {calculation_data.get('name', 'Unknown')}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            self.document = Document()
            self._setup_styles()
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
            self._create_header(calculation_data)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—á–µ—Ç–µ
            self._create_calculation_info_section(calculation_data)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞
            self._create_parameters_section(calculation_data)
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞
            if calculation_data.get('results'):
                self._create_results_section(calculation_data)
            
            # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
            self._create_conclusion_section(calculation_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±—É—Ñ–µ—Ä
            from io import BytesIO
            buffer = BytesIO()
            self.document.save(buffer)
            buffer.seek(0)
            docx_content = buffer.getvalue()
            buffer.close()
            
            logger.info(f"üìÑ [DOCX_GENERATOR] Calculation report generated successfully, size: {len(docx_content)} bytes")
            return docx_content
            
        except Exception as e:
            logger.error(f"‚ùå [DOCX_GENERATOR] Error generating calculation report: {e}")
            raise
    
    def _setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        pass
    
    def _create_header(self, calculation_data: Dict[str, Any]):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = self.document.add_heading("–û–¢–ß–ï–¢ –û –ò–ù–ñ–ï–ù–ï–†–ù–û–ú –†–ê–°–ß–ï–¢–ï", 0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—á–µ—Ç–µ
        info_table = self.document.add_table(rows=6, cols=2)
        info_table.style = 'Table Grid'
        info_table.alignment = WD_TABLE_ALIGNMENT.CENTER
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        info_data = [
            ("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞:", calculation_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
            ("–¢–∏–ø —Ä–∞—Å—á–µ—Ç–∞:", self._get_calculation_type_name(calculation_data.get('type', ''))),
            ("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", self._get_calculation_category_name(calculation_data.get('category', ''))),
            ("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:", self._format_date(calculation_data.get('created_at'))),
            ("–ê–≤—Ç–æ—Ä:", calculation_data.get('author', '–ù–µ —É–∫–∞–∑–∞–Ω')),
            ("–°—Ç–∞—Ç—É—Å:", self._get_status_text(calculation_data.get('status', 'unknown')))
        ]
        
        for i, (label, value) in enumerate(info_data):
            info_table.cell(i, 0).text = label
            info_table.cell(i, 1).text = str(value)
            
            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
            info_table.cell(i, 0).paragraphs[0].runs[0].bold = True
            info_table.cell(i, 0).paragraphs[0].runs[0].font.name = self.bold_font
            info_table.cell(i, 1).paragraphs[0].runs[0].font.name = self.default_font
        
        self.document.add_paragraph()
    
    def _create_calculation_info_section(self, calculation_data: Dict[str, Any]):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å—á–µ—Ç–µ"""
        self.document.add_heading("1. –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ê–°–ß–ï–¢–ï", 1)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        if calculation_data.get('description'):
            desc_para = self.document.add_paragraph()
            desc_para.add_run("–û–ø–∏—Å–∞–Ω–∏–µ: ").bold = True
            desc_para.add_run(calculation_data['description'])
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º—ã–µ –Ω–æ—Ä–º—ã
        norms = self._get_applicable_norms(calculation_data.get('type', ''), calculation_data.get('category', ''))
        if norms:
            norms_para = self.document.add_paragraph()
            norms_para.add_run("–ü—Ä–∏–º–µ–Ω—è–µ–º—ã–µ –Ω–æ—Ä–º—ã: ").bold = True
            norms_para.add_run(", ".join(norms))
        
        # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if calculation_data.get('execution_time'):
            time_para = self.document.add_paragraph()
            time_para.add_run("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ").bold = True
            time_para.add_run(f"{calculation_data['execution_time']:.3f} —Å–µ–∫—É–Ω–¥")
        
        self.document.add_paragraph()
    
    def _create_parameters_section(self, calculation_data: Dict[str, Any]):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞"""
        self.document.add_heading("2. –ü–ê–†–ê–ú–ï–¢–†–´ –†–ê–°–ß–ï–¢–ê", 1)
        
        parameters = calculation_data.get('parameters', {})
        if not parameters:
            self.document.add_paragraph("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã.")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params_table = self.document.add_table(rows=len(parameters) + 1, cols=3)
        params_table.style = 'Table Grid'
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        header_cells = params_table.rows[0].cells
        header_cells[0].text = "–ü–∞—Ä–∞–º–µ—Ç—Ä"
        header_cells[1].text = "–ó–Ω–∞—á–µ–Ω–∏–µ"
        header_cells[2].text = "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è"
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for cell in header_cells:
            cell.paragraphs[0].runs[0].bold = True
            cell.paragraphs[0].runs[0].font.name = self.bold_font
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        for i, (param_name, param_value) in enumerate(parameters.items(), 1):
            row = params_table.rows[i]
            row.cells[0].text = self._format_parameter_name(param_name)
            row.cells[1].text = str(param_value)
            row.cells[2].text = self._get_parameter_unit(param_name)
            
            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
            for cell in row.cells:
                cell.paragraphs[0].runs[0].font.name = self.default_font
        
        self.document.add_paragraph()
    
    def _create_results_section(self, calculation_data: Dict[str, Any]):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞"""
        self.document.add_heading("3. –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–ê", 1)
        
        results = calculation_data.get('results', {})
        if not results:
            self.document.add_paragraph("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_table = self.document.add_table(rows=len(results) + 1, cols=3)
        results_table.style = 'Table Grid'
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        header_cells = results_table.rows[0].cells
        header_cells[0].text = "–†–µ–∑—É–ª—å—Ç–∞—Ç"
        header_cells[1].text = "–ó–Ω–∞—á–µ–Ω–∏–µ"
        header_cells[2].text = "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è"
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for cell in header_cells:
            cell.paragraphs[0].runs[0].bold = True
            cell.paragraphs[0].runs[0].font.name = self.bold_font
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        for i, (result_name, result_value) in enumerate(results.items(), 1):
            row = results_table.rows[i]
            row.cells[0].text = self._format_result_name(result_name)
            row.cells[1].text = self._format_result_value(result_value)
            row.cells[2].text = self._get_result_unit(result_name)
            
            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
            for cell in row.cells:
                cell.paragraphs[0].runs[0].font.name = self.default_font
        
        self.document.add_paragraph()
    
    def _create_conclusion_section(self, calculation_data: Dict[str, Any]):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å –∑–∞–∫–ª—é—á–µ–Ω–∏–µ–º"""
        self.document.add_heading("4. –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï", 1)
        
        # –°—Ç–∞—Ç—É—Å —Ä–∞—Å—á–µ—Ç–∞
        status = calculation_data.get('status', 'unknown')
        status_para = self.document.add_paragraph()
        status_para.add_run("–°—Ç–∞—Ç—É—Å —Ä–∞—Å—á–µ—Ç–∞: ").bold = True
        status_para.add_run(self._get_status_text(status))
        
        # –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã
        conclusions_para = self.document.add_paragraph()
        conclusions_para.add_run("–û–±—â–∏–µ –≤—ã–≤–æ–¥—ã: ").bold = True
        
        conclusions = self._generate_conclusions(calculation_data)
        conclusions_para.add_run(conclusions)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self._generate_recommendations(calculation_data)
        if recommendations:
            rec_para = self.document.add_paragraph()
            rec_para.add_run("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ").bold = True
            rec_para.add_run(recommendations)
        
        # –î–∞—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å—å
        self.document.add_paragraph()
        self.document.add_paragraph()
        
        signature_para = self.document.add_paragraph()
        signature_para.add_run(f"–î–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
        signature_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
    
    def _get_calculation_type_name(self, calculation_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —Ä–∞—Å—á–µ—Ç–∞"""
        type_names = {
            'structural': '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
            'foundation': '–û—Å–Ω–æ–≤–∞–Ω–∏—è –∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—ã',
            'thermal': '–¢–µ–ø–ª–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã',
            'ventilation': '–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è –∏ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'electrical': '–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã',
            'water': '–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ –∏ –≤–æ–¥–æ–æ—Ç–≤–µ–¥–µ–Ω–∏–µ',
            'fire': '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
            'acoustic': '–ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã',
            'lighting': '–û—Å–≤–µ—â–µ–Ω–∏–µ –∏ –∏–Ω—Å–æ–ª—è—Ü–∏—è',
            'geotechnical': '–ò–Ω–∂–µ–Ω–µ—Ä–Ω–æ-–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã'
        }
        return type_names.get(calculation_type, calculation_type)
    
    def _get_calculation_category_name(self, category: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–∞"""
        category_names = {
            'strength': '–†–∞—Å—á—ë—Ç –Ω–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç—å',
            'stability': '–†–∞—Å—á—ë—Ç –Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å',
            'stiffness': '–†–∞—Å—á—ë—Ç –Ω–∞ –∂—ë—Å—Ç–∫–æ—Å—Ç—å',
            'cracking': '–†–∞—Å—á—ë—Ç –Ω–∞ —Ç—Ä–µ—â–∏–Ω–æ—Å—Ç–æ–π–∫–æ—Å—Ç—å',
            'dynamic': '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç',
            'bearing_capacity': '–†–∞—Å—á—ë—Ç –Ω–µ—Å—É—â–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–∞–Ω–∏—è',
            'settlement': '–†–∞—Å—á—ë—Ç –æ—Å–∞–¥–æ–∫ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞',
            'slope_stability': '–†–∞—Å—á—ë—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –æ—Ç–∫–æ—Å–æ–≤',
            'pile_foundation': '–†–∞—Å—á—ë—Ç —Å–≤–∞–π–Ω—ã—Ö —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–≤',
            'retaining_wall': '–†–∞—Å—á—ë—Ç –ø–æ–¥–ø–æ—Ä–Ω—ã—Ö —Å—Ç–µ–Ω',
            'heat_transfer': '–†–∞—Å—á—ë—Ç —Ç–µ–ø–ª–æ–ø–µ—Ä–µ–¥–∞—á–∏ —á–µ—Ä–µ–∑ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è',
            'insulation': '–†–∞—Å—á—ë—Ç —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏',
            'energy_efficiency': '–†–∞—Å—á—ë—Ç —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–¥–∞–Ω–∏—è',
            'condensation': '–†–∞—Å—á—ë—Ç –∫–æ–Ω–¥–µ–Ω—Å–∞—Ü–∏–∏ –≤–ª–∞–≥–∏',
            'thermal_bridge': '–†–∞—Å—á—ë—Ç —Ç–µ–ø–ª–æ–≤—ã—Ö –º–æ—Å—Ç–æ–≤',
            'air_exchange': '–†–∞—Å—á—ë—Ç –≤–æ–∑–¥—É—Ö–æ–æ–±–º–µ–Ω–∞',
            'duct_sizing': '–†–∞—Å—á—ë—Ç –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–æ–≤',
            'fan_selection': '–ü–æ–¥–±–æ—Ä –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤',
            'cooling_load': '–†–∞—Å—á—ë—Ç —Ö–æ–ª–æ–¥–∏–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏',
            'humidity_control': '–†–∞—Å—á—ë—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞'
        }
        return category_names.get(category, category)
    
    def _get_applicable_norms(self, calculation_type: str, category: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º—ã—Ö –Ω–æ—Ä–º"""
        norms_map = {
            'structural': {
                'strength': ['–°–ü 63.13330', '–°–ü 16.13330', 'EN 1992', 'EN 1993'],
                'stability': ['–°–ü 16.13330', '–°–ü 63.13330', 'EN 1993'],
                'stiffness': ['–°–ü 63.13330', '–°–ü 64.13330', 'EN 1995'],
                'cracking': ['–°–ü 63.13330', 'EN 1992'],
                'dynamic': ['–°–ü 14.13330', 'EN 1998']
            },
            'foundation': {
                'bearing_capacity': ['–°–ü 22.13330.2016', '–°–ü 24.13330.2011', '–°–ü 25.13330.2012'],
                'settlement': ['–°–ü 22.13330.2016', '–°–ü 24.13330.2011'],
                'slope_stability': ['–°–ü 22.13330.2016', '–°–ü 47.13330.2016'],
                'pile_foundation': ['–°–ü 24.13330.2011', '–°–ü 25.13330.2012'],
                'retaining_wall': ['–°–ü 22.13330.2016', '–°–ü 63.13330.2018']
            },
            'thermal': {
                'heat_transfer': ['–°–ü 50.13330.2012', '–°–ü 23-101-2004', '–ì–û–°–¢ 30494-2011'],
                'insulation': ['–°–ü 50.13330.2012', '–°–ü 23-101-2004'],
                'energy_efficiency': ['–°–ü 50.13330.2012', '–°–ü 23-101-2004', '–ì–û–°–¢ 30494-2011'],
                'condensation': ['–°–ü 50.13330.2012', '–°–ü 23-101-2004'],
                'thermal_bridge': ['–°–ü 50.13330.2012', '–°–ü 23-101-2004']
            },
            'ventilation': {
                'air_exchange': ['–°–ü 60.13330.2016', '–°–ü 7.13130.2013', '–°–ü 54.13330.2016'],
                'duct_sizing': ['–°–ü 60.13330.2016', '–°–ü 7.13130.2013'],
                'fan_selection': ['–°–ü 60.13330.2016', '–°–ü 7.13130.2013'],
                'cooling_load': ['–°–ü 60.13330.2016', '–°–ü 7.13130.2013'],
                'humidity_control': ['–°–ü 60.13330.2016', '–°–ü 7.13130.2013']
            }
        }
        
        return norms_map.get(calculation_type, {}).get(category, [])
    
    def _format_parameter_name(self, param_name: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
        param_names = {
            'load_value': '–†–∞—Å—á–µ—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞',
            'section_area': '–ü–ª–æ—â–∞–¥—å —Å–µ—á–µ–Ω–∏—è',
            'material_strength': '–†–∞—Å—á–µ—Ç–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
            'safety_factor': '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏',
            'foundation_width': '–®–∏—Ä–∏–Ω–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞',
            'foundation_length': '–î–ª–∏–Ω–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞',
            'foundation_depth': '–ì–ª—É–±–∏–Ω–∞ –∑–∞–ª–æ–∂–µ–Ω–∏—è',
            'soil_cohesion': '–°—Ü–µ–ø–ª–µ–Ω–∏–µ –≥—Ä—É–Ω—Ç–∞',
            'soil_friction_angle': '–£–≥–æ–ª –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç—Ä–µ–Ω–∏—è',
            'soil_density': '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≥—Ä—É–Ω—Ç–∞',
            'wall_thickness': '–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω—ã',
            'wall_area': '–ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω—ã',
            'thermal_conductivity': '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–ø–ª–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç–∏',
            'indoor_temp': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
            'outdoor_temp': '–ù–∞—Ä—É–∂–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
            'room_volume': '–û–±—ä–µ–º –ø–æ–º–µ—â–µ–Ω–∏—è',
            'room_area': '–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è',
            'occupancy': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π',
            'air_flow_rate': '–†–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞',
            'duct_length': '–î–ª–∏–Ω–∞ –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–∞'
        }
        return param_names.get(param_name, param_name.replace('_', ' ').title())
    
    def _get_parameter_unit(self, param_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
        units = {
            'load_value': '–∫–ù',
            'section_area': '—Å–º¬≤',
            'material_strength': '–ú–ü–∞',
            'safety_factor': '',
            'foundation_width': '–º',
            'foundation_length': '–º',
            'foundation_depth': '–º',
            'soil_cohesion': '–∫–ü–∞',
            'soil_friction_angle': '–≥—Ä–∞–¥',
            'soil_density': '—Ç/–º¬≥',
            'wall_thickness': '–º',
            'wall_area': '–º¬≤',
            'thermal_conductivity': '–í—Ç/(–º¬∑–ö)',
            'indoor_temp': '¬∞C',
            'outdoor_temp': '¬∞C',
            'room_volume': '–º¬≥',
            'room_area': '–º¬≤',
            'occupancy': '—á–µ–ª',
            'air_flow_rate': '–º¬≥/—á',
            'duct_length': '–º'
        }
        return units.get(param_name, '')
    
    def _format_result_name(self, result_name: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        result_names = {
            'bearing_capacity': '–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å',
            'safety_factor': '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–∞—Å–∞',
            'settlement': '–û—Å–∞–¥–∫–∞',
            'heat_transfer_coefficient': '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–ø–ª–æ–ø–µ—Ä–µ–¥–∞—á–∏',
            'heat_loss': '–¢–µ–ø–ª–æ–≤—ã–µ –ø–æ—Ç–µ—Ä–∏',
            'thermal_resistance': '–¢–µ—Ä–º–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ',
            'air_exchange_rate': '–ö—Ä–∞—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–æ–æ–±–º–µ–Ω–∞',
            'pressure_loss': '–ü–æ—Ç–µ—Ä–∏ –¥–∞–≤–ª–µ–Ω–∏—è',
            'fan_power': '–ú–æ—â–Ω–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞',
            'cooling_capacity': '–•–æ–ª–æ–¥–∏–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å'
        }
        return result_names.get(result_name, result_name.replace('_', ' ').title())
    
    def _format_result_value(self, result_value: Any) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        if isinstance(result_value, (int, float)):
            return f"{result_value:.3f}"
        return str(result_value)
    
    def _get_result_unit(self, result_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        units = {
            'bearing_capacity': '–∫–ü–∞',
            'safety_factor': '',
            'settlement': '–º–º',
            'heat_transfer_coefficient': '–í—Ç/(–º¬≤¬∑–ö)',
            'heat_loss': '–í—Ç',
            'thermal_resistance': '–º¬≤¬∑–ö/–í—Ç',
            'air_exchange_rate': '1/—á',
            'pressure_loss': '–ü–∞',
            'fan_power': '–∫–í—Ç',
            'cooling_capacity': '–∫–í—Ç'
        }
        return units.get(result_name, '')
    
    def _get_status_text(self, status: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        status_texts = {
            'created': '–°–æ–∑–¥–∞–Ω',
            'in_progress': '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
            'error': '–û—à–∏–±–∫–∞',
            'unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        }
        return status_texts.get(status, status)
    
    def _format_date(self, date_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
        if not date_str:
            return '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
        try:
            from datetime import datetime
            dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
            return dt.strftime('%d.%m.%Y %H:%M')
        except:
            return date_str
    
    def _generate_conclusions(self, calculation_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã–≤–æ–¥–æ–≤ –ø–æ —Ä–∞—Å—á–µ—Ç—É"""
        status = calculation_data.get('status', 'unknown')
        results = calculation_data.get('results', {})
        
        if status == 'completed':
            if results:
                return "–†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º–∏ –Ω–æ—Ä–º–∞–º–∏."
            else:
                return "–†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ."
        elif status == 'error':
            return "–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
        elif status == 'in_progress':
            return "–†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è."
        else:
            return "–†–∞—Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
    
    def _generate_recommendations(self, calculation_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ä–∞—Å—á–µ—Ç—É"""
        status = calculation_data.get('status', 'unknown')
        results = calculation_data.get('results', {})
        
        if status == 'completed':
            return "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."
        elif status == 'error':
            return "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å—á–µ—Ç."
        else:
            return "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
