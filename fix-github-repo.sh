#!/bin/bash

# AI-–ù–ö - –ü–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
# –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫—Ä—É–ø–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –≤–µ—Ç–≤–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
if [ ! -d ".git" ]; then
    log_error "–ù–µ –Ω–∞–π–¥–µ–Ω Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞."
    exit 1
fi

log_info "üîß AI-–ù–ö - –ü–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
echo "========================================================"

# –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
log_info "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."

SIZE_BEFORE=$(du -sh .git | cut -f1)
log_info "–†–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: $SIZE_BEFORE"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
log_info "–ü–æ–∏—Å–∫ –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
LARGE_FILES=$(find . -type f -size +10M -not -path "./.git/*" | wc -l)
log_warning "–ù–∞–π–¥–µ–Ω–æ –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (>10MB): $LARGE_FILES"

if [ "$LARGE_FILES" -gt 0 ]; then
    log_info "–ö—Ä—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:"
    find . -type f -size +10M -not -path "./.git/*" | head -10
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
log_info "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
BACKUP_DIR="../ai-nk-backup-$(date +%Y%m%d_%H%M%S)"
cp -r . "$BACKUP_DIR"
log_success "–ü–æ–ª–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $BACKUP_DIR"

# –≠—Ç–∞–ø 1: –û—á–∏—Å—Ç–∫–∞ .gitignore
log_info "–≠—Ç–∞–ø 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ .gitignore..."
if [ -f ".gitignore" ]; then
    log_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ .gitignore..."
else
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ .gitignore..."
fi

# –≠—Ç–∞–ø 2: –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
log_info "–≠—Ç–∞–ø 2: –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ Git –æ—Ç –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."

# –°–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
PATTERNS_TO_REMOVE=(
    "*.tar.gz"
    "*.zip"
    "*.rar"
    "*.7z"
    "venv/"
    "env/"
    ".venv/"
    "calc_env/"
    "gpt_oss_env/"
    "local_rag_env/"
    "training_env/"
    "test_env/"
    "node_modules/"
    "models/"
    "*.log"
    "logs/"
    "*.pdf"
    "*.docx"
    "*.csv"
    "*.json"
    "*.pkl"
    "*.model"
    "*.h5"
    "*.pb"
    "*.onnx"
    "uploads/"
    "data/"
    "backups/"
    "ssl/"
    "*.pem"
    "*.key"
    "*.crt"
    "gpt-oss/"
    "test_*/"
    "TestDocs/"
    "unique_test*"
    "final_*.pdf"
    "report_*.pdf"
    "ai-nk-deployment/packages/"
    "*.so"
    "*.dylib"
    "*.dll"
)

# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
log_info "–£–¥–∞–ª–µ–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ Git..."
for pattern in "${PATTERNS_TO_REMOVE[@]}"; do
    log_info "–£–¥–∞–ª–µ–Ω–∏–µ: $pattern"
    git filter-branch --force --index-filter \
        "git rm -rf --cached --ignore-unmatch '$pattern'" \
        --prune-empty --tag-name-filter cat -- --all 2>/dev/null || true
done

# –û—á–∏—Å—Ç–∫–∞ —Å—Å—ã–ª–æ–∫
log_info "–û—á–∏—Å—Ç–∫–∞ —Å—Å—ã–ª–æ–∫..."
git for-each-ref --format="delete %(refname)" refs/original | git update-ref --stdin

# –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
log_info "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Git..."
git reflog expire --expire=now --all
git gc --prune=now --aggressive
git repack -Ad
git prune

# –≠—Ç–∞–ø 3: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–µ—Ç–≤–µ–π
log_info "–≠—Ç–∞–ø 3: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–µ—Ç–≤–µ–π..."

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–µ—Ç–≤–µ–π
git fetch --all

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ç–≤–∏
FINAL_BRANCH="main-integrated-$(date +%Y%m%d_%H%M%S)"
log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ç–≤–∏: $FINAL_BRANCH"
git checkout -b "$FINAL_BRANCH"

# –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–µ—Ç–≤–µ–π
BRANCHES=$(git branch -r | grep -v HEAD | grep -v "$FINAL_BRANCH" | sed 's/origin\///' | tr -d ' ')

for branch in $BRANCHES; do
    if [ "$branch" != "main" ] && [ "$branch" != "master" ]; then
        log_info "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–µ—Ç–≤–∏: $branch"
        git merge "origin/$branch" --no-edit || {
            log_warning "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –≤–µ—Ç–≤–∏ $branch. –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ..."
            git status --porcelain | grep "^UU" | cut -c4- | while read file; do
                if [ -f "$file" ]; then
                    git checkout --ours "$file"
                    git add "$file"
                fi
            done
            git commit --no-edit || true
        }
    fi
done

# –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
log_info "–≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞..."
git add .
git commit -m "feat: Complete repository cleanup and integration

- Removed all large files from Git history
- Merged all development branches
- Updated .gitignore for future commits
- Created unified codebase
- Prepared for GitHub deployment

Repository size reduced from $SIZE_BEFORE to $(du -sh .git | cut -f1)
Date: $(date)
Branch: $FINAL_BRANCH"

# –≠—Ç–∞–ø 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞
VERSION_TAG="v1.0.0-clean-$(date +%Y%m%d_%H%M%S)"
log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞: $VERSION_TAG"
git tag -a "$VERSION_TAG" -m "Clean version of AI-–ù–ö system

This is the clean, optimized version of the AI-–ù–ö system:
- All large files removed from Git history
- All branches merged
- Repository size optimized
- Ready for GitHub deployment

Version: 1.0.0
Date: $(date)
Branch: $FINAL_BRANCH"

# –≠—Ç–∞–ø 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ main –≤–µ—Ç–≤–∏
log_info "–≠—Ç–∞–ø 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ main –≤–µ—Ç–≤–∏..."
git checkout main
git merge "$FINAL_BRANCH" --no-edit

# –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
SIZE_AFTER=$(du -sh .git | cut -f1)
log_success "–†–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: $SIZE_AFTER"

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
REPORT_FILE="github-fix-report-$(date +%Y%m%d_%H%M%S).md"
cat > "$REPORT_FILE" << EOF
# AI-–ù–ö - –û—Ç—á–µ—Ç –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è

## –û–±–∑–æ—Ä

–î–∞—Ç–∞: $(date)
–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ç–≤—å: $FINAL_BRANCH
–í–µ—Ä—Å–∏—è: $VERSION_TAG
–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $BACKUP_DIR

## –ü—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Ä–µ—à–µ–Ω—ã

### 1. –ö—Ä—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
- **–†–∞–∑–º–µ—Ä –¥–æ**: $SIZE_BEFORE
- **–†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ**: $SIZE_AFTER
- **–£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤**: $LARGE_FILES

### 2. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–µ—Ç–≤–µ–π
- –û–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤—Å–µ –≤–µ—Ç–≤–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- –†–∞–∑—Ä–µ—à–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
- –°–æ–∑–¥–∞–Ω–∞ –µ–¥–∏–Ω–∞—è –∫–æ–¥–æ–≤–∞—è –±–∞–∑–∞

### 3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è .gitignore
- –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
- –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
- –ò—Å–∫–ª—é—á–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ª–æ–≥–∏

## –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã

\`\`\`
$(printf '%s\n' "${PATTERNS_TO_REMOVE[@]}")
\`\`\`

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

\`\`\`
$(tree -L 2 -I 'node_modules|venv|.git|__pycache__' || find . -maxdepth 2 -type d | head -20)
\`\`\`

## –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

\`\`\`bash
# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π push (–û–°–¢–û–†–û–ñ–ù–û!)
git push --force --all
git push --force --tags

# –ò–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π push
git push origin $FINAL_BRANCH
git push origin $VERSION_TAG
\`\`\`

## –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

‚ö†Ô∏è **–í–ê–ñ–ù–û**: –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!

\`\`\`bash
# –î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
cd ..
rm -rf AI-NK
git clone <repository-url> AI-NK
cd AI-NK
\`\`\`

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
2. **Push**: –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
3. **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**: –£–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
4. **–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ**: –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º—É –≤ –ø—Ä–æ–¥–∞–∫—à–Ω

---

**AI-–ù–ö Team** - –°–∏—Å—Ç–µ–º–∞ –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò
EOF

log_success "–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: $REPORT_FILE"

# –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
echo ""
log_success "üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
log_info "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
echo "  - –†–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: $SIZE_BEFORE ‚Üí $SIZE_AFTER"
echo "  - –£–¥–∞–ª–µ–Ω–æ –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: $LARGE_FILES"
echo "  - –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ç–≤—å: $FINAL_BRANCH"
echo "  - –í–µ—Ä—Å–∏—è: $VERSION_TAG"
echo "  - –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $BACKUP_DIR"
echo "  - –û—Ç—á–µ—Ç: $REPORT_FILE"
echo ""
log_warning "‚ö†Ô∏è  –í–ê–ñ–ù–û:"
echo "1. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
echo "2. –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: $BACKUP_DIR"
echo "3. –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π: git push --force --all"
echo ""
log_info "üöÄ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≥–æ—Ç–æ–≤ –¥–ª—è GitHub!"
