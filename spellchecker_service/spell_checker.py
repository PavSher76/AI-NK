"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–æ–¥—É–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Hunspell + LanguageTool
"""

import re
import logging
import os
import time
from typing import List, Dict, Any, Optional, Tuple
from pathlib import Path

logger = logging.getLogger(__name__)
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª—è spell_checker
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

class AdvancedSpellChecker:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–æ–≤–µ—Ä—â–∏–∫ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏"""
    
    def __init__(self):
        self.hunspell = None
        self.language_tool = None
        self.dictionary = set()
        self._initialize_checkers()
    
    def _initialize_checkers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—â–∏–∫–æ–≤"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Hunspell
        self._init_hunspell()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LanguageTool
        self._init_language_tool()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
        self._init_dictionary()
        
        logger.info("AdvancedSpellChecker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    def _init_hunspell(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Hunspell"""
        logger.info("üîß [HUNSPELL] –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Hunspell")
        start_time = time.time()
        
        try:
            import hunspell
            logger.info("üîß [HUNSPELL] –ú–æ–¥—É–ª—å hunspell –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Hunspell –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            try:
                logger.info("üîß [HUNSPELL] –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞...")
                self.hunspell = hunspell.HunSpell('/usr/share/hunspell/ru_RU.dic', '/usr/share/hunspell/ru_RU.aff')
                logger.info("‚úÖ [HUNSPELL] Hunspell –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–±–æ—Ç—É hunspell
                test_word = "—Ç–µ—Å—Ç"
                is_correct = self.hunspell.spell(test_word)
                suggestions = self.hunspell.suggest(test_word)
                logger.info(f"üîß [HUNSPELL] –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: '{test_word}' -> {is_correct}, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {suggestions[:3]}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [HUNSPELL] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è ru_RU: {e}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                try:
                    logger.info("üîß [HUNSPELL] –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞...")
                    self.hunspell = hunspell.HunSpell('/usr/share/hunspell/en_US.dic', '/usr/share/hunspell/en_US.aff')
                    logger.info("‚úÖ [HUNSPELL] Hunspell –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–±–æ—Ç—É hunspell
                    test_word = "test"
                    is_correct = self.hunspell.spell(test_word)
                    suggestions = self.hunspell.suggest(test_word)
                    logger.info(f"üîß [HUNSPELL] –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: '{test_word}' -> {is_correct}, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {suggestions[:3]}")
                    
                except Exception as e2:
                    logger.warning(f"‚ö†Ô∏è [HUNSPELL] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è en_US: {e2}")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—É—Ç–µ–π (–∞–≤—Ç–æ–ø–æ–∏—Å–∫)
                    try:
                        logger.info("üîß [HUNSPELL] –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –∞–≤—Ç–æ–ø–æ–∏—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ–π...")
                        self.hunspell = hunspell.HunSpell()
                        logger.info("‚úÖ [HUNSPELL] Hunspell –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–≤—Ç–æ–ø–æ–∏—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ–π")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–±–æ—Ç—É hunspell
                        test_word = "test"
                        is_correct = self.hunspell.spell(test_word)
                        suggestions = self.hunspell.suggest(test_word)
                        logger.info(f"üîß [HUNSPELL] –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: '{test_word}' -> {is_correct}, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {suggestions[:3]}")
                        
                    except Exception as e3:
                        logger.warning(f"‚ö†Ô∏è [HUNSPELL] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –∞–≤—Ç–æ–ø–æ–∏—Å–∫–æ–º: {e3}")
                        self.hunspell = None
            
        except ImportError:
            logger.warning("‚ö†Ô∏è [HUNSPELL] –ú–æ–¥—É–ª—å hunspell –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
            self.hunspell = None
        except Exception as e:
            logger.error(f"‚ùå [HUNSPELL] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Hunspell: {e}")
            self.hunspell = None
        
        init_time = time.time() - start_time
        if self.hunspell:
            logger.info(f"‚úÖ [HUNSPELL] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ {init_time:.3f}—Å")
        else:
            logger.warning(f"‚ö†Ô∏è [HUNSPELL] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏ –∑–∞ {init_time:.3f}—Å")
    
    def _init_language_tool(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LanguageTool"""
        try:
            import requests
            import time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π LanguageTool —Å–µ—Ä–≤–∏—Å
            self.language_tool_url = "http://localhost:8081"
            self.language_tool_available = False
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
            for attempt in range(10):
                try:
                    response = requests.get(f"{self.language_tool_url}/v2/languages", timeout=5)
                    if response.status_code == 200:
                        self.language_tool_available = True
                        logger.info("LanguageTool —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:8081")
                        break
                except Exception as e:
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/10: LanguageTool —Å–µ—Ä–≤–∏—Å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤: {e}")
                    time.sleep(2)
            
            if not self.language_tool_available:
                logger.warning("LanguageTool —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
            else:
                self.language_tool = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            
        except ImportError:
            logger.warning("–ú–æ–¥—É–ª—å requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LanguageTool: {e}")
    
    def _init_dictionary(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è"""
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤
        self.dictionary = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ª–æ–≤–∞
            '–¥–æ–∫—É–º–µ–Ω—Ç', '–ø—Ä–æ–≤–µ—Ä–∫–∞', '–æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è', '–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞', '–æ—à–∏–±–∫–∞', '–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            '—Ç–µ–∫—Å—Ç', '—Å–ª–æ–≤–æ', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '–∞–±–∑–∞—Ü', '—Å—Ç—Ä–∞–Ω–∏—Ü–∞', '—Ñ–∞–π–ª', '–∑–∞–≥—Ä—É–∑–∫–∞',
            '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ', '–æ—Ç–ø—Ä–∞–≤–∫–∞', '–ø–æ–ª—É—á–µ–Ω–∏–µ', '–æ–±—Ä–∞–±–æ—Ç–∫–∞', '–∞–Ω–∞–ª–∏–∑', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç',
            '—Å–∏—Å—Ç–µ–º–∞', '—Å–µ—Ä–≤–∏—Å', '–º–æ–¥—É–ª—å', '—Ñ—É–Ω–∫—Ü–∏—è', '–º–µ—Ç–æ–¥', '–∫–ª–∞—Å—Å', '–æ–±—ä–µ–∫—Ç',
            '–¥–∞–Ω–Ω—ã–µ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', '—Ñ–æ—Ä–º–∞—Ç', '–≤–µ—Ä—Å–∏—è',
            '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞', '–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', '–ø–∞—Ä–∞–º–µ—Ç—Ä', '–æ–ø—Ü–∏—è', '–≤—ã–±–æ—Ä', '—É—Å—Ç–∞–Ω–æ–≤–∫–∞',
            '–∑–∞–ø—É—Å–∫', '–æ—Å—Ç–∞–Ω–æ–≤–∫–∞', '—Ä–∞–±–æ—Ç–∞', '–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', '–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ', '—É—Å–ø–µ—Ö',
            '–ø—Ä–æ–±–ª–µ–º–∞', '—Ä–µ—à–µ–Ω–∏–µ', '–ø–æ–º–æ—â—å', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è',
            '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', '–∞–Ω–∞–ª–∏—Ç–∏–∫',
            
            # –î–µ–ª–æ–≤–∞—è –ª–µ–∫—Å–∏–∫–∞
            '–¥–æ–≥–æ–≤–æ—Ä', '—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', '–∫–æ–Ω—Ç—Ä–∞–∫—Ç', '–ø—Ä–æ—Ç–æ–∫–æ–ª', '–∞–∫—Ç', '—Å–ø—Ä–∞–≤–∫–∞',
            '–æ—Ç—á–µ—Ç', '–∑–∞–∫–ª—é—á–µ–Ω–∏–µ', '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '–∑–∞—è–≤–ª–µ–Ω–∏–µ',
            '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', '–∏–∑–≤–µ—â–µ–Ω–∏–µ', '—Å–æ–æ–±—â–µ–Ω–∏–µ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '—Å–≤–µ–¥–µ–Ω–∏—è',
            '–¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç', '–∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏—è', '–ø–µ—Ä–µ–ø–∏—Å–∫–∞', '–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è',
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ª–µ–∫—Å–∏–∫–∞
            '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–æ—Ç–ª–∞–¥–∫–∞', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
            '–¥–µ–ø–ª–æ–π', '—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ', '–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
            '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
            '—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ', '–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Å–∂–∞—Ç–∏–µ', '–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ',
            
            # –û–±—â–∏–µ —Å–ª–æ–≤–∞
            '–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '—Å–ø–∞—Å–∏–±–æ', '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–∏–∑–≤–∏–Ω–∏—Ç–µ',
            '—Ö–æ—Ä–æ—à–æ', '–ø–ª–æ—Ö–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ',
            '–≤–∞–∂–Ω–æ', '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ', '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ', '–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ', '—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è',
            '–º–æ–∂–Ω–æ', '–Ω—É–∂–Ω–æ', '—Å–ª–µ–¥—É–µ—Ç', '—Ç—Ä–µ–±—É–µ—Ç—Å—è', '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ',
            
            # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã
            '–æ–æ–æ', '–∑–∞–æ', '–æ–∞–æ', '–ø–∞–æ', '–∏–ø', '—Ç–¥', '—Ç–¥–æ', '–ø–∏—Ä', '—Ä–∫–¥', '–Ω–∏–æ–ø—Å',
            '–µ–≤—Ä–æ—Ö–∏–º', '–ø—Ä–æ—Ç–µ—Ö', '–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥', '–±–µ–ª–æ–±–æ—Ä–æ–¥–æ–≤', '–¥–∞–≤–ª–µ—Ç–∫—É–ª–æ–≤',
            '–≥–∞–ª—É—à–∫–æ–≤', '—é—Ä–º–∞–Ω–æ–≤–∞', '—Å–µ—Ä–≥–µ–µ–≤–Ω–∞', '–∏–ª—å—è', '–≤–∏–∫—Ç–æ—Ä–æ–≤–∏—á',
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
            '–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç', '–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞', '—É—Å—Ç–∞–Ω–æ–≤–∫–∞', '–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
            '–æ–±—ä–µ–∫—Ç', '–ø—Ä–æ–µ–∫—Ç', '–∑–∞–¥–∞–Ω–∏–µ', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ', '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ',
            '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ä–∞–±–æ—Ç—ã', '–≥–∞—Ä–∞–Ω—Ç–∏—è', '–æ–ø–ª–∞—Ç–∞', '—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ',
            '—Å—Ç–∞–¥–∏–π–Ω–æ—Å—Ç—å', '–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å', '–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π', '–∑–∞–ø—Ä–æ—Å',
            '–∏—Å—Ö–æ–¥–Ω—ã–π', '—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ', '—Å—Ö–µ–º–∞', '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', '—Ü–µ—Ö',
            '–ø—Ä–µ–¥–ø—Ä–æ–µ–∫—Ç–Ω—ã–π', '–ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π', '—Å–æ–≤–µ—â–∞–Ω–∏–µ',
            '–∏–∑–º–µ–Ω–µ–Ω–∏–µ', '–æ–±—ä–µ–º', '–≤—Ä–µ–º–µ–Ω–Ω—ã–π', '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', '—Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥',
            '—ç—Å—Ç–∞–∫–∞–¥–∞', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', '–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å', '–∑–∞–∫–ª—é—á–µ–Ω–∏–µ', '—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ',
            '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '—É—Ç–æ—á–Ω–µ–Ω–∏–µ', '–∫—Ä–∏—Ç–µ—Ä–∏–π', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–ø—Ä–æ–µ–∫—Ç–Ω–∞—è',
            '—Ä–∞–±–æ—á–∞—è', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–æ—Ç–¥–µ–ª—å–Ω—ã–π', '—Å–æ—Å—Ç–∞–≤', '–¥–µ–π—Å—Ç–≤—É—é—â–∏–π',
            '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '—É–≤–∞–∂–µ–Ω–∏–µ–º', '–¥–∏—Ä–µ–∫—Ç–æ—Ä', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–¥–æ–ª–∂–Ω–æ—Å—Ç—å',
            '–ª–∏—á–Ω–∞—è', '–ø–æ–¥–ø–∏—Å—å', '—Ñ–∞–º–∏–ª–∏—è', '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', '—Ç–µ–ª–µ—Ñ–æ–Ω', 'email',
            
            # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            '—Ä–æ—Å—Å–∏—è', '–º–æ—Å–∫–≤–∞', '–¥—É–±–∏–Ω–∏–Ω—Å–∫–∞—è', '–¥–∞–Ω–∏–ª–æ–≤—Å–∫–∏–π', '—Å–µ–≤–µ—Ä–æ', '–∑–∞–ø–∞–¥',
            
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ (—á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –¥–µ–ª–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö)
            'office', 'eurochem', 'pte', 'out', 'gen', 'mail', 'ilya', 'beloborodov',
            'asya', 'yurmanova', 'e32c', 'e320', 'e230', 'dkc', 'ksp',
            
            # –°–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏ –∫–æ–¥—ã
            '–æ–≥—Ä–Ω', '–∏–Ω–Ω', '–∫–ø–ø', '–≥—Ä–∫', '—Ä—Ñ', '–µ—Ö—Å–∑', '–ø—Ç–∏', '–∏—Å–ø–æ', '–æ–ø–æ'
        }
        
        logger.info(f"–ë–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {len(self.dictionary)} —Å–ª–æ–≤")
    
    def check_spelling(self, text: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏"""
        if self.hunspell:
            return self._check_spelling_hunspell(text)
        else:
            return self._check_spelling_fallback(text)
    
    def _check_spelling_hunspell(self, text: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–º–æ—â—å—é Hunspell"""
        logger.info(f"üîç [HUNSPELL] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–º–æ—â—å—é Hunspell –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        start_time = time.time()
        
        try:
            words = self._extract_words(text)
            logger.info(f"üîç [HUNSPELL] –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(words)} —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
            errors = []
            checked_words = 0
            skipped_words = 0
            dictionary_hits = 0
            false_positive_skips = 0
            
            for word in words:
                checked_words += 1
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞, —á–∏—Å–ª–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                if len(word) < 3 or word.isdigit() or not word.isalpha():
                    skipped_words += 1
                    logger.debug(f"üîç [HUNSPELL] –ü—Ä–æ–ø—É—â–µ–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ/—á–∏—Å–ª–æ: '{word}'")
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
                if word.lower() in self.dictionary:
                    dictionary_hits += 1
                    logger.debug(f"üîç [HUNSPELL] –°–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ: '{word}'")
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
                if self._is_likely_correct_word(word):
                    skipped_words += 1
                    logger.debug(f"üîç [HUNSPELL] –°–ª–æ–≤–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º: '{word}'")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ Hunspell
                logger.debug(f"üîç [HUNSPELL] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–æ: '{word}'")
                is_correct = self.hunspell.spell(word)
                
                if not is_correct:
                    logger.info(f"üîç [HUNSPELL] –ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Å–ª–æ–≤–µ: '{word}'")
                    suggestions = self.hunspell.suggest(word)
                    logger.info(f"üîç [HUNSPELL] –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è '{word}': {suggestions[:3]}")
                    
                    context = self._get_word_context(text, word)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
                    if self._is_likely_false_positive(word, suggestions):
                        false_positive_skips += 1
                        logger.info(f"üîç [HUNSPELL] –°–ª–æ–≤–æ '{word}' –ø—Ä–æ–ø—É—â–µ–Ω–æ –∫–∞–∫ –ª–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ")
                        continue
                    
                    error_data = {
                        "word": word,
                        "position": text.find(word),
                        "context": context,
                        "suggestions": suggestions[:5],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                        "type": "spelling",
                        "confidence": 0.8  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è Hunspell
                    }
                    errors.append(error_data)
                    logger.info(f"üîç [HUNSPELL] –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞: {error_data}")
                else:
                    logger.debug(f"üîç [HUNSPELL] –°–ª–æ–≤–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: '{word}'")
            
            processing_time = time.time() - start_time
            
            result = {
                "total_words": len(words),
                "checked_words": checked_words,
                "skipped_words": skipped_words,
                "dictionary_hits": dictionary_hits,
                "false_positive_skips": false_positive_skips,
                "misspelled_count": len(errors),
                "errors": errors,
                "accuracy": (len(words) - len(errors)) / len(words) * 100 if words else 100,
                "method": "hunspell",
                "processing_time": processing_time
            }
            
            logger.info(f"üîç [HUNSPELL] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.3f}—Å:")
            logger.info(f"üîç [HUNSPELL] - –í—Å–µ–≥–æ —Å–ª–æ–≤: {len(words)}")
            logger.info(f"üîç [HUNSPELL] - –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked_words}")
            logger.info(f"üîç [HUNSPELL] - –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_words}")
            logger.info(f"üîç [HUNSPELL] - –ù–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ: {dictionary_hits}")
            logger.info(f"üîç [HUNSPELL] - –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {false_positive_skips}")
            logger.info(f"üîç [HUNSPELL] - –û—à–∏–±–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {len(errors)}")
            logger.info(f"üîç [HUNSPELL] - –¢–æ—á–Ω–æ—Å—Ç—å: {result['accuracy']:.1f}%")
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ Hunspell: {e}")
            return self._check_spelling_fallback(text)
    
    def _check_spelling_fallback(self, text: str) -> Dict[str, Any]:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏"""
        logger.info(f"üîç [FALLBACK] –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        start_time = time.time()
        
        words = self._extract_words(text)
        logger.info(f"üîç [FALLBACK] –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(words)} —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        errors = []
        checked_words = 0
        dictionary_hits = 0
        suspicious_words = 0
        
        for word in words:
            checked_words += 1
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞, —á–∏—Å–ª–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            if len(word) < 3 or word.isdigit() or not word.isalpha():
                logger.debug(f"üîç [FALLBACK] –ü—Ä–æ–ø—É—â–µ–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ/—á–∏—Å–ª–æ: '{word}'")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–æ –ø–æ —Å–ª–æ–≤–∞—Ä—é
            if word.lower() not in self.dictionary:
                logger.debug(f"üîç [FALLBACK] –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ: '{word}'")
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                if self._is_suspicious_word(word):
                    suspicious_words += 1
                    logger.info(f"üîç [FALLBACK] –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–ª–æ–≤–µ: '{word}'")
                    context = self._get_word_context(text, word)
                    suggestions = self._get_suggestions(word)
                    
                    error_data = {
                        "word": word,
                        "position": text.find(word),
                        "context": context,
                        "suggestions": suggestions,
                        "type": "spelling",
                        "confidence": 0.5  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è fallback
                    }
                    errors.append(error_data)
                    logger.info(f"üîç [FALLBACK] –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞: {error_data}")
                else:
                    logger.debug(f"üîç [FALLBACK] –°–ª–æ–≤–æ –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º: '{word}'")
            else:
                dictionary_hits += 1
                logger.debug(f"üîç [FALLBACK] –°–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ: '{word}'")
        
        processing_time = time.time() - start_time
        accuracy = (len(words) - len(errors)) / len(words) * 100 if words else 100
        
        logger.info(f"üîç [FALLBACK] –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.3f}—Å:")
        logger.info(f"üîç [FALLBACK] - –í—Å–µ–≥–æ —Å–ª–æ–≤: {len(words)}")
        logger.info(f"üîç [FALLBACK] - –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked_words}")
        logger.info(f"üîç [FALLBACK] - –ù–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ: {dictionary_hits}")
        logger.info(f"üîç [FALLBACK] - –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {suspicious_words}")
        logger.info(f"üîç [FALLBACK] - –û—à–∏–±–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {len(errors)}")
        logger.info(f"üîç [FALLBACK] - –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
        
        return {
            "total_words": len(words),
            "checked_words": checked_words,
            "dictionary_hits": dictionary_hits,
            "suspicious_words": suspicious_words,
            "misspelled_count": len(errors),
            "errors": errors,
            "accuracy": accuracy,
            "method": "fallback",
            "processing_time": processing_time
        }
    
    def check_grammar(self, text: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏"""
        if hasattr(self, 'language_tool_available') and self.language_tool_available:
            return self._check_grammar_languagetool_http(text)
        else:
            return self._check_grammar_fallback(text)
    
    def _check_grammar_languagetool(self, text: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ —Å –ø–æ–º–æ—â—å—é LanguageTool"""
        try:
            matches = self.language_tool.check(text)
            grammar_errors = []
            
            for match in matches:
                grammar_errors.append({
                    "message": match.message,
                    "context": match.context,
                    "offset": match.offset,
                    "length": match.errorLength,
                    "replacements": match.replacements[:3],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                    "rule_id": match.ruleId,
                    "type": "grammar",
                    "confidence": 0.9  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è LanguageTool
                })
            
            return {
                "errors": grammar_errors,
                "total_errors": len(grammar_errors),
                "method": "languagetool"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ LanguageTool: {e}")
            return self._check_grammar_fallback(text)
    
    def _check_grammar_languagetool_http(self, text: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ —Å –ø–æ–º–æ—â—å—é LanguageTool —á–µ—Ä–µ–∑ HTTP API"""
        try:
            import requests
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LanguageTool API
            response = requests.post(
                f"{self.language_tool_url}/v2/check",
                data={
                    'text': text,
                    'language': 'ru-RU'
                },
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                grammar_errors = []
                
                for match in data.get('matches', []):
                    grammar_errors.append({
                        "message": match.get('message', ''),
                        "context": match.get('context', {}).get('text', ''),
                        "offset": match.get('offset', 0),
                        "length": match.get('length', 0),
                        "replacements": match.get('replacements', [])[:3],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                        "rule_id": match.get('rule', {}).get('id', ''),
                        "type": "grammar",
                        "confidence": 0.9  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è LanguageTool
                    })
                
                return {
                    "errors": grammar_errors,
                    "total_errors": len(grammar_errors),
                    "method": "languagetool_http"
                }
            else:
                logger.warning(f"LanguageTool API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                return self._check_grammar_fallback(text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ —Å LanguageTool HTTP API: {e}")
            return self._check_grammar_fallback(text)
    
    def _check_grammar_fallback(self, text: str) -> Dict[str, Any]:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏"""
        grammar_errors = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å
        redundancy_patterns = [
            (r'\b—ç—Ç–æ –µ—Å—Ç—å\b', "–í–æ–∑–º–æ–∂–Ω–∞—è –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å: '—ç—Ç–æ –µ—Å—Ç—å'"),
            (r'\b—Ç–æ –µ—Å—Ç—å\b', "–í–æ–∑–º–æ–∂–Ω–∞—è –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å: '—Ç–æ –µ—Å—Ç—å'"),
            (r'\b—Ç–∞–∫–∂–µ –∏\b', "–í–æ–∑–º–æ–∂–Ω–∞—è –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å: '—Ç–∞–∫–∂–µ –∏'"),
            (r'\b–≤–º–µ—Å—Ç–µ —Å —Ç–µ–º\b', "–í–æ–∑–º–æ–∂–Ω–∞—è –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å: '–≤–º–µ—Å—Ç–µ —Å —Ç–µ–º'"),
            (r'\b–≤ —Å–≤—è–∑–∏ —Å —Ç–µ–º\b', "–í–æ–∑–º–æ–∂–Ω–∞—è –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å: '–≤ —Å–≤—è–∑–∏ —Å —Ç–µ–º'")
        ]
        
        for pattern, message in redundancy_patterns:
            matches = re.finditer(pattern, text, re.IGNORECASE)
            for match in matches:
                grammar_errors.append({
                    "message": message,
                    "context": match.group(),
                    "offset": match.start(),
                    "length": len(match.group()),
                    "replacements": ["—É–ø—Ä–æ—Å—Ç–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"],
                    "rule_id": "REDUNDANCY",
                    "type": "grammar",
                    "confidence": 0.6  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è fallback
                })
        
        return {
            "errors": grammar_errors,
            "total_errors": len(grammar_errors),
            "method": "fallback"
        }
    
    def comprehensive_check(self, text: str) -> Dict[str, Any]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏"""
        logger.info(f"üîç [COMPREHENSIVE] –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        start_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏
        logger.info("üîç [COMPREHENSIVE] –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏...")
        spelling_start = time.time()
        spelling_result = self.check_spelling(text)
        spelling_time = time.time() - spelling_start
        logger.info(f"üîç [COMPREHENSIVE] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {spelling_time:.3f}—Å")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
        logger.info("üîç [COMPREHENSIVE] –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏...")
        grammar_start = time.time()
        grammar_result = self.check_grammar(text)
        grammar_time = time.time() - grammar_start
        logger.info(f"üîç [COMPREHENSIVE] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {grammar_time:.3f}—Å")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_errors = spelling_result["errors"] + grammar_result["errors"]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        all_errors.sort(key=lambda x: x.get("offset", x.get("position", 0)))
        
        processing_time = time.time() - start_time
        total_errors = len(all_errors)
        spelling_errors = spelling_result.get("misspelled_count", 0)
        grammar_errors = grammar_result.get("error_count", 0)
        overall_accuracy = self._calculate_overall_accuracy(spelling_result, grammar_result, text)
        
        logger.info(f"üîç [COMPREHENSIVE] –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.3f}—Å:")
        logger.info(f"üîç [COMPREHENSIVE] - –û—à–∏–±–æ–∫ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏: {spelling_errors}")
        logger.info(f"üîç [COMPREHENSIVE] - –û—à–∏–±–æ–∫ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏: {grammar_errors}")
        logger.info(f"üîç [COMPREHENSIVE] - –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}")
        logger.info(f"üîç [COMPREHENSIVE] - –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {overall_accuracy:.1f}%")
        
        return {
            "spelling": spelling_result,
            "grammar": grammar_result,
            "total_errors": total_errors,
            "all_errors": all_errors,
            "overall_accuracy": overall_accuracy,
            "methods": {
                "spelling": spelling_result.get("method", "unknown"),
                "grammar": grammar_result.get("method", "unknown")
            },
            "processing_time": processing_time
        }
    
    def _extract_words(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
        words = re.findall(r'\b[–∞-—è—ë–ê-–Ø–Åa-zA-Z]+\b', text.lower())
        return words
    
    def _get_word_context(self, text: str, word: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥ —Å–ª–æ–≤–∞"""
        words = text.split()
        word_index = -1
        for i, w in enumerate(words):
            if word in w:
                word_index = i
                break
        
        if word_index == -1:
            return f"...{word}..."
        
        start = max(0, word_index - 3)
        end = min(len(words), word_index + 4)
        context_words = words[start:end]
        
        # –í—ã–¥–µ–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–ª–æ–≤–æ
        context = " ".join(context_words)
        if word in context:
            context = context.replace(word, f"**{word}**", 1)
        
        return context
    
    def _is_suspicious_word(self, word: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º"""
        # –°–ª–æ–≤–∞ –¥–ª–∏–Ω–Ω–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤
        if len(word) > 15:
            return True
        
        # –°–ª–æ–≤–∞ —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è —Å–∏–º–≤–æ–ª–∞–º–∏
        if len(set(word)) < len(word) * 0.6:
            return True
        
        # –°–ª–æ–≤–∞ —Å –Ω–µ–æ–±—ã—á–Ω—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏
        unusual_patterns = [r'[–∞-—è—ë]{3,}[a-z]', r'[a-z]{3,}[–∞-—è—ë]', r'[0-9]{2,}']
        for pattern in unusual_patterns:
            if re.search(pattern, word):
                return True
        
        return False
    
    def _is_likely_correct_word(self, word: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º"""
        word_lower = word.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É —Å–ª–æ–≤–∞—Ä—é
        if word_lower in self.dictionary:
            return True
        
        # –°–ª–æ–≤–∞ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã (–∏–º–µ–Ω–∞, –Ω–∞–∑–≤–∞–Ω–∏—è)
        if word[0].isupper() and len(word) > 2:
            return True
        
        # –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ (2-3 —Å–∏–º–≤–æ–ª–∞)
        if len(word) <= 3:
            return True
        
        # –°–ª–æ–≤–∞ —Å –¥–µ—Ñ–∏—Å–∞–º–∏ (—Å–æ—Å—Ç–∞–≤–Ω—ã–µ —Å–ª–æ–≤–∞)
        if '-' in word:
            return True
        
        # –°–ª–æ–≤–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏ (–∫–æ–¥—ã, –Ω–æ–º–µ—Ä–∞)
        if any(c.isdigit() for c in word):
            return True
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –≤ –¥–µ–ª–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
        english_business_words = {
            'office', 'email', 'mail', 'phone', 'fax', 'web', 'www', 'http',
            'https', 'com', 'ru', 'org', 'net', 'info', 'pdf', 'doc', 'docx',
            'xls', 'xlsx', 'ppt', 'pptx', 'zip', 'rar', 'jpg', 'png', 'gif',
            'mp3', 'mp4', 'avi', 'mov', 'wmv', 'flv', 'mkv', 'mpg', 'mpeg'
        }
        if word_lower in english_business_words:
            return True
        
        return False
    
    def _is_likely_false_positive(self, word: str, suggestions: List[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –ª–æ–∂–Ω—ã–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ–º"""
        word_lower = word.lower()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
        if not suggestions:
            return True
        
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—á–µ–Ω—å –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        if suggestions:
            best_suggestion = suggestions[0].lower()
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è (–±–æ–ª–µ–µ 50% —Å–∏–º–≤–æ–ª–æ–≤)
            if len(set(word_lower) & set(best_suggestion)) < len(word_lower) * 0.5:
                return True
        
        # –°–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ —è–≤–ª—è—é—Ç—Å—è –ª–æ–∂–Ω—ã–º–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è–º–∏
        common_false_positives = {
            '–æ–æ–æ', '–∑–∞–æ', '–æ–∞–æ', '–ø–∞–æ', '–∏–ø', '—Ç–¥', '—Ç–¥–æ', '–ø–∏—Ä', '—Ä–∫–¥', '–Ω–∏–æ–ø—Å',
            '–µ–≤—Ä–æ—Ö–∏–º', '–ø—Ä–æ—Ç–µ—Ö', '–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥', '–±–µ–ª–æ–±–æ—Ä–æ–¥–æ–≤', '–¥–∞–≤–ª–µ—Ç–∫—É–ª–æ–≤',
            '–≥–∞–ª—É—à–∫–æ–≤', '—é—Ä–º–∞–Ω–æ–≤–∞', '—Å–µ—Ä–≥–µ–µ–≤–Ω–∞', '–∏–ª—å—è', '–≤–∏–∫—Ç–æ—Ä–æ–≤–∏—á',
            '–æ–≥—Ä–Ω', '–∏–Ω–Ω', '–∫–ø–ø', '–≥—Ä–∫', '—Ä—Ñ', '–µ—Ö—Å–∑', '–ø—Ç–∏', '–∏—Å–ø–æ', '–æ–ø–æ',
            'office', 'eurochem', 'pte', 'out', 'gen', 'mail', 'ilya', 'beloborodov',
            'asya', 'yurmanova', 'e32c', 'e320', 'e230', 'dkc', 'ksp'
        }
        if word_lower in common_false_positives:
            return True
        
        return False
    
    def _get_suggestions(self, word: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
        suggestions = []
        
        # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ
        for dict_word in self.dictionary:
            if self._levenshtein_distance(word.lower(), dict_word) <= 2:
                suggestions.append(dict_word)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        return suggestions[:5] if suggestions else ["–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ"]
    
    def _levenshtein_distance(self, s1: str, s2: str) -> int:
        """–†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞"""
        if len(s1) < len(s2):
            return self._levenshtein_distance(s2, s1)
        
        if len(s2) == 0:
            return len(s1)
        
        previous_row = list(range(len(s2) + 1))
        for i, c1 in enumerate(s1):
            current_row = [i + 1]
            for j, c2 in enumerate(s2):
                insertions = previous_row[j + 1] + 1
                deletions = current_row[j] + 1
                substitutions = previous_row[j] + (c1 != c2)
                current_row.append(min(insertions, deletions, substitutions))
            previous_row = current_row
        
        return previous_row[-1]
    
    def _calculate_overall_accuracy(self, spelling_result: Dict, grammar_result: Dict, text: str) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏"""
        total_words = spelling_result["total_words"]
        spelling_errors = spelling_result["misspelled_count"]
        grammar_errors = grammar_result["total_errors"]
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ, –∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        total_errors = spelling_errors + grammar_errors
        return max(0, (total_words - total_errors) / total_words * 100) if total_words > 0 else 100
