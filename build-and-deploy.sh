#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è AI-NK —Å–∏—Å—Ç–µ–º—ã
set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] ‚úÖ${NC} $1"
}

warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è${NC} $1"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
create_env_file() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env..."
    
    if [ ! -f .env ]; then
        cat > .env << 'EOF'
# Database Configuration
POSTGRES_HOST=norms-db
POSTGRES_PORT=5432
POSTGRES_DB=norms_db
POSTGRES_USER=norms_user
POSTGRES_PASSWORD=norms_password

# Redis Configuration
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=redispass

# Qdrant Configuration
QDRANT_HOST=qdrant
QDRANT_PORT=6333

# Security
JWT_SECRET_KEY=your-secret-key-change-this-in-production
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30

# File Upload Limits
MAX_FILE_SIZE=104857600
MAX_CHECKABLE_DOCUMENT_SIZE=104857600
MAX_NORMATIVE_DOCUMENT_SIZE=209715200

# Timeouts
LLM_REQUEST_TIMEOUT=120
PAGE_PROCESSING_TIMEOUT=300

# Logging
LOG_LEVEL=INFO
TZ=Europe/Moscow

# Keycloak (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
KEYCLOAK_ADMIN=admin
KEYCLOAK_ADMIN_PASSWORD=admin
KEYCLOAK_PORT=8081

# Monitoring (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
PROMETHEUS_PORT=9090
GRAFANA_PORT=3000
GRAFANA_ADMIN_PASSWORD=admin
EOF
        success "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω"
    else
        warning "–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ"
    fi
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
build_image() {
    log "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ AI-NK..."
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
    log "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
    docker image prune -f || true
    
    # –°–±–æ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞
    log "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ ai-nk:latest..."
    docker build -f Dockerfile.production -t ai-nk:latest .
    
    if [ $? -eq 0 ]; then
        success "–û–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω"
    else
        error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –æ–±—Ä–∞–∑–∞"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
start_system() {
    log "–ó–∞–ø—É—Å–∫ AI-NK —Å–∏—Å—Ç–µ–º—ã..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose -f docker-compose.production.yml down || true
    
    # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
    log "–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å docker-compose..."
    docker-compose -f docker-compose.production.yml up -d
    
    if [ $? -eq 0 ]; then
        success "–°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞"
    else
        error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
check_system_health() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    log "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    services=("ai-nk" "norms-db" "qdrant" "redis")
    
    for service in "${services[@]}"; do
        if docker-compose -f docker-compose.production.yml ps | grep -q "$service.*Up"; then
            success "–°–µ—Ä–≤–∏—Å $service –∑–∞–ø—É—â–µ–Ω"
        else
            warning "–°–µ—Ä–≤–∏—Å $service –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã"
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞..."
    if curl -f http://localhost/health >/dev/null 2>&1; then
        success "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        warning "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–∏—Å—ã –µ—â–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
show_system_info() {
    log "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:"
    echo ""
    echo "üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost"
    echo "üîí HTTPS: https://localhost"
    echo "üìä API Gateway: https://localhost:8443"
    echo "üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: localhost:5432"
    echo "üîç Qdrant: http://localhost:6333"
    echo "üî¥ Redis: localhost:6379"
    echo ""
    echo "üìã –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã:"
    echo "   ‚Ä¢ Document Parser: http://localhost:8001"
    echo "   ‚Ä¢ Rule Engine: http://localhost:8002"
    echo "   ‚Ä¢ RAG Service: http://localhost:8003"
    echo "   ‚Ä¢ Calculation Service: http://localhost:8004"
    echo "   ‚Ä¢ VLLM Service: http://localhost:8005"
    echo "   ‚Ä¢ Outgoing Control: http://localhost:8006"
    echo "   ‚Ä¢ Spellchecker: http://localhost:8007"
    echo ""
    echo "üîß –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω):"
    echo "   ‚Ä¢ Prometheus: http://localhost:9090"
    echo "   ‚Ä¢ Grafana: http://localhost:3000"
    echo "   ‚Ä¢ Keycloak: http://localhost:8081"
    echo ""
    echo "üìù –õ–æ–≥–∏:"
    echo "   docker-compose -f docker-compose.production.yml logs -f"
    echo ""
    echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞:"
    echo "   docker-compose -f docker-compose.production.yml down"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
stop_system() {
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ AI-NK —Å–∏—Å—Ç–µ–º—ã..."
    docker-compose -f docker-compose.production.yml down
    success "–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
}

# –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
cleanup_system() {
    log "–û—á–∏—Å—Ç–∫–∞ AI-NK —Å–∏—Å—Ç–µ–º—ã..."
    docker-compose -f docker-compose.production.yml down -v
    docker system prune -f
    success "–°–∏—Å—Ç–µ–º–∞ –æ—á–∏—â–µ–Ω–∞"
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  build     - –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑"
    echo "  start     - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "  stop      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "  restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "  status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
    echo "  logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "  cleanup   - –û—á–∏—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "  deploy    - –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ (build + start)"
    echo "  help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 deploy    # –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
    echo "  $0 start     # –¢–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫"
    echo "  $0 logs      # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    case "${1:-deploy}" in
        "build")
            check_dependencies
            create_env_file
            build_image
            ;;
        "start")
            check_dependencies
            create_env_file
            start_system
            check_system_health
            show_system_info
            ;;
        "stop")
            stop_system
            ;;
        "restart")
            stop_system
            sleep 5
            start_system
            check_system_health
            show_system_info
            ;;
        "status")
            docker-compose -f docker-compose.production.yml ps
            ;;
        "logs")
            docker-compose -f docker-compose.production.yml logs -f
            ;;
        "cleanup")
            cleanup_system
            ;;
        "deploy")
            check_dependencies
            create_env_file
            build_image
            start_system
            check_system_health
            show_system_info
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            show_help
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@"
