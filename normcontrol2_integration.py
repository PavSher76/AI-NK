"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –ù–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å - 2 —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π AI-NK
"""

import logging
import time
from typing import Dict, Any, Optional
from pathlib import Path

from normcontrol2_service import NormControl2Service
from normcontrol2_service.models import ValidationResult, ComplianceStatus

logger = logging.getLogger(__name__)


class NormControl2Integration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –ù–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å - 2 —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    
    def __init__(self):
        self.normcontrol2_service = NormControl2Service()
        self.integration_config = self._load_integration_config()
    
    def _load_integration_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        return {
            "auto_validation": True,
            "save_results": True,
            "results_directory": "normcontrol2_results",
            "notification_enabled": True,
            "integration_timeout": 300
        }
    
    def validate_document_integrated(self, file_path: str, document_id: Optional[str] = None) -> Dict[str, Any]:
        """
        –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        try:
            logger.info(f"üîç [NORM2_INTEGRATION] –ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {file_path}")
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            result = self.normcontrol2_service.validate_document(file_path, document_id)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if self.integration_config["save_results"]:
                self._save_validation_results(result)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if self.integration_config["notification_enabled"]:
                self._send_validation_notification(result)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            integrated_result = self._convert_result_for_integration(result)
            
            logger.info(f"‚úÖ [NORM2_INTEGRATION] –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result.overall_status.value}")
            
            return integrated_result
            
        except Exception as e:
            logger.error(f"‚ùå [NORM2_INTEGRATION] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {file_path}: {e}")
            return self._create_error_result(file_path, str(e), document_id)
    
    def _save_validation_results(self, result: ValidationResult) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_dir = Path(self.integration_config["results_directory"])
            results_dir.mkdir(exist_ok=True)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            timestamp = int(time.time())
            filename = f"normcontrol2_result_{result.document_id}_{timestamp}.json"
            filepath = results_dir / filename
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            import json
            result_dict = self._result_to_dict(result)
            
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(result_dict, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üíæ [NORM2_INTEGRATION] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filepath}")
            
        except Exception as e:
            logger.error(f"‚ùå [NORM2_INTEGRATION] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def _send_validation_notification(self, result: ValidationResult) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if result.overall_status == ComplianceStatus.CRITICAL_ISSUES:
                level = "CRITICAL"
            elif result.overall_status == ComplianceStatus.NON_COMPLIANT:
                level = "HIGH"
            elif result.overall_status == ComplianceStatus.NEEDS_REVIEW:
                level = "MEDIUM"
            else:
                level = "INFO"
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = f"""
üîç –ù–û–†–ú–û–ö–û–ù–¢–†–û–õ–¨ - 2: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏

üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {result.document_name}
üÜî ID: {result.document_id}
üìä –°—Ç–∞—Ç—É—Å: {result.overall_status.value}
üìà –û—Ü–µ–Ω–∫–∞: {result.compliance_score:.1f}%

‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã:
  ‚Ä¢ –í—Å–µ–≥–æ: {result.total_issues}
  ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {result.critical_issues}
  ‚Ä¢ –í—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {result.high_issues}
  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {result.medium_issues}

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
{chr(10).join(f"  ‚Ä¢ {rec}" for rec in result.recommendations[:3])}
"""
            
            logger.info(f"üì¢ [NORM2_INTEGRATION] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [{level}]: {message.strip()}")
            
        except Exception as e:
            logger.error(f"‚ùå [NORM2_INTEGRATION] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def _convert_result_for_integration(self, result: ValidationResult) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
        return {
            "success": True,
            "service": "normcontrol2",
            "document_id": result.document_id,
            "document_name": result.document_name,
            "document_format": result.document_format.value,
            "validation_time": result.validation_time.isoformat(),
            "overall_status": result.overall_status.value,
            "compliance_score": result.compliance_score,
            "total_issues": result.total_issues,
            "issues_by_severity": {
                "critical": result.critical_issues,
                "high": result.high_issues,
                "medium": result.medium_issues,
                "low": result.low_issues,
                "info": result.info_issues
            },
            "categories": result.categories,
            "recommendations": result.recommendations,
            "metadata": result.metadata,
            "integration_timestamp": time.time()
        }
    
    def _result_to_dict(self, result: ValidationResult) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON"""
        return {
            "document_id": result.document_id,
            "document_name": result.document_name,
            "document_format": result.document_format.value,
            "validation_time": result.validation_time.isoformat(),
            "overall_status": result.overall_status.value,
            "compliance_score": result.compliance_score,
            "total_issues": result.total_issues,
            "critical_issues": result.critical_issues,
            "high_issues": result.high_issues,
            "medium_issues": result.medium_issues,
            "low_issues": result.low_issues,
            "info_issues": result.info_issues,
            "issues": [
                {
                    "id": issue.id,
                    "category": issue.category,
                    "severity": issue.severity.value,
                    "title": issue.title,
                    "description": issue.description,
                    "recommendation": issue.recommendation,
                    "page_number": issue.page_number,
                    "coordinates": issue.coordinates,
                    "rule_reference": issue.rule_reference
                }
                for issue in result.issues
            ],
            "categories": result.categories,
            "recommendations": result.recommendations,
            "metadata": result.metadata
        }
    
    def _create_error_result(self, file_path: str, error_message: str, document_id: Optional[str]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –æ—à–∏–±–∫–æ–π"""
        return {
            "success": False,
            "service": "normcontrol2",
            "document_id": document_id or str(int(time.time())),
            "document_name": Path(file_path).name,
            "error": error_message,
            "validation_time": time.time(),
            "integration_timestamp": time.time()
        }
    
    def get_validation_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        try:
            results_dir = Path(self.integration_config["results_directory"])
            if not results_dir.exists():
                return {"total_validations": 0}
            
            # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            result_files = list(results_dir.glob("normcontrol2_result_*.json"))
            total_validations = len(result_files)
            
            if total_validations == 0:
                return {"total_validations": 0}
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            compliance_scores = []
            status_counts = {}
            category_counts = {}
            
            for result_file in result_files:
                try:
                    import json
                    with open(result_file, 'r', encoding='utf-8') as f:
                        result_data = json.load(f)
                    
                    compliance_scores.append(result_data.get("compliance_score", 0))
                    
                    status = result_data.get("overall_status", "unknown")
                    status_counts[status] = status_counts.get(status, 0) + 1
                    
                    categories = result_data.get("categories", {})
                    for category, data in categories.items():
                        category_counts[category] = category_counts.get(category, 0) + data.get("total_issues", 0)
                
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {result_file}: {e}")
                    continue
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            avg_compliance_score = sum(compliance_scores) / len(compliance_scores) if compliance_scores else 0
            
            return {
                "total_validations": total_validations,
                "average_compliance_score": round(avg_compliance_score, 2),
                "status_distribution": status_counts,
                "category_issues": category_counts,
                "last_validation": max([f.stat().st_mtime for f in result_files]) if result_files else 0
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"error": str(e)}
    
    def cleanup_old_results(self, days_to_keep: int = 30) -> int:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            results_dir = Path(self.integration_config["results_directory"])
            if not results_dir.exists():
                return 0
            
            import time
            current_time = time.time()
            cutoff_time = current_time - (days_to_keep * 24 * 60 * 60)
            
            deleted_count = 0
            for result_file in results_dir.glob("normcontrol2_result_*.json"):
                if result_file.stat().st_mtime < cutoff_time:
                    result_file.unlink()
                    deleted_count += 1
            
            logger.info(f"üßπ [NORM2_INTEGRATION] –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {deleted_count}")
            return deleted_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return 0


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
normcontrol2_integration = NormControl2Integration()


def validate_document_with_normcontrol2(file_path: str, document_id: Optional[str] = None) -> Dict[str, Any]:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    """
    return normcontrol2_integration.validate_document_integrated(file_path, document_id)


def get_normcontrol2_statistics() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥—É–ª—è –ù–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å - 2
    """
    return normcontrol2_integration.get_validation_statistics()


def cleanup_normcontrol2_results(days_to_keep: int = 30) -> int:
    """
    –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–¥—É–ª—è –ù–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å - 2
    """
    return normcontrol2_integration.cleanup_old_results(days_to_keep)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ú–û–î–£–õ–Ø –ù–û–†–ú–û–ö–û–ù–¢–†–û–õ–¨ - 2")
    print()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file = "test_document.pdf"
    
    if Path(test_file).exists():
        print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {test_file}")
        result = validate_document_with_normcontrol2(test_file, "test_doc_001")
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('success', False)}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {result.get('overall_status', 'unknown')}")
        print(f"üìà –û—Ü–µ–Ω–∫–∞: {result.get('compliance_score', 0):.1f}%")
        print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º: {result.get('total_issues', 0)}")
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª—è:")
    stats = get_normcontrol2_statistics()
    for key, value in stats.items():
        print(f"  {key}: {value}")
    
    print()
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
