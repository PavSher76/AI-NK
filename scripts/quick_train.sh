#!/bin/bash

# üéì –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã AI-NK
# –ê–≤—Ç–æ—Ä: AI Assistant
# –í–µ—Ä—Å–∏—è: 1.0.0

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${BLUE}"
    echo "üéì –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è AI-NK"
    echo "================================"
    echo -e "${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if ! command -v python3 &> /dev/null; then
        print_error "Python3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
check_system_status() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã AI-NK..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if ! docker-compose ps | grep -q "Up"; then
        print_warning "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞–µ–º..."
        docker-compose up -d
        sleep 30  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    if curl -k -s "https://localhost/api/health" > /dev/null; then
        print_success "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_error "–°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        exit 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
create_folder_structure() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è..."
    
    mkdir -p TestDocs/for_check/{–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ,–°_–æ—à–∏–±–∫–∞–º–∏,–ü–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–µ}
    mkdir -p TestDocs/Norms/{–ì–û–°–¢,–°–ü,–°–ù–∏–ü,–í–µ–¥–æ–º—Å—Ç–≤–µ–Ω–Ω—ã–µ}
    mkdir -p scripts/results
    
    print_success "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python
install_python_deps() {
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [ ! -d "training_env" ]; then
        print_info "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        python3 -m venv training_env
    fi
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    source training_env/bin/activate && pip install requests psycopg2-binary > /dev/null 2>&1 || {
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
        print_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é: source training_env/bin/activate && pip install requests psycopg2-binary"
    }
    
    print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏"
}

# –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
run_training() {
    print_info "–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è..."
    
    cd scripts
    
    if [ -f "train_system.py" ]; then
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
        source ../training_env/bin/activate && python3 train_system.py
    else
        print_error "–°–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: scripts/train_system.py"
        exit 1
    fi
    
    cd ..
}

# –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
analyze_results() {
    print_info "–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è..."
    
    if [ -f "scripts/training_results.json" ]; then
        echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è:"
        echo "========================"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        f1_score=$(source training_env/bin/activate && python3 -c "
import json
with open('scripts/training_results.json', 'r', encoding='utf-8') as f:
    data = json.load(f)
    metrics = data.get('overall_metrics', {})
    print(f\"F1-Score: {metrics.get('f1_score', 0):.3f}\")
    print(f\"Precision: {metrics.get('precision', 0):.3f}\")
    print(f\"Recall: {metrics.get('recall', 0):.3f}\")
    print(f\"–¢–µ—Å—Ç–æ–≤: {metrics.get('successful_tests', 0)}/{metrics.get('total_tests', 0)}\")
")
        echo "$f1_score"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        f1_value=$(source training_env/bin/activate && python3 -c "
import json
with open('scripts/training_results.json', 'r', encoding='utf-8') as f:
    data = json.load(f)
    metrics = data.get('overall_metrics', {})
    print(metrics.get('f1_score', 0))
")
        
        if (( $(echo "$f1_value >= 0.9" | bc -l) )); then
            print_success "–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É."
        elif (( $(echo "$f1_value >= 0.8" | bc -l) )); then
            print_warning "–•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞."
        elif (( $(echo "$f1_value >= 0.7" | bc -l) )); then
            print_warning "–°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤."
        else
            print_error "–ù–∏–∑–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã."
        fi
        
    else
        print_warning "–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  -h, --help     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo "  -s, --setup    –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    echo "  -t, --train    –¢–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è"
    echo "  -a, --analyze  –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0              # –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è"
    echo "  $0 --setup      # –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
    echo "  $0 --train      # –¢–æ–ª—å–∫–æ –æ–±—É—á–µ–Ω–∏–µ"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    case "${1:-}" in
        -h|--help)
            show_help
            exit 0
            ;;
        -s|--setup)
            print_info "–†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
            check_dependencies
            check_system_status
            create_folder_structure
            install_python_deps
            print_success "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            exit 0
            ;;
        -t|--train)
            print_info "–†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –æ–±—É—á–µ–Ω–∏–µ"
            run_training
            exit 0
            ;;
        -a|--analyze)
            print_info "–†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑"
            analyze_results
            exit 0
            ;;
        "")
            # –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_help
            exit 1
            ;;
    esac
    
    # –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
    print_info "–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è..."
    
    check_dependencies
    check_system_status
    create_folder_structure
    install_python_deps
    run_training
    analyze_results
    
    print_success "–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    echo ""
    echo "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:"
    echo "  - scripts/training_results.json"
    echo "  - scripts/training.log"
    echo ""
    echo "üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
    echo "  - TRAINING_GUIDE.md - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
    echo "  - https://localhost - –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∏—Å—Ç–µ–º—ã"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
