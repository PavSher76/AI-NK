#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è OCR —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∏ —á–µ—Ä—Ç–µ–∂–µ–π
"""

import sys
import os
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'utils'))

from utils.document_parser import UniversalDocumentParser
from utils.ocr_processor import OCRProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def demo_ocr_system(pdf_path: str):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è OCR —Å–∏—Å—Ç–µ–º—ã"""
    try:
        print("üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è OCR —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∏ —á–µ—Ä—Ç–µ–∂–µ–π")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(pdf_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
            return False
        
        print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {pdf_path}")
        print()
        
        # 1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        print("1Ô∏è‚É£ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä (–±–µ–∑ OCR):")
        print("-" * 40)
        
        parser_standard = UniversalDocumentParser(use_ocr=False)
        result_standard = parser_standard.parse_document(pdf_path)
        
        if result_standard.get("success", False):
            text_standard = result_standard.get("text", "")
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(text_standard)} —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞")
            print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {result_standard.get('total_pages', 0)}")
            print(f"üîß –ú–µ—Ç–æ–¥: {result_standard.get('method', 'N/A')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
            if text_standard:
                print(f"üìù –ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞: {text_standard[:200]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result_standard.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        print()
        
        # 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å OCR
        print("2Ô∏è‚É£ –ü–∞—Ä—Å–µ—Ä —Å OCR (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ —á–µ—Ä—Ç–µ–∂–µ–π):")
        print("-" * 40)
        
        parser_ocr = UniversalDocumentParser(use_ocr=True)
        result_ocr = parser_ocr.parse_document(pdf_path)
        
        if result_ocr.get("success", False):
            text_ocr = result_ocr.get("text", "")
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(text_ocr)} —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞")
            print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {result_ocr.get('total_pages', 0)}")
            print(f"üîß –ú–µ—Ç–æ–¥: {result_ocr.get('method', 'N/A')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º OCR –¥–∞–Ω–Ω—ã–µ
            ocr_data = result_ocr.get("ocr_data", {})
            if ocr_data:
                print(f"üîç OCR –¥–∞–Ω–Ω—ã–µ:")
                print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {ocr_data.get('processing_time', 0):.2f} —Å–µ–∫")
                print(f"   üìä –¢–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω–æ: {len(ocr_data.get('tables', []))}")
                print(f"   üìê –ß–µ—Ä—Ç–µ–∂–µ–π –Ω–∞–π–¥–µ–Ω–æ: {len(ocr_data.get('drawings', []))}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
                tables = ocr_data.get("tables", [])
                if tables:
                    print(f"\nüìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
                    for i, table in enumerate(tables, 1):
                        print(f"   –¢–∞–±–ª–∏—Ü–∞ {i}:")
                        print(f"     üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {table.get('page_number', 'N/A')}")
                        print(f"     üìè –ü–ª–æ—â–∞–¥—å: {table.get('area', 0)} –ø–∏–∫—Å–µ–ª–µ–π")
                        print(f"     üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {table.get('confidence', 0):.2f}")
                        table_text = table.get('text', '')
                        if table_text:
                            print(f"     üìù –¢–µ–∫—Å—Ç: {table_text[:100]}...")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ä—Ç–µ–∂–∏
                drawings = ocr_data.get("drawings", [])
                if drawings:
                    print(f"\nüìê –ù–∞–π–¥–µ–Ω–Ω—ã–µ —á–µ—Ä—Ç–µ–∂–∏:")
                    for i, drawing in enumerate(drawings, 1):
                        print(f"   –ß–µ—Ä—Ç–µ–∂ {i}:")
                        print(f"     üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {drawing.get('page_number', 'N/A')}")
                        print(f"     üìè –ü–ª–æ—â–∞–¥—å: {drawing.get('area', 0)} –ø–∏–∫—Å–µ–ª–µ–π")
                        print(f"     üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {drawing.get('aspect_ratio', 0):.2f}")
                        print(f"     üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {drawing.get('confidence', 0):.2f}")
                        drawing_text = drawing.get('text', '')
                        if drawing_text:
                            print(f"     üìù –¢–µ–∫—Å—Ç: {drawing_text[:100]}...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ —Ç–µ–∫—Å—Ç–µ
            if text_standard and text_ocr:
                diff = len(text_ocr) - len(text_standard)
                if diff > 0:
                    print(f"\nüìà –£–ª—É—á—à–µ–Ω–∏–µ: OCR –¥–æ–±–∞–≤–∏–ª {diff} —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞")
                elif diff < 0:
                    print(f"\nüìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: OCR –∏–∑–º–µ–Ω–∏–ª —Ç–µ–∫—Å—Ç –Ω–∞ {abs(diff)} —Å–∏–º–≤–æ–ª–æ–≤")
                else:
                    print(f"\nüìä –¢–µ–∫—Å—Ç –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result_ocr.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        print()
        
        # 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä—è–º–æ–≥–æ OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        print("3Ô∏è‚É£ –ü—Ä—è–º–æ–π OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä:")
        print("-" * 40)
        
        ocr_processor = OCRProcessor()
        ocr_result = ocr_processor.process_pdf_with_ocr(pdf_path)
        
        if ocr_result.get("success", False):
            print(f"‚úÖ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞")
            print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {ocr_result.get('total_pages', 0)}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {ocr_result.get('processing_time', 0):.2f} —Å–µ–∫")
            print(f"üìä –¢–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω–æ: {len(ocr_result.get('tables', []))}")
            print(f"üìê –ß–µ—Ä—Ç–µ–∂–µ–π –Ω–∞–π–¥–µ–Ω–æ: {len(ocr_result.get('drawings', []))}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            pages = ocr_result.get("pages", [])
            if pages:
                print(f"\nüìÑ –î–µ—Ç–∞–ª–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º:")
                for page in pages:
                    page_num = page.get("page_number", "N/A")
                    confidence = page.get("confidence", 0)
                    tables_count = len(page.get("tables", []))
                    drawings_count = len(page.get("drawings", []))
                    print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.2f}, —Ç–∞–±–ª–∏—Ü {tables_count}, —á–µ—Ä—Ç–µ–∂–µ–π {drawings_count}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ OCR: {ocr_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        print()
        print("=" * 60)
        print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python demo_ocr_system.py <–ø—É—Ç—å_–∫_pdf_—Ñ–∞–π–ª—É>")
        print("\n–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python demo_ocr_system.py test_new_document.pdf")
        print("  python demo_ocr_system.py /path/to/document.pdf")
        sys.exit(1)
    
    pdf_path = sys.argv[1]
    
    success = demo_ocr_system(pdf_path)
    
    if success:
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)


if __name__ == "__main__":
    main()
