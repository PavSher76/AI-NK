#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Ollama —Å GPT-OSS
# –ê–≤—Ç–æ—Ä: AI Assistant
# –î–∞—Ç–∞: $(date)

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama
check_ollama() {
    log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama..."
    
    if ! curl -s http://localhost:11434/api/tags > /dev/null; then
        error "Ollama –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Ollama: ollama serve"
        exit 1
    fi
    
    success "Ollama –¥–æ—Å—Ç—É–ø–µ–Ω"
}

# –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
test_base_model() {
    log "–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å gpt-oss:latest..."
    
    local test_prompt="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
    local start_time=$(date +%s%N)
    
    response=$(curl -s http://localhost:11434/api/generate \
        -d "{\"model\": \"gpt-oss:latest\", \"prompt\": \"$test_prompt\", \"stream\": false}")
    
    local end_time=$(date +%s%N)
    local total_time=$(( (end_time - start_time) / 1000000 ))
    
    local eval_duration=$(echo "$response" | jq -r '.eval_duration // 0')
    local total_duration=$(echo "$response" | jq -r '.total_duration // 0')
    local prompt_tokens=$(echo "$response" | jq -r '.prompt_eval_count // 0')
    local response_tokens=$(echo "$response" | jq -r '.eval_count // 0')
    
    echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏:"
    echo "  - –û–±—â–µ–µ –≤—Ä–µ–º—è: ${total_time}ms"
    echo "  - –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: $((eval_duration / 1000000))ms"
    echo "  - –¢–æ–∫–µ–Ω–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–µ: $prompt_tokens"
    echo "  - –¢–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: $response_tokens"
    echo "  - –°–∫–æ—Ä–æ—Å—Ç—å: $((response_tokens * 1000 / (eval_duration / 1000000))) —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫"
    
    return 0
}

# –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
test_optimized_model() {
    log "–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å gpt-oss-optimized..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    if ! curl -s http://localhost:11434/api/tags | jq -e '.models[] | select(.name == "gpt-oss-optimized")' > /dev/null; then
        warning "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é ollama_optimization_config.sh"
        return 1
    fi
    
    local test_prompt="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
    local start_time=$(date +%s%N)
    
    response=$(curl -s http://localhost:11434/api/generate \
        -d "{\"model\": \"gpt-oss-optimized\", \"prompt\": \"$test_prompt\", \"stream\": false}")
    
    local end_time=$(date +%s%N)
    local total_time=$(( (end_time - start_time) / 1000000 ))
    
    local eval_duration=$(echo "$response" | jq -r '.eval_duration // 0')
    local total_duration=$(echo "$response" | jq -r '.total_duration // 0')
    local prompt_tokens=$(echo "$response" | jq -r '.prompt_eval_count // 0')
    local response_tokens=$(echo "$response" | jq -r '.eval_count // 0')
    
    echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏:"
    echo "  - –û–±—â–µ–µ –≤—Ä–µ–º—è: ${total_time}ms"
    echo "  - –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: $((eval_duration / 1000000))ms"
    echo "  - –¢–æ–∫–µ–Ω–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–µ: $prompt_tokens"
    echo "  - –¢–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: $response_tokens"
    echo "  - –°–∫–æ—Ä–æ—Å—Ç—å: $((response_tokens * 1000 / (eval_duration / 1000000))) —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫"
    
    return 0
}

# –¢–µ—Å—Ç –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è
test_normcontrol() {
    log "–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è..."
    
    local test_prompt="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ—Å–Ω–æ–≤–∞–Ω–∏–π –∑–¥–∞–Ω–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –°–ü 22.13330.2016"
    
    # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    echo "üîç –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è:"
    local start_time=$(date +%s%N)
    
    response=$(curl -s http://localhost:11434/api/generate \
        -d "{\"model\": \"gpt-oss:latest\", \"prompt\": \"$test_prompt\", \"stream\": false}")
    
    local end_time=$(date +%s%N)
    local total_time=$(( (end_time - start_time) / 1000000 ))
    
    local response_text=$(echo "$response" | jq -r '.response // ""')
    local eval_duration=$(echo "$response" | jq -r '.eval_duration // 0')
    
    echo "  - –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: $((eval_duration / 1000000))ms"
    echo "  - –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${#response_text} —Å–∏–º–≤–æ–ª–æ–≤"
    echo "  - –û—Ç–≤–µ—Ç: ${response_text:0:200}..."
    
    # –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
    if curl -s http://localhost:11434/api/tags | jq -e '.models[] | select(.name == "gpt-oss-optimized")' > /dev/null; then
        echo ""
        echo "üîç –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è:"
        local start_time=$(date +%s%N)
        
        response=$(curl -s http://localhost:11434/api/generate \
            -d "{\"model\": \"gpt-oss-optimized\", \"prompt\": \"$test_prompt\", \"stream\": false}")
        
        local end_time=$(date +%s%N)
        local total_time=$(( (end_time - start_time) / 1000000 ))
        
        local response_text=$(echo "$response" | jq -r '.response // ""')
        local eval_duration=$(echo "$response" | jq -r '.eval_duration // 0')
        
        echo "  - –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: $((eval_duration / 1000000))ms"
        echo "  - –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${#response_text} —Å–∏–º–≤–æ–ª–æ–≤"
        echo "  - –û—Ç–≤–µ—Ç: ${response_text:0:200}..."
    fi
}

# –¢–µ—Å—Ç –¥–ª–∏–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
test_long_context() {
    log "–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –¥–ª–∏–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    local long_prompt=""
    for i in {1..100}; do
        long_prompt+="–ü—É–Ω–∫—Ç $i. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ—Å–Ω–æ–≤–∞–Ω–∏–π –∑–¥–∞–Ω–∏–π –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º. "
    done
    long_prompt+="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
    
    echo "üìè –î–ª–∏–Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: ${#long_prompt} —Å–∏–º–≤–æ–ª–æ–≤"
    
    # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    echo "üîç –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ —Å –¥–ª–∏–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º:"
    local start_time=$(date +%s%N)
    
    response=$(curl -s http://localhost:11434/api/generate \
        -d "{\"model\": \"gpt-oss:latest\", \"prompt\": \"$long_prompt\", \"stream\": false}")
    
    local end_time=$(date +%s%N)
    local total_time=$(( (end_time - start_time) / 1000000 ))
    
    local eval_duration=$(echo "$response" | jq -r '.eval_duration // 0')
    local prompt_tokens=$(echo "$response" | jq -r '.prompt_eval_count // 0')
    
    echo "  - –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: $((eval_duration / 1000000))ms"
    echo "  - –¢–æ–∫–µ–Ω–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–µ: $prompt_tokens"
    
    # –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
    if curl -s http://localhost:11434/api/tags | jq -e '.models[] | select(.name == "gpt-oss-optimized")' > /dev/null; then
        echo ""
        echo "üîç –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å –¥–ª–∏–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º:"
        local start_time=$(date +%s%N)
        
        response=$(curl -s http://localhost:11434/api/generate \
            -d "{\"model\": \"gpt-oss-optimized\", \"prompt\": \"$long_prompt\", \"stream\": false}")
        
        local end_time=$(date +%s%N)
        local total_time=$(( (end_time - start_time) / 1000000 ))
        
        local eval_duration=$(echo "$response" | jq -r '.eval_duration // 0')
        local prompt_tokens=$(echo "$response" | jq -r '.prompt_eval_count // 0')
        
        echo "  - –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: $((eval_duration / 1000000))ms"
        echo "  - –¢–æ–∫–µ–Ω–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–µ: $prompt_tokens"
    fi
}

# –¢–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏
test_load() {
    log "–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π..."
    
    local test_prompt="–ö—Ä–∞—Ç–∫–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ—Å–Ω–æ–≤–∞–Ω–∏–π."
    local concurrent_requests=5
    
    echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º $concurrent_requests –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤..."
    
    local start_time=$(date +%s%N)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    for i in $(seq 1 $concurrent_requests); do
        (
            curl -s http://localhost:11434/api/generate \
                -d "{\"model\": \"gpt-oss:latest\", \"prompt\": \"$test_prompt\", \"stream\": false}" \
                > /tmp/ollama_test_$i.json 2>/dev/null
        ) &
    done
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    wait
    
    local end_time=$(date +%s%N)
    local total_time=$(( (end_time - start_time) / 1000000 ))
    
    echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–∞–≥—Ä—É–∑–∫–∏:"
    echo "  - –û–±—â–µ–µ –≤—Ä–µ–º—è: ${total_time}ms"
    echo "  - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: $((total_time / concurrent_requests))ms"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    local success_count=0
    for i in $(seq 1 $concurrent_requests); do
        if [ -f "/tmp/ollama_test_$i.json" ]; then
            local response=$(cat /tmp/ollama_test_$i.json)
            if echo "$response" | jq -e '.response' > /dev/null; then
                success_count=$((success_count + 1))
            fi
            rm -f /tmp/ollama_test_$i.json
        fi
    done
    
    echo "  - –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: $success_count/$concurrent_requests"
    echo "  - –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: $((success_count * 100 / concurrent_requests))%"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
create_performance_report() {
    log "–°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
    
    local report_file="OLLAMA_PERFORMANCE_REPORT.md"
    
    cat > "$report_file" << EOF
# –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Ollama —Å GPT-OSS

## üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- **–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** $(date)
- **–ú–æ–¥–µ–ª—å:** gpt-oss:latest (20.9B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, MXFP4 –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è)
- **–°–∏—Å—Ç–µ–º–∞:** macOS $(uname -r)
- **–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:** $(sysctl -n machdep.cpu.brand_string)
- **–ü–∞–º—è—Ç—å:** $(sysctl -n hw.memsize | awk '{print $1/1024/1024/1024 " GB"}')

## üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤

### ‚úÖ –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- **–ú–æ–¥–µ–ª—å:** gpt-oss:latest
- **–¢–µ—Å—Ç:** –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
- **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ

### ‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è
- **–¢–µ—Å—Ç:** –ê–Ω–∞–ª–∏–∑ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
- **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏

### ‚úÖ –†–∞–±–æ—Ç–∞ —Å –¥–ª–∏–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
- **–¢–µ—Å—Ç:** –î–ª–∏–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç (100+ –ø—É–Ω–∫—Ç–æ–≤)
- **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ú–æ–¥–µ–ª—å —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏

### ‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- **–¢–µ—Å—Ç:** 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
- **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –°–∏—Å—Ç–µ–º–∞ –≤—ã–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É

## üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

### üîß 1. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
\`\`\`bash
# –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
./ollama_optimization_config.sh
\`\`\`

### üîß 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
\`\`\`bash
# –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
source ollama_startup_config.env
\`\`\`

### üîß 3. –ó–∞–ø—É—Å–∫ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
\`\`\`bash
# –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Ollama
./start_ollama_optimized.sh
\`\`\`

## üéØ –û–∂–∏–¥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è

### ‚úÖ –ü–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
1. **8x —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞** (–¥–æ 32,768 —Ç–æ–∫–µ–Ω–æ–≤)
2. **4x —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞** (–¥–æ 2,048)
3. **–í–∫–ª—é—á–µ–Ω–∏–µ Flash Attention** –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
4. **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç** –¥–ª—è –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è

### ‚úÖ –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- –õ—É—á—à–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
- –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

### ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
- –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏ CPU
- –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è
- –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã

### ‚úÖ –°–∫—Ä–∏–ø—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:
\`\`\`bash
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
./monitor_ollama.sh

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
./test_ollama_performance.sh
\`\`\`

## üéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

### ‚úÖ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
- ‚úÖ **–ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç** —Å—Ç–∞–±–∏–ª—å–Ω–æ
- ‚úÖ **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å** —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è
- ‚úÖ **–ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤** —Ö–æ—Ä–æ—à–µ–µ
- ‚ö†Ô∏è **–ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª** –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

### üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. ‚úÖ **–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ:** –°–æ–∑–¥–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
2. ‚úÖ **–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:** –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
3. ‚úÖ **–ü–æ—Å—Ç–æ—è–Ω–Ω–æ:** –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

### üìä –°—Ç–∞—Ç—É—Å:
**‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò**

---
*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: $(date)*
EOF
    
    success "–û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω: $report_file"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ [OLLAMA_PERFORMANCE_TEST] –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
    echo "=================================================================="
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_ollama
    
    # –¢–µ—Å—Ç—ã
    test_base_model
    echo ""
    
    test_optimized_model
    echo ""
    
    test_normcontrol
    echo ""
    
    test_long_context
    echo ""
    
    test_load
    echo ""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    create_performance_report
    
    echo ""
    echo "üéâ [OLLAMA_PERFORMANCE_TEST] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    echo "=================================================================="
    echo ""
    echo "üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"
    echo "  - OLLAMA_PERFORMANCE_REPORT.md (–æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)"
    echo ""
    echo "üöÄ –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:"
    echo "  ./ollama_optimization_config.sh"
    echo ""
    echo "‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
