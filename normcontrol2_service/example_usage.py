"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –ù–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å - 2
"""

import logging
from pathlib import Path
from normcontrol2_service import NormControl2Service
from normcontrol2_service.models import DocumentFormat, ComplianceStatus

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def example_validate_pdf_document():
    """–ü—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    print("=" * 80)
    print("–ü–†–ò–ú–ï–† –í–ê–õ–ò–î–ê–¶–ò–ò PDF –î–û–ö–£–ú–ï–ù–¢–ê")
    print("=" * 80)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    service = NormControl2Service()
    
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
    file_path = "test_document.pdf"
    
    if not Path(file_path).exists():
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {file_path}")
        result = service.validate_document(file_path)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print_validation_results(result)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")


def example_validate_dwg_document():
    """–ü—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–∏ DWG –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    print("=" * 80)
    print("–ü–†–ò–ú–ï–† –í–ê–õ–ò–î–ê–¶–ò–ò DWG –î–û–ö–£–ú–ï–ù–¢–ê")
    print("=" * 80)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    service = NormControl2Service()
    
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
    file_path = "test_document.dwg"
    
    if not Path(file_path).exists():
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {file_path}")
        result = service.validate_document(file_path)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print_validation_results(result)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")


def example_batch_validation():
    """–ü—Ä–∏–º–µ—Ä –ø–∞–∫–µ—Ç–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("=" * 80)
    print("–ü–†–ò–ú–ï–† –ü–ê–ö–ï–¢–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò")
    print("=" * 80)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    service = NormControl2Service()
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    file_paths = [
        "document1.pdf",
        "document2.dwg",
        "document3.dxf",
        "document4.docx"
    ]
    
    print(f"üìÅ –í–∞–ª–∏–¥–∞—Ü–∏—è {len(file_paths)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
    for file_path in file_paths:
        print(f"  - {file_path}")
    
    print()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    results = []
    for file_path in file_paths:
        if Path(file_path).exists():
            try:
                print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: {file_path}")
                result = service.validate_document(file_path)
                results.append(result)
                print(f"  ‚úÖ –°—Ç–∞—Ç—É—Å: {result.overall_status.value}")
                print(f"  üìä –û—Ü–µ–Ω–∫–∞: {result.compliance_score:.1f}%")
                print(f"  ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º: {result.total_issues}")
                print()
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
                print()
        else:
            print(f"  ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            print()
    
    # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if results:
        print("üìä –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(results)}")
        print(f"  –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {sum(r.compliance_score for r in results) / len(results):.1f}%")
        print(f"  –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {sum(r.total_issues for r in results)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        for result in results:
            status = result.overall_status.value
            status_counts[status] = status_counts.get(status, 0) + 1
        
        print("  –°—Ç–∞—Ç—É—Å—ã:")
        for status, count in status_counts.items():
            print(f"    {status}: {count}")


def print_validation_results(result):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print(f"\nüìÑ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò")
    print(f"  –î–æ–∫—É–º–µ–Ω—Ç: {result.document_name}")
    print(f"  –§–æ—Ä–º–∞—Ç: {result.document_format.value}")
    print(f"  ID: {result.document_id}")
    print(f"  –í—Ä–µ–º—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {result.validation_time}")
    
    print(f"\nüìä –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê")
    print(f"  –°—Ç–∞—Ç—É—Å: {get_status_emoji(result.overall_status)} {result.overall_status.value}")
    print(f"  –û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {result.compliance_score:.1f}%")
    
    print(f"\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´")
    print(f"  –í—Å–µ–≥–æ: {result.total_issues}")
    print(f"  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {result.critical_issues}")
    print(f"  –í—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {result.high_issues}")
    print(f"  –°—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {result.medium_issues}")
    print(f"  –ù–∏–∑–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {result.low_issues}")
    print(f"  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö: {result.info_issues}")
    
    # –ü—Ä–æ–±–ª–µ–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if result.categories:
        print(f"\nüìã –ü–†–û–ë–õ–ï–ú–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú")
        for category, data in result.categories.items():
            print(f"  {category}: {data['total_issues']} –ø—Ä–æ–±–ª–µ–º")
            if data['critical_issues'] > 0:
                print(f"    –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {data['critical_issues']}")
            if data['high_issues'] > 0:
                print(f"    –í—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {data['high_issues']}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if result.recommendations:
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        for i, rec in enumerate(result.recommendations, 1):
            print(f"  {i}. {rec}")
    
    # –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º
    if result.issues:
        print(f"\nüîç –î–ï–¢–ê–õ–ò –ü–†–û–ë–õ–ï–ú")
        for i, issue in enumerate(result.issues[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"  {i}. [{issue.severity.value.upper()}] {issue.title}")
            print(f"     {issue.description}")
            print(f"     üí° {issue.recommendation}")
            if issue.page_number:
                print(f"     üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {issue.page_number}")
            print()
        
        if len(result.issues) > 10:
            print(f"  ... –∏ –µ—â–µ {len(result.issues) - 10} –ø—Ä–æ–±–ª–µ–º")


def get_status_emoji(status: ComplianceStatus) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    emoji_map = {
        ComplianceStatus.COMPLIANT: "‚úÖ",
        ComplianceStatus.COMPLIANT_WITH_WARNINGS: "‚ö†Ô∏è",
        ComplianceStatus.NON_COMPLIANT: "‚ùå",
        ComplianceStatus.CRITICAL_ISSUES: "üö´",
        ComplianceStatus.NEEDS_REVIEW: "üîç"
    }
    return emoji_map.get(status, "‚ùì")


def example_custom_validation():
    """–ü—Ä–∏–º–µ—Ä –∫–∞—Å—Ç–æ–º–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    print("=" * 80)
    print("–ü–†–ò–ú–ï–† –ö–ê–°–¢–û–ú–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò")
    print("=" * 80)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    service = NormControl2Service()
    
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
    file_path = "test_document.pdf"
    
    if not Path(file_path).exists():
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º ID
        print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {file_path}")
        result = service.validate_document(file_path, document_id="custom_doc_001")
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print_validation_results(result)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print(f"\nüî¨ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó")
        print(f"  –í—Ä–µ–º—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {result.metadata.get('validation_time_seconds', 0):.2f} —Å–µ–∫")
        print(f"  –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {result.metadata.get('file_size', 0) / 1024 / 1024:.2f} –ú–ë")
        print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {result.metadata.get('page_count', 0)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")


if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–ò–ú–ï–†–û–í –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ú–û–î–£–õ–Ø –ù–û–†–ú–û–ö–û–ù–¢–†–û–õ–¨ - 2")
    print()
    
    # –ü—Ä–∏–º–µ—Ä 1: –í–∞–ª–∏–¥–∞—Ü–∏—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
    example_validate_pdf_document()
    print()
    
    # –ü—Ä–∏–º–µ—Ä 2: –í–∞–ª–∏–¥–∞—Ü–∏—è DWG –¥–æ–∫—É–º–µ–Ω—Ç–∞
    example_validate_dwg_document()
    print()
    
    # –ü—Ä–∏–º–µ—Ä 3: –ü–∞–∫–µ—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    example_batch_validation()
    print()
    
    # –ü—Ä–∏–º–µ—Ä 4: –ö–∞—Å—Ç–æ–º–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    example_custom_validation()
    print()
    
    print("‚úÖ –ü–†–ò–ú–ï–†–´ –ó–ê–í–ï–†–®–ï–ù–´")
