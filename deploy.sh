#!/bin/bash

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[–û–®–ò–ë–ö–ê]${NC} $1"
}

success() {
    echo -e "${GREEN}[–£–°–ü–ï–•]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤..."
    
    local ports=(80 443 8001 8002 8003 8004)
    local occupied_ports=()
    
    for port in "${ports[@]}"; do
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
            occupied_ports+=($port)
        fi
    done
    
    if [ ${#occupied_ports[@]} -ne 0 ]; then
        warning "–°–ª–µ–¥—É—é—â–∏–µ –ø–æ—Ä—Ç—ã —É–∂–µ –∑–∞–Ω—è—Ç—ã: ${occupied_ports[*]}"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
            exit 0
        fi
    fi
    
    success "–ü–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
build_image() {
    log "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    
    if docker build -t ai-nk:latest .; then
        success "–û–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω"
    else
        error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –æ–±—Ä–∞–∑–∞"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
start_system() {
    log "üöÄ –ó–∞–ø—É—Å–∫ AI-NK —Å–∏—Å—Ç–µ–º—ã..."
    
    if docker-compose -f docker-compose.prod.yaml up -d; then
        success "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞"
    else
        error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
check_health() {
    log "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã..."
    
    local max_attempts=60
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f -s "http://localhost/health" > /dev/null 2>&1; then
            success "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
            return 0
        fi
        
        log "‚è≥ –ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts..."
        sleep 5
        ((attempt++))
    done
    
    error "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
    return 1
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
show_info() {
    log "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:"
    echo
    echo "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "   - Frontend: http://localhost"
    echo "   - API Gateway: http://localhost/api"
    echo "   - Document Parser: http://localhost:8001"
    echo "   - RAG Service: http://localhost:8002"
    echo "   - Rule Engine: http://localhost:8003"
    echo
    echo "üìÅ –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã:"
    echo "   - –û—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏: docker logs ai-nk-system"
    echo "   - –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: docker exec ai-nk-system tail -f /app/logs/*.log"
    echo
    echo "üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π:"
    echo "   - –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose -f docker-compose.prod.yaml down"
    echo "   - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose -f docker-compose.prod.yaml restart"
    echo "   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ./deploy.sh --update"
    echo
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
update_system() {
    log "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã
    docker-compose -f docker-compose.prod.yaml down
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–∑–∞
    docker rmi ai-nk:latest 2>/dev/null || true
    
    # –°–±–æ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞
    build_image
    
    # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    start_system
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    check_health
    
    success "–°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
stop_system() {
    log "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
    
    if docker-compose -f docker-compose.prod.yaml down; then
        success "–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    else
        error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º—ã"
        exit 1
    fi
}

# –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
clean_system() {
    log "üßπ –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    docker-compose -f docker-compose.prod.yaml down
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
    docker rmi ai-nk:latest 2>/dev/null || true
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–º–æ–≤
    read -p "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker volume rm ai-nk_ai-nk-data ai-nk_ai-nk-logs ai-nk_ai-nk-uploads 2>/dev/null || true
        success "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã"
    fi
    
    success "–°–∏—Å—Ç–µ–º–∞ –æ—á–∏—â–µ–Ω–∞"
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu() {
    echo
    echo "ü§ñ AI-NK –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
    echo "================================"
    echo "1. –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
    echo "2. –¢–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞"
    echo "3. –¢–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"
    echo "4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ"
    echo "5. –û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "6. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "7. –û—á–∏—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "8. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
    echo "0. –í—ã—Ö–æ–¥"
    echo
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-8): " -n 1 -r
    echo
    
    case $REPLY in
        1)
            check_dependencies
            check_ports
            build_image
            start_system
            check_health
            show_info
            ;;
        2)
            build_image
            ;;
        3)
            start_system
            check_health
            ;;
        4)
            check_health
            ;;
        5)
            update_system
            ;;
        6)
            stop_system
            ;;
        7)
            clean_system
            ;;
        8)
            show_info
            ;;
        0)
            log "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
            exit 0
            ;;
        *)
            error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            main_menu
            ;;
    esac
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    --deploy)
        check_dependencies
        check_ports
        build_image
        start_system
        check_health
        show_info
        ;;
    --build)
        build_image
        ;;
    --start)
        start_system
        check_health
        ;;
    --stop)
        stop_system
        ;;
    --update)
        update_system
        ;;
    --clean)
        clean_system
        ;;
    --health)
        check_health
        ;;
    --info)
        show_info
        ;;
    --menu)
        main_menu
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏—è]"
        echo
        echo "–û–ø—Ü–∏–∏:"
        echo "  --deploy    –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
        echo "  --build     –¢–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞"
        echo "  --start     –¢–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"
        echo "  --stop      –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
        echo "  --update    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
        echo "  --clean     –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
        echo "  --health    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"
        echo "  --info      –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
        echo "  --menu      –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"
        echo
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  $0 --deploy    # –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
        echo "  $0 --menu      # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"
        ;;
esac
