#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∞—Å—Å–æ–≤
"""

import sys
import os
import re

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'rag_service'))

def test_metadata_extraction_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–∏, –∞ –Ω–µ –∫–ª–∞—Å—Å—ã
        import importlib.util
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å metadata_extractor
        spec = importlib.util.spec_from_file_location(
            "metadata_extractor", 
            "/Users/macbook/Projects/AI/AIReviewer/AI-NK/rag_service/services/metadata_extractor.py"
        )
        metadata_module = importlib.util.module_from_spec(spec)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –º–æ–¥—É–ª—è
        with open("/Users/macbook/Projects/AI/AIReviewer/AI-NK/rag_service/services/metadata_extractor.py", "r") as f:
            code = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏
        code = code.replace("import logging", "# import logging")
        code = code.replace("import re", "# import re")
        code = code.replace("import hashlib", "# import hashlib")
        code = code.replace("from datetime import datetime", "# from datetime import datetime")
        code = code.replace("from typing import Dict, Any, List, Tuple", "# from typing import Dict, Any, List, Tuple")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏
        code = """
import logging
import re
import hashlib
from datetime import datetime
from typing import Dict, Any, List, Tuple

""" + code
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
        exec(code, globals())
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
        metadata_extractor = MetadataExtractor()
        print("‚úÖ MetadataExtractor —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        test_cases = [
            ("–°–ü 22.13330.2016.pdf", "SP", "22.13330", 2016),
            ("–°–ù–∏–ü 2.01.07-85.pdf", "SNiP", "2.01.07", 1985),
            ("–ì–û–°–¢ 27751-2014.pdf", "GOST", "27751", 2014),
            ("–ü–ë 03-428-02.pdf", "CORP_STD", "03-428", 2002),
        ]
        
        for filename, expected_type, expected_number, expected_year in test_cases:
            metadata = metadata_extractor.extract_document_metadata(filename, 1)
            
            if metadata['doc_type'] == expected_type:
                print(f"‚úÖ {filename}: —Ç–∏–ø {metadata['doc_type']} - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"‚ùå {filename}: –æ–∂–∏–¥–∞–ª—Å—è {expected_type}, –ø–æ–ª—É—á–µ–Ω {metadata['doc_type']}")
                return False
            
            if metadata['doc_number'] == expected_number:
                print(f"‚úÖ {filename}: –Ω–æ–º–µ—Ä {metadata['doc_number']} - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"‚ùå {filename}: –æ–∂–∏–¥–∞–ª—Å—è {expected_number}, –ø–æ–ª—É—á–µ–Ω {metadata['doc_number']}")
                return False
            
            if metadata['edition_year'] == expected_year:
                print(f"‚úÖ {filename}: –≥–æ–¥ {metadata['edition_year']} - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"‚ùå {filename}: –æ–∂–∏–¥–∞–ª—Å—è {expected_year}, –ø–æ–ª—É—á–µ–Ω {metadata['edition_year']}")
                return False
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_document_parsing_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å document_parser
        with open("/Users/macbook/Projects/AI/AIReviewer/AI-NK/rag_service/services/document_parser.py", "r") as f:
            code = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏
        code = code.replace("import logging", "# import logging")
        code = code.replace("import os", "# import os")
        code = code.replace("import tempfile", "# import tempfile")
        code = code.replace("from typing import Optional", "# from typing import Optional")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏
        code = """
import logging
import os
import tempfile
from typing import Optional

""" + code
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
        exec(code, globals())
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
        document_parser = DocumentParser()
        print("‚úÖ DocumentParser —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–¥–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        test_cases = [
            ("–°–ü 22.13330.2016.pdf", "–°–ü 22.13330.2016"),
            ("–°–ù–∏–ü 2.01.07-85.pdf", "–°–ù–∏–ü 2.01.07-85"),
            ("–ì–û–°–¢ 27751-2014.pdf", "–ì–û–°–¢ 27751-2014"),
            ("–ü–ë 03-428-02.pdf", "–ü–ë 03-428-02"),
        ]
        
        for filename, expected_code in test_cases:
            code = document_parser.extract_document_code(filename)
            
            if code == expected_code:
                print(f"‚úÖ {filename}: –∫–æ–¥ {code} - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"‚ùå {filename}: –æ–∂–∏–¥–∞–ª—Å—è {expected_code}, –ø–æ–ª—É—á–µ–Ω {code}")
                return False
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_regex_patterns():
    """–¢–µ—Å—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π...")
    
    try:
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        patterns = [
            # –ì–û–°–¢
            (r'–ì–û–°–¢\s+(\d+(?:\.\d+)*)-(\d{4})', 'GOST'),
            (r'–ì–û–°–¢\s+(\d+(?:\.\d+)*)', 'GOST'),
            
            # –°–ü (–°–≤–æ–¥ –ø—Ä–∞–≤–∏–ª)
            (r'–°–ü\s+(\d+(?:\.\d+)*)\.(\d{4})', 'SP'),
            (r'–°–ü\s+(\d+(?:\.\d+)*)', 'SP'),
            
            # –°–ù–∏–ü
            (r'–°–ù–∏–ü\s+(\d+(?:\.\d+)*)-(\d{4})', 'SNiP'),
            (r'–°–ù–∏–ü\s+(\d+(?:\.\d+)*)\.(\d{4})', 'SNiP'),
            (r'–°–ù–∏–ü\s+(\d+(?:\.\d+)*)-(\d{2})(?:\.|$)', 'SNiP'),
            (r'–°–ù–∏–ü\s+(\d+(?:\.\d+)*)', 'SNiP'),
            
            # –§–ù–ü
            (r'–§–ù–ü\s+(\d+(?:\.\d+)*)-(\d{4})', 'FNP'),
            (r'–§–ù–ü\s+(\d+(?:\.\d+)*)', 'FNP'),
            
            # –ü–ë (–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
            (r'–ü–ë\s+(\d+(?:\.\d+)*)-(\d{4})', 'CORP_STD'),
            (r'–ü–ë\s+(\d+(?:\.\d+)*)', 'CORP_STD'),
            
            # –ê (–ê–ª—å–±–æ–º)
            (r'–ê(\d+(?:\.\d+)*)\.(\d{4})', 'CORP_STD'),
            (r'–ê(\d+(?:\.\d+)*)', 'CORP_STD'),
        ]
        
        test_cases = [
            ("–°–ü 22.13330.2016.pdf", "SP", "22.13330", "2016"),
            ("–°–ù–∏–ü 2.01.07-85.pdf", "SNiP", "2.01.07", "85"),
            ("–ì–û–°–¢ 27751-2014.pdf", "GOST", "27751", "2014"),
            ("–ü–ë 03-428-02.pdf", "CORP_STD", "03-428", "02"),
        ]
        
        for filename, expected_type, expected_number, expected_year in test_cases:
            # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            name = filename.replace('.pdf', '').replace('.docx', '').replace('.doc', '')
            
            found = False
            for pattern, doc_type in patterns:
                match = re.search(pattern, name, re.IGNORECASE)
                if match:
                    groups = match.groups()
                    if len(groups) == 2:
                        doc_number = groups[0]
                        year_str = groups[1]
                        
                        if doc_type == expected_type and doc_number == expected_number and year_str == expected_year:
                            print(f"‚úÖ {filename}: {doc_type} {doc_number} {year_str} - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                            found = True
                            break
            
            if not found:
                print(f"‚ùå {filename}: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω")
                return False
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –º–æ–¥—É–ª–µ–π RAG —Å–µ—Ä–≤–∏—Å–∞")
    print("=" * 60)
    
    tests = [
        ("–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è", test_regex_patterns),
        ("–§—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", test_document_parsing_functions),
        ("–§—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö", test_metadata_extraction_functions),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 40)
        
        try:
            if test_func():
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –§—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\nüìù –ó–∞–∫–ª—é—á–µ–Ω–∏–µ:")
        print("1. –ú–æ–¥—É–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        print("2. –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("3. –ì–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ Docker —Å—Ä–µ–¥–µ")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return 1

if __name__ == "__main__":
    exit(main())
