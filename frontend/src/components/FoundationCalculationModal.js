import React, { useState, useEffect } from 'react';
import { 
  X, 
  Calculator, 
  FileText, 
  Settings, 
  CheckCircle, 
  AlertCircle,
  Info,
  BookOpen,
  Ruler,
  Zap,
  Building,
  Mountain,
  Droplets
} from 'lucide-react';

const FoundationCalculationModal = ({ 
  isOpen, 
  onClose, 
  onCreateCalculation, 
  loading = false 
}) => {
  const [selectedCategory, setSelectedCategory] = useState('bearing_capacity');
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    parameters: {}
  });

  // –í–∏–¥—ã —Ä–∞—Å—á–µ—Ç–æ–≤ –æ—Å–Ω–æ–≤–∞–Ω–∏–π –∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–≤
  const foundationCategories = [
    {
      id: 'bearing_capacity',
      name: '–†–∞—Å—á—ë—Ç –Ω–µ—Å—É—â–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–∞–Ω–∏—è',
      description: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≥—Ä—É–Ω—Ç–æ–≤–æ–≥–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—è',
      icon: 'üè¢',
      norms: ['–°–ü 22.13330.2016', '–°–ü 24.13330.2011', '–°–ü 25.13330.2012'],
      parameters: [
        {
          name: 'foundation_width',
          label: '–®–∏—Ä–∏–Ω–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞',
          unit: '–º',
          type: 'number',
          required: true,
          default: 1.0,
          min: 0.1
        },
        {
          name: 'foundation_length',
          label: '–î–ª–∏–Ω–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞',
          unit: '–º',
          type: 'number',
          required: true,
          default: 1.0,
          min: 0.1
        },
        {
          name: 'foundation_depth',
          label: '–ì–ª—É–±–∏–Ω–∞ –∑–∞–ª–æ–∂–µ–Ω–∏—è',
          unit: '–º',
          type: 'number',
          required: true,
          default: 1.5,
          min: 0.5
        },
        {
          name: 'soil_cohesion',
          label: '–°—Ü–µ–ø–ª–µ–Ω–∏–µ –≥—Ä—É–Ω—Ç–∞',
          unit: '–∫–ü–∞',
          type: 'number',
          required: true,
          default: 10,
          min: 0
        },
        {
          name: 'soil_friction_angle',
          label: '–£–≥–æ–ª –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç—Ä–µ–Ω–∏—è',
          unit: '–≥—Ä–∞–¥',
          type: 'number',
          required: true,
          default: 25,
          min: 0,
          max: 45
        },
        {
          name: 'soil_density',
          label: '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≥—Ä—É–Ω—Ç–∞',
          unit: '—Ç/–º¬≥',
          type: 'number',
          required: true,
          default: 1.8,
          min: 1.0,
          max: 3.0
        }
      ]
    },
    {
      id: 'settlement',
      name: '–†–∞—Å—á—ë—Ç –æ—Å–∞–¥–æ–∫ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞',
      description: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–∞–¥–æ–∫ –∏ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞',
      icon: 'üìê',
      norms: ['–°–ü 22.13330.2016', '–°–ü 24.13330.2011'],
      parameters: [
        {
          name: 'foundation_area',
          label: '–ü–ª–æ—â–∞–¥—å —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞',
          unit: '–º¬≤',
          type: 'number',
          required: true,
          default: 10,
          min: 1
        },
        {
          name: 'load_intensity',
          label: '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –Ω–∞–≥—Ä—É–∑–∫–∏',
          unit: '–∫–ü–∞',
          type: 'number',
          required: true,
          default: 200,
          min: 10
        },
        {
          name: 'soil_modulus',
          label: '–ú–æ–¥—É–ª—å –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≥—Ä—É–Ω—Ç–∞',
          unit: '–ú–ü–∞',
          type: 'number',
          required: true,
          default: 20,
          min: 1
        },
        {
          name: 'poisson_ratio',
          label: '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ü—É–∞—Å—Å–æ–Ω–∞',
          unit: '',
          type: 'number',
          required: true,
          default: 0.3,
          min: 0.1,
          max: 0.5
        },
        {
          name: 'compressible_thickness',
          label: '–¢–æ–ª—â–∏–Ω–∞ —Å–∂–∏–º–∞–µ–º–æ–≥–æ —Å–ª–æ—è',
          unit: '–º',
          type: 'number',
          required: true,
          default: 5.0,
          min: 1.0
        }
      ]
    },
    {
      id: 'slope_stability',
      name: '–†–∞—Å—á—ë—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –æ—Ç–∫–æ—Å–æ–≤',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –æ—Ç–∫–æ—Å–æ–≤ –∏ —Å–∫–ª–æ–Ω–æ–≤',
      icon: '‚õ∞Ô∏è',
      norms: ['–°–ü 22.13330.2016', '–°–ü 47.13330.2016'],
      parameters: [
        {
          name: 'slope_height',
          label: '–í—ã—Å–æ—Ç–∞ –æ—Ç–∫–æ—Å–∞',
          unit: '–º',
          type: 'number',
          required: true,
          default: 5.0,
          min: 1.0
        },
        {
          name: 'slope_angle',
          label: '–£–≥–æ–ª –æ—Ç–∫–æ—Å–∞',
          unit: '–≥—Ä–∞–¥',
          type: 'number',
          required: true,
          default: 30,
          min: 5,
          max: 60
        },
        {
          name: 'groundwater_level',
          label: '–£—Ä–æ–≤–µ–Ω—å –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –≤–æ–¥',
          unit: '–º',
          type: 'number',
          required: false,
          default: 0,
          min: 0
        },
        {
          name: 'safety_factor',
          label: '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–∞—Å–∞',
          unit: '',
          type: 'number',
          required: true,
          default: 1.3,
          min: 1.0,
          max: 2.0
        }
      ]
    },
    {
      id: 'pile_foundation',
      name: '–†–∞—Å—á—ë—Ç —Å–≤–∞–π–Ω—ã—Ö —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–≤',
      description: '–†–∞—Å—á–µ—Ç –Ω–µ—Å—É—â–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ –æ—Å–∞–¥–æ–∫ —Å–≤–∞–π',
      icon: 'üèóÔ∏è',
      norms: ['–°–ü 24.13330.2011', '–°–ü 25.13330.2012'],
      parameters: [
        {
          name: 'pile_diameter',
          label: '–î–∏–∞–º–µ—Ç—Ä —Å–≤–∞–∏',
          unit: '–º',
          type: 'number',
          required: true,
          default: 0.4,
          min: 0.2
        },
        {
          name: 'pile_length',
          label: '–î–ª–∏–Ω–∞ —Å–≤–∞–∏',
          unit: '–º',
          type: 'number',
          required: true,
          default: 8.0,
          min: 3.0
        },
        {
          name: 'pile_spacing',
          label: '–®–∞–≥ —Å–≤–∞–π',
          unit: '–º',
          type: 'number',
          required: true,
          default: 2.0,
          min: 1.0
        },
        {
          name: 'pile_count',
          label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–∞–π',
          unit: '—à—Ç',
          type: 'number',
          required: true,
          default: 4,
          min: 1
        },
        {
          name: 'pile_material',
          label: '–ú–∞—Ç–µ—Ä–∏–∞–ª —Å–≤–∞–∏',
          unit: '',
          type: 'select',
          required: true,
          options: ['–ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω', '–°—Ç–∞–ª—å', '–î–µ—Ä–µ–≤–æ'],
          default: '–ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω'
        }
      ]
    },
    {
      id: 'retaining_wall',
      name: '–†–∞—Å—á—ë—Ç –ø–æ–¥–ø–æ—Ä–Ω—ã—Ö —Å—Ç–µ–Ω',
      description: '–†–∞—Å—á–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∏ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–æ—Ä–Ω—ã—Ö —Å—Ç–µ–Ω',
      icon: 'üß±',
      norms: ['–°–ü 22.13330.2016', '–°–ü 63.13330.2018'],
      parameters: [
        {
          name: 'wall_height',
          label: '–í—ã—Å–æ—Ç–∞ —Å—Ç–µ–Ω—ã',
          unit: '–º',
          type: 'number',
          required: true,
          default: 3.0,
          min: 1.0
        },
        {
          name: 'wall_thickness',
          label: '–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω—ã',
          unit: '–º',
          type: 'number',
          required: true,
          default: 0.4,
          min: 0.2
        },
        {
          name: 'backfill_angle',
          label: '–£–≥–æ–ª –∑–∞—Å—ã–ø–∫–∏',
          unit: '–≥—Ä–∞–¥',
          type: 'number',
          required: true,
          default: 30,
          min: 0,
          max: 45
        },
        {
          name: 'backfill_density',
          label: '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∑–∞—Å—ã–ø–∫–∏',
          unit: '—Ç/–º¬≥',
          type: 'number',
          required: true,
          default: 1.8,
          min: 1.0,
          max: 2.5
        },
        {
          name: 'wall_material',
          label: '–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω—ã',
          unit: '',
          type: 'select',
          required: true,
          options: ['–ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω', '–ë–µ—Ç–æ–Ω', '–ö–∏—Ä–ø–∏—á', '–ö–∞–º–µ–Ω—å'],
          default: '–ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω'
        }
      ]
    }
  ];

  const selectedCategoryData = foundationCategories.find(cat => cat.id === selectedCategory);

  useEffect(() => {
    if (selectedCategoryData) {
      const defaultParams = {};
      selectedCategoryData.parameters.forEach(param => {
        defaultParams[param.name] = param.default;
      });
      setFormData(prev => ({
        ...prev,
        parameters: defaultParams
      }));
    }
  }, [selectedCategory]);

  const handleInputChange = (paramName, value) => {
    setFormData(prev => ({
      ...prev,
      parameters: {
        ...prev.parameters,
        [paramName]: value
      }
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (validateForm()) {
      onCreateCalculation({
        type: 'foundation',
        category: selectedCategory,
        ...formData
      });
    }
  };

  const validateForm = () => {
    if (!formData.name.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞');
      return false;
    }
    
    if (!selectedCategoryData) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    for (const param of selectedCategoryData.parameters) {
      if (param.required && (!formData.parameters[param.name] || formData.parameters[param.name] === '')) {
        alert(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: ${param.label}`);
        return false;
      }
    }
    
    return true;
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-semibold text-gray-900">
            –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–π –∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–≤
          </h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600"
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              –í–∏–¥ —Ä–∞—Å—á–µ—Ç–∞
            </label>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
              {foundationCategories.map((category) => (
                <button
                  key={category.id}
                  type="button"
                  onClick={() => setSelectedCategory(category.id)}
                  className={`p-4 border rounded-lg text-left transition-colors ${
                    selectedCategory === category.id
                      ? 'border-blue-500 bg-blue-50'
                      : 'border-gray-300 hover:border-gray-400'
                  }`}
                >
                  <div className="flex items-center mb-2">
                    <span className="text-2xl mr-2">{category.icon}</span>
                    <h3 className="font-medium text-gray-900">{category.name}</h3>
                  </div>
                  <p className="text-sm text-gray-600">{category.description}</p>
                </button>
              ))}
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          {selectedCategoryData && (
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-center mb-2">
                <span className="text-2xl mr-2">{selectedCategoryData.icon}</span>
                <h3 className="font-semibold text-blue-900">{selectedCategoryData.name}</h3>
              </div>
              <p className="text-blue-700 mb-3">{selectedCategoryData.description}</p>
              
              <div className="mb-3">
                <h4 className="font-medium text-blue-900 mb-2">–ü—Ä–∏–º–µ–Ω—è–µ–º—ã–µ –Ω–æ—Ä–º—ã:</h4>
                <div className="flex flex-wrap gap-2">
                  {selectedCategoryData.norms.map((norm, index) => (
                    <span key={index} className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm">
                      {norm}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ *
              </label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –û–ø–∏—Å–∞–Ω–∏–µ
              </label>
              <input
                type="text"
                value={formData.description}
                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞"
              />
            </div>
          </div>

          {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞ */}
          {selectedCategoryData && (
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {selectedCategoryData.parameters.map((param) => (
                  <div key={param.name}>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      {param.label} {param.required && '*'}
                      {param.unit && <span className="text-gray-500"> ({param.unit})</span>}
                    </label>
                    
                    {param.type === 'select' ? (
                      <select
                        value={formData.parameters[param.name] || param.default}
                        onChange={(e) => handleInputChange(param.name, e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        required={param.required}
                      >
                        {param.options.map((option) => (
                          <option key={option} value={option}>{option}</option>
                        ))}
                      </select>
                    ) : (
                      <input
                        type={param.type}
                        value={formData.parameters[param.name] || param.default}
                        onChange={(e) => handleInputChange(param.name, e.target.value)}
                        min={param.min}
                        max={param.max}
                        step={param.type === 'number' ? '0.01' : undefined}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        required={param.required}
                      />
                    )}
                    
                    {param.min !== undefined && param.max !== undefined && (
                      <p className="text-xs text-gray-500 mt-1">
                        –î–∏–∞–ø–∞–∑–æ–Ω: {param.min} - {param.max}
                      </p>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex justify-end space-x-3 pt-4 border-t">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              disabled={loading}
              className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center"
            >
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  –°–æ–∑–¥–∞–Ω–∏–µ...
                </>
              ) : (
                <>
                  <Calculator className="w-4 h-4 mr-2" />
                  –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—á–µ—Ç
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default FoundationCalculationModal;
