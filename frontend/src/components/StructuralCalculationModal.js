import React, { useState, useEffect } from 'react';
import { 
  X, 
  Calculator, 
  FileText, 
  Settings, 
  CheckCircle, 
  AlertCircle,
  Info,
  BookOpen,
  Ruler,
  Zap
} from 'lucide-react';

const StructuralCalculationModal = ({ 
  isOpen, 
  onClose, 
  onCreateCalculation, 
  loading = false 
}) => {
  const [selectedCategory, setSelectedCategory] = useState('strength');
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    parameters: {}
  });

  // –í–∏–¥—ã —Ä–∞—Å—á–µ—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
  const structuralCategories = [
    {
      id: 'strength',
      name: '–†–∞—Å—á—ë—Ç –Ω–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç—å',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π',
      icon: 'üèóÔ∏è',
      norms: ['–°–ü 63.13330', '–°–ü 16.13330', 'EN 1992', 'EN 1993'],
      parameters: [
        {
          name: 'load_value',
          label: '–†–∞—Å—á–µ—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞',
          unit: '–∫–ù',
          type: 'number',
          required: true,
          default: 100,
          min: 0
        },
        {
          name: 'section_area',
          label: '–ü–ª–æ—â–∞–¥—å —Å–µ—á–µ–Ω–∏—è',
          unit: '—Å–º¬≤',
          type: 'number',
          required: true,
          default: 100,
          min: 1
        },
        {
          name: 'material_strength',
          label: '–†–∞—Å—á–µ—Ç–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
          unit: '–ú–ü–∞',
          type: 'number',
          required: true,
          default: 235,
          min: 100
        },
        {
          name: 'safety_factor',
          label: '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏',
          unit: '',
          type: 'number',
          required: false,
          default: 1.1,
          min: 1.0,
          max: 2.0
        }
      ]
    },
    {
      id: 'stability',
      name: '–†–∞—Å—á—ë—Ç –Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —Å–∂–∞—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
      icon: 'üìè',
      norms: ['–°–ü 16.13330', '–°–ü 63.13330', 'EN 1993'],
      parameters: [
        {
          name: 'element_length',
          label: '–î–ª–∏–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞',
          unit: '–º',
          type: 'number',
          required: true,
          default: 3.0,
          min: 0.1
        },
        {
          name: 'moment_of_inertia',
          label: '–ú–æ–º–µ–Ω—Ç –∏–Ω–µ—Ä—Ü–∏–∏',
          unit: '—Å–º‚Å¥',
          type: 'number',
          required: true,
          default: 1000,
          min: 1
        },
        {
          name: 'elastic_modulus',
          label: '–ú–æ–¥—É–ª—å —É–ø—Ä—É–≥–æ—Å—Ç–∏',
          unit: '–ú–ü–∞',
          type: 'number',
          required: true,
          default: 210000,
          min: 10000
        },
        {
          name: 'end_conditions',
          label: '–¢–∏–ø –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è',
          unit: '',
          type: 'select',
          required: true,
          default: 'pinned',
          options: [
            { value: 'pinned', label: '–®–∞—Ä–Ω–∏—Ä–Ω–æ–µ' },
            { value: 'fixed', label: '–ñ–µ—Å—Ç–∫–æ–µ' },
            { value: 'cantilever', label: '–ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ' }
          ]
        }
      ]
    },
    {
      id: 'stiffness',
      name: '–†–∞—Å—á—ë—Ç –Ω–∞ –∂—ë—Å—Ç–∫–æ—Å—Ç—å',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥–∏–±–æ–≤ –∏ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–π',
      icon: 'üìê',
      norms: ['–°–ü 63.13330', '–°–ü 64.13330', 'EN 1995'],
      parameters: [
        {
          name: 'span_length',
          label: '–ü—Ä–æ–ª–µ—Ç',
          unit: '–º',
          type: 'number',
          required: true,
          default: 6.0,
          min: 0.5
        },
        {
          name: 'distributed_load',
          label: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞',
          unit: '–∫–ù/–º',
          type: 'number',
          required: true,
          default: 10.0,
          min: 0
        },
        {
          name: 'moment_of_inertia',
          label: '–ú–æ–º–µ–Ω—Ç –∏–Ω–µ—Ä—Ü–∏–∏',
          unit: '—Å–º‚Å¥',
          type: 'number',
          required: true,
          default: 5000,
          min: 1
        },
        {
          name: 'elastic_modulus',
          label: '–ú–æ–¥—É–ª—å —É–ø—Ä—É–≥–æ—Å—Ç–∏',
          unit: '–ú–ü–∞',
          type: 'number',
          required: true,
          default: 210000,
          min: 10000
        }
      ]
    },
    {
      id: 'cracking',
      name: '–†–∞—Å—á—ë—Ç –Ω–∞ —Ç—Ä–µ—â–∏–Ω–æ—Å—Ç–æ–π–∫–æ—Å—Ç—å',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ä–∏–Ω—ã —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ç—Ä–µ—â–∏–Ω',
      icon: 'üîç',
      norms: ['–°–ü 63.13330', 'EN 1992'],
      parameters: [
        {
          name: 'reinforcement_area',
          label: '–ü–ª–æ—â–∞–¥—å –∞—Ä–º–∞—Ç—É—Ä—ã',
          unit: '–º–º¬≤',
          type: 'number',
          required: true,
          default: 1000,
          min: 1
        },
        {
          name: 'concrete_class',
          label: '–ö–ª–∞—Å—Å –±–µ—Ç–æ–Ω–∞',
          unit: '',
          type: 'select',
          required: true,
          default: 'B25',
          options: [
            { value: 'B15', label: 'B15' },
            { value: 'B20', label: 'B20' },
            { value: 'B25', label: 'B25' },
            { value: 'B30', label: 'B30' },
            { value: 'B35', label: 'B35' }
          ]
        },
        {
          name: 'bending_moment',
          label: '–ò–∑–≥–∏–±–∞—é—â–∏–π –º–æ–º–µ–Ω—Ç',
          unit: '–∫–ù¬∑–º',
          type: 'number',
          required: true,
          default: 50.0,
          min: 0
        },
        {
          name: 'crack_width_limit',
          label: '–ü—Ä–µ–¥–µ–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Ç—Ä–µ—â–∏–Ω',
          unit: '–º–º',
          type: 'number',
          required: true,
          default: 0.3,
          min: 0.1,
          max: 1.0
        }
      ]
    },
    {
      id: 'dynamic',
      name: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç',
      description: '–†–∞—Å—á–µ—Ç –Ω–∞ —Å–µ–π—Å–º–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è',
      icon: 'üåä',
      norms: ['–°–ü 14.13330', 'EN 1998'],
      parameters: [
        {
          name: 'seismic_zone',
          label: '–°–µ–π—Å–º–∏—á–µ—Å–∫–∏–π —Ä–∞–π–æ–Ω',
          unit: '',
          type: 'select',
          required: true,
          default: '6',
          options: [
            { value: '6', label: '6 –±–∞–ª–ª–æ–≤' },
            { value: '7', label: '7 –±–∞–ª–ª–æ–≤' },
            { value: '8', label: '8 –±–∞–ª–ª–æ–≤' },
            { value: '9', label: '9 –±–∞–ª–ª–æ–≤' }
          ]
        },
        {
          name: 'soil_category',
          label: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≥—Ä—É–Ω—Ç–∞',
          unit: '',
          type: 'select',
          required: true,
          default: 'B',
          options: [
            { value: 'A', label: 'A - –°–∫–∞–ª—å–Ω—ã–µ –≥—Ä—É–Ω—Ç—ã' },
            { value: 'B', label: 'B - –ü–ª–æ—Ç–Ω—ã–µ –≥—Ä—É–Ω—Ç—ã' },
            { value: 'C', label: 'C - –°—Ä–µ–¥–Ω–∏–µ –≥—Ä—É–Ω—Ç—ã' },
            { value: 'D', label: 'D - –°–ª–∞–±—ã–µ –≥—Ä—É–Ω—Ç—ã' }
          ]
        },
        {
          name: 'structure_weight',
          label: '–ú–∞—Å—Å–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
          unit: '—Ç',
          type: 'number',
          required: true,
          default: 100.0,
          min: 1
        },
        {
          name: 'natural_period',
          label: '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∫–æ–ª–µ–±–∞–Ω–∏–π',
          unit: '—Å',
          type: 'number',
          required: true,
          default: 0.5,
          min: 0.1
        }
      ]
    }
  ];

  const selectedCategoryData = structuralCategories.find(cat => cat.id === selectedCategory);

  useEffect(() => {
    if (selectedCategoryData) {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const initialParameters = {};
      selectedCategoryData.parameters.forEach(param => {
        initialParameters[param.name] = param.default;
      });
      
      setFormData(prev => ({
        ...prev,
        parameters: initialParameters
      }));
    }
  }, [selectedCategory]);

  const handleParameterChange = (paramName, value) => {
    setFormData(prev => ({
      ...prev,
      parameters: {
        ...prev.parameters,
        [paramName]: value
      }
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    const calculationData = {
      name: formData.name || `${selectedCategoryData.name} - ${new Date().toLocaleDateString()}`,
      description: formData.description || selectedCategoryData.description,
      type: 'structural',
      category: 'construction',
      subcategory: selectedCategory,
      parameters: formData.parameters
    };

    onCreateCalculation(calculationData);
  };

  const validateForm = () => {
    if (!formData.name.trim()) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const requiredParams = selectedCategoryData.parameters.filter(p => p.required);
    for (const param of requiredParams) {
      const value = formData.parameters[param.name];
      if (value === undefined || value === null || value === '') return false;
      if (param.type === 'number' && (isNaN(value) || value < (param.min || 0))) return false;
    }
    
    return true;
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-semibold text-gray-900">
            –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
          </h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600"
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              –í–∏–¥ —Ä–∞—Å—á–µ—Ç–∞
            </label>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
              {structuralCategories.map((category) => (
                <button
                  key={category.id}
                  type="button"
                  onClick={() => setSelectedCategory(category.id)}
                  className={`p-4 border rounded-lg text-left transition-colors ${
                    selectedCategory === category.id
                      ? 'border-blue-500 bg-blue-50'
                      : 'border-gray-300 hover:border-gray-400'
                  }`}
                >
                  <div className="flex items-center mb-2">
                    <span className="text-2xl mr-2">{category.icon}</span>
                    <h3 className="font-medium text-gray-900">{category.name}</h3>
                  </div>
                  <p className="text-sm text-gray-600">{category.description}</p>
                </button>
              ))}
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          {selectedCategoryData && (
            <div className="bg-gray-50 p-4 rounded-lg">
              <div className="flex items-center mb-3">
                <span className="text-2xl mr-2">{selectedCategoryData.icon}</span>
                <h3 className="text-lg font-medium text-gray-900">{selectedCategoryData.name}</h3>
              </div>
              <p className="text-gray-600 mb-3">{selectedCategoryData.description}</p>
              
              <div>
                <h4 className="font-medium text-gray-700 mb-2">–ü—Ä–∏–º–µ–Ω—è–µ–º—ã–µ –Ω–æ—Ä–º—ã:</h4>
                <div className="flex flex-wrap gap-2">
                  {selectedCategoryData.norms.map((norm, index) => (
                    <span key={index} className="px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded">
                      {norm}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
              </label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => setFormData({...formData, name: e.target.value})}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder={`${selectedCategoryData?.name || '–†–∞—Å—á–µ—Ç'} - ${new Date().toLocaleDateString()}`}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –û–ø–∏—Å–∞–Ω–∏–µ
              </label>
              <input
                type="text"
                value={formData.description}
                onChange={(e) => setFormData({...formData, description: e.target.value})}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder={selectedCategoryData?.description}
              />
            </div>
          </div>

          {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞ */}
          {selectedCategoryData && (
            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-4">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {selectedCategoryData.parameters.map((param) => (
                  <div key={param.name}>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      {param.label} {param.required && <span className="text-red-500">*</span>}
                    </label>
                    
                    {param.type === 'select' ? (
                      <select
                        value={formData.parameters[param.name] || param.default}
                        onChange={(e) => handleParameterChange(param.name, e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        required={param.required}
                      >
                        {param.options.map((option) => (
                          <option key={option.value} value={option.value}>
                            {option.label}
                          </option>
                        ))}
                      </select>
                    ) : (
                      <div className="relative">
                        <input
                          type={param.type}
                          value={formData.parameters[param.name] || param.default}
                          onChange={(e) => handleParameterChange(param.name, parseFloat(e.target.value) || e.target.value)}
                          min={param.min}
                          max={param.max}
                          step={param.type === 'number' ? 'any' : undefined}
                          className="w-full px-3 py-2 pr-12 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          required={param.required}
                        />
                        <span className="absolute right-3 top-2 text-gray-500 text-sm">
                          {param.unit}
                        </span>
                      </div>
                    )}
                    
                    {param.min !== undefined && param.max !== undefined && (
                      <p className="text-xs text-gray-500 mt-1">
                        –î–∏–∞–ø–∞–∑–æ–Ω: {param.min} - {param.max} {param.unit}
                      </p>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex justify-end space-x-3 pt-6 border-t">
            <button
              type="button"
              onClick={onClose}
              className="px-6 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              disabled={loading || !validateForm()}
              className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
            >
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  –°–æ–∑–¥–∞–Ω–∏–µ...
                </>
              ) : (
                <>
                  <Calculator className="w-4 h-4 mr-2" />
                  –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—á–µ—Ç
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default StructuralCalculationModal;
