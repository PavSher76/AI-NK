import React, { useState, useEffect } from 'react';
import { getDefaultNormcontrolPrompt } from '../utils/settings';
import { 
  FileText, 
  Upload, 
  Download, 
  Trash2, 
  Search, 
  Database, 
  File, 
  FileImage, 
  FileCode,
  Loader2,
  AlertCircle,
  CheckCircle,
  Plus,
  Edit,
  Eye,
  BookOpen,
  Archive,
  Tag,
  Calendar,
  User,
  RefreshCw,
  Hash,
  BarChart3,
  Settings
} from 'lucide-react';

const NormativeDocuments = ({ isAuthenticated, authToken, refreshTrigger, onRefreshComplete }) => {
  console.log('üîç [DEBUG] NormativeDocuments.js: Component rendered');

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const [file, setFile] = useState(null);
  const [selectedCategory, setSelectedCategory] = useState('gost'); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ì–û–°–¢
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [uploadError, setUploadError] = useState(null);
  const [uploadSuccess, setUploadSuccess] = useState(false);
  const [error, setError] = useState(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
  const [documents, setDocuments] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedDocument, setSelectedDocument] = useState(null);
  const [showUploadModal, setShowUploadModal] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  const [searchQuery, setSearchQuery] = useState('');
  const [filterCategory, setFilterCategory] = useState('');
  const [filterStatus, setFilterStatus] = useState('');
  const [sortBy, setSortBy] = useState('upload_date');

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const [stats, setStats] = useState(null);
  const [isLoadingStats, setIsLoadingStats] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
  const [isReindexing, setIsReindexing] = useState(false);
  const [reindexProgress, setReindexProgress] = useState(null);
  const [selectedDocumentTokens, setSelectedDocumentTokens] = useState(null);
  const [showTokenModal, setShowTokenModal] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const [showSettingsModal, setShowSettingsModal] = useState(false);
  const [settings, setSettings] = useState([]);
  const [isLoadingSettings, setIsLoadingSettings] = useState(false);
  const [settingsError, setSettingsError] = useState(null);

  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const categories = [
    { value: 'gost', label: '–ì–û–°–¢', color: 'bg-red-100 text-red-800' },
    { value: 'sp', label: '–°–ü', color: 'bg-blue-100 text-blue-800' },
    { value: 'snip', label: '–°–ù–∏–ü', color: 'bg-green-100 text-green-800' },
    { value: 'tr', label: '–¢–†', color: 'bg-purple-100 text-purple-800' },
    { value: 'corporate', label: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ', color: 'bg-orange-100 text-orange-800' },
    { value: 'other', label: '–ü—Ä–æ—á–∏–µ', color: 'bg-gray-100 text-gray-800' }
  ];

  // –°—Ç–∞—Ç—É—Å—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const statuses = [
    { value: 'uploaded', label: '–ó–∞–≥—Ä—É–∂–µ–Ω', color: 'bg-blue-100 text-blue-800' },
    { value: 'processing', label: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è', color: 'bg-yellow-100 text-yellow-800' },
    { value: 'indexed', label: '–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω', color: 'bg-green-100 text-green-800' },
    { value: 'error', label: '–û—à–∏–±–∫–∞', color: 'bg-red-100 text-red-800' }
  ];

  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
  const supportedFormats = [
    { ext: 'pdf', name: 'PDF –¥–æ–∫—É–º–µ–Ω—Ç', icon: <FileText className="w-4 h-4" /> },
    { ext: 'docx', name: 'Word –¥–æ–∫—É–º–µ–Ω—Ç', icon: <FileText className="w-4 h-4" /> },
    { ext: 'dwg', name: 'AutoCAD —á–µ—Ä—Ç–µ–∂', icon: <FileImage className="w-4 h-4" /> },
    { ext: 'ifc', name: 'IFC –º–æ–¥–µ–ª—å', icon: <FileCode className="w-4 h-4" /> },
    { ext: 'txt', name: '–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª', icon: <FileText className="w-4 h-4" /> }
  ];

  // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    console.log('üîç [DEBUG] NormativeDocuments.js: documents state changed:', documents.length, 'documents');
  }, [documents]);

  useEffect(() => {
    console.log('üîç [DEBUG] NormativeDocuments.js: settings state changed:', settings);
  }, [settings]);

  useEffect(() => {
    console.log('üîç [DEBUG] NormativeDocuments.js: stats state changed:', stats);
  }, [stats]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const fetchDocuments = async () => {
    console.log('üîç [DEBUG] NormativeDocuments.js: fetchDocuments started');
    setIsLoading(true);
    try {
      const response = await fetch('/api/documents', {
      headers: {
        'Authorization': 'Bearer test-token'
      }
    });
      console.log('üîç [DEBUG] NormativeDocuments.js: fetchDocuments response status:', response.status);
      if (response.ok) {
        const data = await response.json();
        console.log('üîç [DEBUG] NormativeDocuments.js: fetchDocuments success, documents count:', data.length);
        setDocuments(data.documents || data);
      } else {
        console.error('üîç [DEBUG] NormativeDocuments.js: fetchDocuments failed with status:', response.status);
        setDocuments([]);
      }
    } catch (err) {
      console.error('üîç [DEBUG] NormativeDocuments.js: fetchDocuments error:', err);
      setDocuments([]);
    } finally {
      setIsLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const fetchStats = async () => {
    console.log('üîç [DEBUG] NormativeDocuments.js: fetchStats started');
    setIsLoadingStats(true);
    try {
      const response = await fetch('/api/rag/stats', {
        headers: {
          'Authorization': 'Bearer test-token'
        }
      });
      console.log('üîç [DEBUG] NormativeDocuments.js: fetchStats response status:', response.status);
      if (response.ok) {
        const data = await response.json();
        console.log('üîç [DEBUG] NormativeDocuments.js: fetchStats success:', data);
        console.log('üîç [DEBUG] NormativeDocuments.js: Setting stats to:', data);
        setStats(data);
      } else {
        console.warn('üîç [DEBUG] NormativeDocuments.js: fetchStats failed with status:', response.status);
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        setStats({
          total_documents: documents.length,
          indexed_documents: 0,
          indexing_progress: '0%',
          category_distribution: {},
          collection_name: 'N/A'
        });
      }
    } catch (err) {
      console.error('üîç [DEBUG] NormativeDocuments.js: fetchStats error:', err);
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setStats({
        total_documents: documents.length,
        indexed_documents: 0,
        indexing_progress: '0%',
        category_distribution: {},
        collection_name: 'N/A'
      });
    } finally {
      setIsLoadingStats(false);
    }
  };

  // –†–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const reindexDocuments = async () => {
    console.log('üîç [DEBUG] NormativeDocuments.js: reindexDocuments started');
    setIsReindexing(true);
    setReindexProgress({ message: '–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é...', progress: 0 });
    
    try {
      const response = await fetch('/api/reindex-documents', {
        method: 'POST',
        headers: {
          'Authorization': 'Bearer test-token',
          'Content-Type': 'application/json',
        }
      });
      
      if (response.ok) {
        const result = await response.json();
        setReindexProgress({
          message: result.message,
          progress: 100,
          result: result
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        setTimeout(() => {
          fetchDocuments();
          fetchStats();
        }, 1000);
      } else {
        setReindexProgress({
          message: '–û—à–∏–±–∫–∞ —Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏',
          progress: 0,
          error: true
        });
      }
    } catch (err) {
      console.error('üîç [DEBUG] NormativeDocuments.js: reindexDocuments error:', err);
      setReindexProgress({
        message: '–û—à–∏–±–∫–∞ —Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: ' + err.message,
        progress: 0,
        error: true
      });
    } finally {
      setTimeout(() => {
        setIsReindexing(false);
        setReindexProgress(null);
      }, 3000);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞
  const fetchDocumentTokens = async (documentId) => {
    console.log('üîç [DEBUG] NormativeDocuments.js: fetchDocumentTokens started for ID:', documentId);
    try {
      const response = await fetch(`/api/documents/${documentId}/tokens`, {
        headers: {
          'Authorization': 'Bearer test-token'
        }
      });
      console.log('üîç [DEBUG] NormativeDocuments.js: fetchDocumentTokens response status:', response.status);
      if (response.ok) {
        const data = await response.json();
        setSelectedDocumentTokens(data);
        setShowTokenModal(true);
      } else {
        console.error('üîç [DEBUG] NormativeDocuments.js: fetchDocumentTokens failed with status:', response.status);
      }
    } catch (err) {
      console.error('üîç [DEBUG] NormativeDocuments.js: fetchDocumentTokens error:', err);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
  const fetchSettings = async () => {
    console.log('üîç [DEBUG] NormativeDocuments.js: fetchSettings started');
    setIsLoadingSettings(true);
    setSettingsError(null);
    try {
      const response = await fetch('/api/settings', {
        headers: {
          'Authorization': 'Bearer test-token'
        }
      });
      console.log('üîç [DEBUG] NormativeDocuments.js: fetchSettings response status:', response.status);
      if (response.ok) {
        const data = await response.json();
        console.log('üîç [DEBUG] NormativeDocuments.js: fetchSettings success:', data);
        setSettings(data.settings || []);
      } else {
        setSettingsError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      }
    } catch (err) {
      console.error('üîç [DEBUG] NormativeDocuments.js: fetchSettings error:', err);
      setSettingsError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    } finally {
      setIsLoadingSettings(false);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const updateSetting = async (settingKey, newValue) => {
    console.log('üîç [DEBUG] NormativeDocuments.js: updateSetting started:', { settingKey, newValue });
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
      let response = await fetch(`/api/settings/${settingKey}`, {
        method: 'PUT',
        headers: {
          'Authorization': 'Bearer test-token',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ setting_value: newValue })
      });
      
      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
      if (response.status === 404) {
        response = await fetch('/api/settings', {
          method: 'POST',
          headers: {
            'Authorization': 'Bearer test-token',
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            setting_key: settingKey,
            setting_value: newValue,
            setting_type: 'text',
            setting_description: settingKey === 'normcontrol_prompt' ? '–ü—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è' : '–°–∏—Å—Ç–µ–º–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞'
          })
        });
      }
      
      if (response.ok) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setSettings(prevSettings => {
          const existingSetting = prevSettings.find(s => s.setting_key === settingKey);
          if (existingSetting) {
            return prevSettings.map(setting => 
              setting.setting_key === settingKey 
                ? { ...setting, setting_value: newValue }
                : setting
            );
          } else {
            return [...prevSettings, {
              setting_key: settingKey,
              setting_value: newValue,
              setting_type: 'text',
              setting_description: settingKey === 'normcontrol_prompt' ? '–ü—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è' : '–°–∏—Å—Ç–µ–º–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞'
            }];
          }
        });
        return true;
      } else {
        console.error('üîç [DEBUG] NormativeDocuments.js: updateSetting failed with status:', response.status);
        return false;
      }
    } catch (err) {
      console.error('üîç [DEBUG] NormativeDocuments.js: updateSetting error:', err);
      return false;
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const deleteSetting = async (settingKey) => {
    console.log('üîç [DEBUG] NormativeDocuments.js: deleteSetting started:', { settingKey });
    
    if (!window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É "${settingKey}"?`)) {
      console.log('üîç [DEBUG] NormativeDocuments.js: deleteSetting cancelled by user');
      return false;
    }
    
    try {
      const response = await fetch(`/api/settings/${settingKey}`, {
        method: 'DELETE',
        headers: {
          'Authorization': 'Bearer test-token',
        }
      });
      
      if (response.ok) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setSettings(prevSettings => 
          prevSettings.filter(setting => setting.setting_key !== settingKey)
        );
        console.log('üîç [DEBUG] NormativeDocuments.js: deleteSetting successful');
        return true;
      } else {
        console.error('üîç [DEBUG] NormativeDocuments.js: deleteSetting failed with status:', response.status);
        return false;
      }
    } catch (err) {
      console.error('üîç [DEBUG] NormativeDocuments.js: deleteSetting error:', err);
      return false;
    }
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const openSettingsModal = async () => {
    console.log('üîç [DEBUG] NormativeDocuments.js: openSettingsModal triggered');
    setShowSettingsModal(true);
    await fetchSettings();
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  const handleFileChange = (e) => {
    console.log('üîç [DEBUG] NormativeDocuments.js: handleFileChange triggered');
    const selectedFile = e.target.files[0];
    if (!selectedFile) {
      console.log('üîç [DEBUG] NormativeDocuments.js: handleFileChange - no file selected');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    const fileExtension = selectedFile.name.split('.').pop().toLowerCase();
    const isSupported = supportedFormats.some(format => format.ext === fileExtension);

    if (isSupported) {
      setFile(selectedFile);
      setUploadError(null);
    } else {
      setUploadError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
      setFile(null);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  const uploadDocument = async () => {
    console.log('üîç [DEBUG] NormativeDocuments.js: uploadDocument started');
    if (!file) {
      console.log('üîç [DEBUG] NormativeDocuments.js: uploadDocument - no file selected');
      return;
    }

    setIsUploading(true);
    setUploadProgress(0);
    setUploadError(null);
    setUploadSuccess(false);

    try {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('category', selectedCategory); // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é

      const response = await fetch('/api/upload', {
        method: 'POST',
        headers: {
          'Authorization': 'Bearer test-token'
        },
        body: formData
      });

      console.log('üîç [DEBUG] NormativeDocuments.js: uploadDocument response status:', response.status);

      if (response.ok) {
        const result = await response.json();
        setUploadSuccess(true);
        setFile(null);
        // –û—á–∏—â–∞–µ–º input file
        const fileInput = document.getElementById('file-input');
        if (fileInput) fileInput.value = '';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        await fetchDocuments();
        await fetchStats();
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status}`);
      }
    } catch (err) {
      setUploadError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${err.message}`);
    } finally {
      setIsUploading(false);
      setUploadProgress(0);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  const deleteDocument = async (documentId) => {
    console.log('üîç [DEBUG] NormativeDocuments.js: deleteDocument started for ID:', documentId);
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç?')) {
      console.log('üîç [DEBUG] NormativeDocuments.js: deleteDocument cancelled by user');
      return;
    }

    try {
      const response = await fetch(`/api/documents/${documentId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': 'Bearer test-token'
        }
      });

      console.log('üîç [DEBUG] NormativeDocuments.js: deleteDocument response status:', response.status);

      if (response.ok) {
        await fetchDocuments();
        await fetchStats();
      }
    } catch (err) {
      console.error('üîç [DEBUG] NormativeDocuments.js: deleteDocument error:', err);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
  const getFileIcon = (fileType) => {
    const format = supportedFormats.find(f => f.ext === fileType.toLowerCase());
    return format ? format.icon : <File className="w-4 h-4" />;
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
  const getFileTypeName = (fileType) => {
    const format = supportedFormats.find(f => f.ext === fileType.toLowerCase());
    return format ? format.name : fileType.toUpperCase();
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  const getCategoryInfo = (category) => {
    return categories.find(c => c.value === category) || categories[categories.length - 1];
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  const getStatusInfo = (status) => {
    return statuses.find(s => s.value === status) || statuses[0];
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const filteredDocuments = documents.filter(doc => {
    const matchesSearch = doc.original_filename.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         doc.file_type.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesCategory = !filterCategory || doc.category === filterCategory;
    const matchesStatus = !filterStatus || doc.processing_status === filterStatus;
    
    return matchesSearch && matchesCategory && matchesStatus;
  });

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const sortedDocuments = [...filteredDocuments].sort((a, b) => {
    switch (sortBy) {
      case 'upload_date':
        return new Date(b.upload_date) - new Date(a.upload_date);
      case 'filename':
        return a.original_filename.localeCompare(b.original_filename);
      case 'file_size':
        return b.file_size - a.file_size;
      case 'category':
        return a.category.localeCompare(b.category);
      default:
        return 0;
    }
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log('üîç [DEBUG] NormativeDocuments.js: Initial useEffect triggered');
    const loadData = async () => {
      await fetchDocuments();
      await fetchStats();
    };
    loadData();
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (refreshTrigger && isAuthenticated) {
      console.log('üîç [DEBUG] NormativeDocuments.js: refreshTrigger triggered, fetching data');
      const loadData = async () => {
        console.log('üîç [DEBUG] NormativeDocuments.js: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        await fetchDocuments();
        await fetchStats();
        if (onRefreshComplete) {
          onRefreshComplete();
        }
      };
      loadData();
    }
  }, [refreshTrigger, isAuthenticated, onRefreshComplete]);

  useEffect(() => {
    if (showSettingsModal) {
      console.log('üîç [DEBUG] NormativeDocuments.js: Settings modal opened, fetching settings');
      fetchSettings();
    }
  }, [showSettingsModal]);

  console.log('üîç [DEBUG] NormativeDocuments.js: Rendering with state:', {
    documentsCount: documents.length,
    isLoading,
    error,
    showSettings: showSettingsModal,
    settingsCount: settings.length,
    stats
  });

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className="flex items-center justify-center w-10 h-10 bg-blue-600 rounded-lg">
            <BookOpen className="w-6 h-6 text-white" />
          </div>
          <div>
            <h2 className="text-xl font-bold text-gray-900">–ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</h2>
            <p className="text-sm text-gray-500">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</p>
          </div>
        </div>
        
        <div className="flex gap-2">
          <button
            onClick={() => setShowUploadModal(true)}
            className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <Plus className="w-4 h-4" />
            <span>–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç</span>
          </button>
          
          <button
            onClick={reindexDocuments}
            disabled={isReindexing}
            className="flex items-center space-x-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isReindexing ? (
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <Database className="w-4 h-4" />
            )}
            <span>{isReindexing ? '–†–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è...' : '–†–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è'}</span>
          </button>
          
          <button
            onClick={openSettingsModal}
            className="flex items-center space-x-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
          >
            <Settings className="w-4 h-4" />
            <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
          </button>
        </div>
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ */}
      {reindexProgress && (
        <div className={`p-4 rounded-lg border shadow-sm ${
          reindexProgress.error ? 'bg-red-50 border-red-200' : 'bg-blue-50 border-blue-200'
        }`}>
          <div className="flex items-center space-x-3">
            {reindexProgress.error ? (
              <AlertCircle className="w-5 h-5 text-red-600" />
            ) : (
              <Loader2 className="w-5 h-5 text-blue-600 animate-spin" />
            )}
            <div className="flex-1">
              <p className="text-sm font-medium text-gray-900">{reindexProgress.message}</p>
              {reindexProgress.result && (
                <div className="mt-2 text-sm text-gray-600">
                  <p>–î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {reindexProgress.result.total_documents}</p>
                  <p>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {reindexProgress.result.updated_documents}</p>
                  <p>–¢–æ–∫–µ–Ω–æ–≤: {reindexProgress.result.new_total_tokens?.toLocaleString()}</p>
                </div>
              )}
            </div>
          </div>
          {!reindexProgress.error && (
            <div className="mt-2 w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${reindexProgress.progress}%` }}
              ></div>
            </div>
          )}
        </div>
      )}

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {console.log('üîç [DEBUG] NormativeDocuments.js: Rendering stats section with:', { isLoadingStats, stats })}
      {isLoadingStats ? (
        <div className="bg-white p-8 rounded-lg border shadow-sm text-center">
          <Loader2 className="w-8 h-8 animate-spin mx-auto text-blue-600" />
          <p className="mt-2 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>
        </div>
      ) : stats ? (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="bg-white p-4 rounded-lg border shadow-sm">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-blue-100 rounded-lg">
                <Database className="w-5 h-5 text-blue-600" />
              </div>
              <div>
                <p className="text-sm text-gray-500">–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</p>
                <p className="text-2xl font-bold text-gray-900">{stats.total_documents || 0}</p>
              </div>
            </div>
          </div>
          
          <div className="bg-white p-4 rounded-lg border shadow-sm">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-green-100 rounded-lg">
                <FileText className="w-5 h-5 text-green-600" />
              </div>
              <div>
                <p className="text-sm text-gray-500">–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ</p>
                <p className="text-2xl font-bold text-gray-900">{stats.indexed_documents || 0}</p>
              </div>
            </div>
          </div>
          
          <div className="bg-white p-4 rounded-lg border shadow-sm">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-purple-100 rounded-lg">
                <Tag className="w-5 h-5 text-purple-600" />
              </div>
              <div>
                <p className="text-sm text-gray-500">–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏</p>
                <p className="text-2xl font-bold text-gray-900">{stats.indexing_progress || '0%'}</p>
              </div>
            </div>
          </div>
          
          <div className="bg-white p-4 rounded-lg border shadow-sm">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-orange-100 rounded-lg">
                <Archive className="w-5 h-5 text-orange-600" />
              </div>
              <div>
                <p className="text-sm text-gray-500">–ö–∞—Ç–µ–≥–æ—Ä–∏–π</p>
                <p className="text-2xl font-bold text-gray-900">{stats.category_distribution ? Object.keys(stats.category_distribution).length : 0}</p>
              </div>
            </div>
          </div>
        </div>
      ) : null}

      {/* –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {stats && stats.category_distribution && (
        <div className="bg-white p-4 rounded-lg border shadow-sm">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {Object.entries(stats.category_distribution).map(([category, count]) => (
              <div key={category} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <span className="font-medium text-gray-700">{category}</span>
                <span className="text-lg font-bold text-blue-600">{count}</span>
              </div>
            ))}
          </div>
          {stats.collection_name && (
            <div className="mt-4 p-3 bg-blue-50 rounded-lg">
              <p className="text-sm text-blue-800">
                <strong>–ö–æ–ª–ª–µ–∫—Ü–∏—è:</strong> {stats.collection_name}
              </p>
            </div>
          )}
        </div>
      )}

      {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
      <div className="bg-white p-4 rounded-lg border shadow-sm">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">–ü–æ–∏—Å–∫</label>
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..."
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
            <select
              value={filterCategory}
              onChange={(e) => setFilterCategory(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
              {categories.map(category => (
                <option key={category.value} value={category.value}>
                  {category.label}
                </option>
              ))}
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">–°—Ç–∞—Ç—É—Å</label>
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
              {statuses.map(status => (
                <option key={status.value} value={status.value}>
                  {status.label}
                </option>
              ))}
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</label>
            <select
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="upload_date">–ü–æ –¥–∞—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏</option>
              <option value="filename">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
              <option value="file_size">–ü–æ —Ä–∞–∑–º–µ—Ä—É</option>
              <option value="category">–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
            </select>
          </div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ */}
      <div className="bg-white rounded-lg border shadow-sm">
        <div className="p-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900">
            –î–æ–∫—É–º–µ–Ω—Ç—ã ({sortedDocuments.length})
          </h3>
        </div>
        
        {isLoading ? (
          <div className="p-8 text-center">
            <Loader2 className="w-8 h-8 animate-spin mx-auto text-blue-600" />
            <p className="mt-2 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...</p>
          </div>
        ) : sortedDocuments.length === 0 ? (
          <div className="p-8 text-center">
            <FileText className="w-12 h-12 mx-auto text-gray-400" />
            <p className="mt-2 text-gray-500">–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
          </div>
        ) : (
          <div className="divide-y divide-gray-200">
            {sortedDocuments.map((doc) => (
              <div key={doc.id} className="p-4 hover:bg-gray-50 transition-colors">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <div className="flex items-center justify-center w-10 h-10 bg-gray-100 rounded-lg">
                      {getFileIcon(doc.file_type)}
                    </div>
                    
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-1">
                        <h4 className="font-medium text-gray-900">{doc.original_filename}</h4>
                        <span className={`px-2 py-1 rounded-full text-xs ${getCategoryInfo(doc.category).color}`}>
                          {getCategoryInfo(doc.category).label}
                        </span>
                        <span className={`px-2 py-1 rounded-full text-xs ${getStatusInfo(doc.processing_status).color}`}>
                          {getStatusInfo(doc.processing_status).label}
                        </span>
                      </div>
                      
                      <div className="flex items-center space-x-4 text-sm text-gray-500">
                        <span>{getFileTypeName(doc.file_type)}</span>
                        <span>{(doc.file_size / 1024 / 1024).toFixed(2)} –ú–ë</span>
                        <span className="flex items-center space-x-1">
                          <Calendar className="w-3 h-3" />
                          <span>{new Date(doc.upload_date).toLocaleDateString('ru-RU')}</span>
                        </span>
                        {doc.token_count > 0 && (
                          <span className="flex items-center space-x-1 text-purple-600">
                            <Hash className="w-3 h-3" />
                            <span>{doc.token_count.toLocaleString()} —Ç–æ–∫–µ–Ω–æ–≤</span>
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => setSelectedDocument(doc)}
                      className="p-2 text-gray-400 hover:text-blue-600 transition-colors"
                      title="–ü—Ä–æ—Å–º–æ—Ç—Ä"
                    >
                      <Eye className="w-4 h-4" />
                    </button>
                    
                    {doc.token_count > 0 && (
                      <button
                        onClick={() => fetchDocumentTokens(doc.id)}
                        className="p-2 text-gray-400 hover:text-purple-600 transition-colors"
                        title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö"
                      >
                        <BarChart3 className="w-4 h-4" />
                      </button>
                    )}
                    
                    <button
                      onClick={() => deleteDocument(doc.id)}
                      className="p-2 text-gray-400 hover:text-red-600 transition-colors"
                      title="–£–¥–∞–ª–∏—Ç—å"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {showUploadModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞</h3>
              <button
                onClick={() => setShowUploadModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                ‚úï
              </button>
            </div>
            
            <div className="space-y-4">
              {/* –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª
                </label>
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                  <input
                    id="file-input"
                    type="file"
                    onChange={handleFileChange}
                    accept=".pdf,.docx,.dwg,.ifc,.txt"
                    className="hidden"
                  />
                  <label htmlFor="file-input" className="cursor-pointer">
                    <Upload className="w-8 h-8 mx-auto text-gray-400 mb-2" />
                    <p className="text-sm text-gray-600">
                      {file ? file.name : '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞'}
                    </p>
                    <p className="text-xs text-gray-500 mt-1">
                      –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PDF, DOCX, DWG, IFC, TXT
                    </p>
                  </label>
                </div>
              </div>
              
              {/* –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
                </label>
                <select 
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  {categories.map(category => (
                    <option key={category.value} value={category.value}>
                      {category.label}
                    </option>
                  ))}
                </select>
              </div>
              
              {/* –û—à–∏–±–∫–∏ */}
              {uploadError && (
                <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <AlertCircle className="w-4 h-4 text-red-600" />
                    <span className="text-sm text-red-800">{uploadError}</span>
                  </div>
                </div>
              )}
              
              {/* –£—Å–ø–µ—Ö */}
              {uploadSuccess && (
                <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <CheckCircle className="w-4 h-4 text-green-600" />
                    <span className="text-sm text-green-800">–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω</span>
                  </div>
                </div>
              )}
              
              {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
              {isUploading && (
                <div className="space-y-2">
                  <div className="flex justify-between text-sm text-gray-600">
                    <span>–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                    <span>{uploadProgress}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                      style={{ width: `${uploadProgress}%` }}
                    ></div>
                  </div>
                </div>
              )}
              
              {/* –ö–Ω–æ–ø–∫–∏ */}
              <div className="flex space-x-3">
                <button
                  onClick={() => setShowUploadModal(false)}
                  className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button
                  onClick={uploadDocument}
                  disabled={!file || isUploading}
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  {isUploading ? (
                    <div className="flex items-center justify-center space-x-2">
                      <Loader2 className="w-4 h-4 animate-spin" />
                      <span>–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                    </div>
                  ) : (
                    '–ó–∞–≥—Ä—É–∑–∏—Ç—å'
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ */}
      {selectedDocument && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[80vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">–î–µ—Ç–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞</h3>
              <button
                onClick={() => setSelectedDocument(null)}
                className="text-gray-400 hover:text-gray-600"
              >
                ‚úï
              </button>
            </div>
            
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞</label>
                  <p className="text-sm text-gray-900">{selectedDocument.original_filename}</p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">–¢–∏–ø —Ñ–∞–π–ª–∞</label>
                  <p className="text-sm text-gray-900">{getFileTypeName(selectedDocument.file_type)}</p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">–†–∞–∑–º–µ—Ä</label>
                  <p className="text-sm text-gray-900">{(selectedDocument.file_size / 1024 / 1024).toFixed(2)} –ú–ë</p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏</label>
                  <p className="text-sm text-gray-900">
                    {new Date(selectedDocument.upload_date).toLocaleString('ru-RU')}
                  </p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                  <span className={`px-2 py-1 rounded-full text-xs ${getCategoryInfo(selectedDocument.category).color}`}>
                    {getCategoryInfo(selectedDocument.category).label}
                  </span>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">–°—Ç–∞—Ç—É—Å</label>
                  <span className={`px-2 py-1 rounded-full text-xs ${getStatusInfo(selectedDocument.processing_status).color}`}>
                    {getStatusInfo(selectedDocument.processing_status).label}
                  </span>
                </div>
              </div>
              
              <div className="pt-4 border-t border-gray-200">
                <div className="flex space-x-3">
                  <button className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                    <Download className="w-4 h-4" />
                    <span>–°–∫–∞—á–∞—Ç—å</span>
                  </button>
                  
                  <button className="flex items-center space-x-2 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
                    <Edit className="w-4 h-4" />
                    <span>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</span>
                  </button>
                  
                  <button 
                    onClick={() => deleteDocument(selectedDocument.id)}
                    className="flex items-center space-x-2 px-4 py-2 border border-red-300 text-red-700 rounded-lg hover:bg-red-50 transition-colors"
                  >
                    <Trash2 className="w-4 h-4" />
                    <span>–£–¥–∞–ª–∏—Ç—å</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö */}
      {showTokenModal && selectedDocumentTokens && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö: {selectedDocumentTokens.document.original_filename}
              </h3>
              <button
                onClick={() => setShowTokenModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                ‚úï
              </button>
            </div>
            
            <div className="space-y-6">
              {/* –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="bg-blue-50 p-4 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <Hash className="w-5 h-5 text-blue-600" />
                    <div>
                      <p className="text-sm text-gray-500">–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤</p>
                      <p className="text-2xl font-bold text-blue-600">
                        {selectedDocumentTokens.token_statistics.total_tokens.toLocaleString()}
                      </p>
                    </div>
                  </div>
                </div>
                
                <div className="bg-green-50 p-4 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <FileText className="w-5 h-5 text-green-600" />
                    <div>
                      <p className="text-sm text-gray-500">–≠–ª–µ–º–µ–Ω—Ç–æ–≤</p>
                      <p className="text-2xl font-bold text-green-600">
                        {selectedDocumentTokens.token_statistics.elements_count}
                      </p>
                    </div>
                  </div>
                </div>
                
                <div className="bg-purple-50 p-4 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <BarChart3 className="w-5 h-5 text-purple-600" />
                    <div>
                      <p className="text-sm text-gray-500">–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞</p>
                      <p className="text-2xl font-bold text-purple-600">
                        {(selectedDocumentTokens.document.file_size / 1024 / 1024).toFixed(2)} –ú–ë
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              {/* –¢–æ–∫–µ–Ω—ã –ø–æ —Ç–∏–ø–∞–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
              <div>
                <h4 className="text-md font-semibold text-gray-900 mb-3">–¢–æ–∫–µ–Ω—ã –ø–æ —Ç–∏–ø–∞–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤</h4>
                <div className="bg-gray-50 p-4 rounded-lg">
                  {Object.entries(selectedDocumentTokens.token_statistics.by_type).map(([type, data]) => (
                    <div key={type} className="flex items-center justify-between py-2 border-b border-gray-200 last:border-b-0">
                      <div className="flex items-center space-x-2">
                        <span className="capitalize font-medium text-gray-700">{type}</span>
                        <span className="text-sm text-gray-500">({data.count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)</span>
                      </div>
                      <span className="font-semibold text-purple-600">
                        {data.tokens.toLocaleString()} —Ç–æ–∫–µ–Ω–æ–≤
                      </span>
                    </div>
                  ))}
                </div>
              </div>

              {/* –¢–æ–∫–µ–Ω—ã –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º */}
              <div>
                <h4 className="text-md font-semibold text-gray-900 mb-3">–¢–æ–∫–µ–Ω—ã –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º</h4>
                <div className="bg-gray-50 p-4 rounded-lg max-h-60 overflow-y-auto">
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                    {Object.entries(selectedDocumentTokens.token_statistics.by_page)
                      .sort(([a], [b]) => parseInt(a) - parseInt(b))
                      .map(([page, data]) => (
                        <div key={page} className="bg-white p-3 rounded border">
                          <div className="text-center">
                            <p className="text-sm font-medium text-gray-700">–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}</p>
                            <p className="text-lg font-bold text-purple-600">{data.tokens.toLocaleString()}</p>
                            <p className="text-xs text-gray-500">{data.count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤</p>
                          </div>
                        </div>
                      ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
      {showSettingsModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-semibold text-gray-900">
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
              </h3>
              <button
                onClick={() => setShowSettingsModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                ‚úï
              </button>
            </div>
            
            {isLoadingSettings ? (
              <div className="flex items-center justify-center py-8">
                <Loader2 className="w-6 h-6 animate-spin text-blue-600" />
                <span className="ml-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...</span>
              </div>
            ) : settingsError ? (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <div className="flex items-center">
                  <AlertCircle className="w-5 h-5 text-red-600" />
                  <span className="ml-2 text-red-800">{settingsError}</span>
                </div>
              </div>
            ) : (
              <div className="space-y-6">
                {settings.map((setting) => (
                  <div key={setting.setting_key} className="border border-gray-200 rounded-lg p-4">
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex-1">
                        <h4 className="text-md font-medium text-gray-900 mb-1">
                          {setting.setting_description}
                        </h4>
                        <p className="text-sm text-gray-500">
                          –ö–ª—é—á: <code className="bg-gray-100 px-1 rounded">{setting.setting_key}</code>
                        </p>
                      </div>
                      <span className={`px-2 py-1 rounded-full text-xs ${
                        setting.setting_type === 'text' ? 'bg-blue-100 text-blue-800' :
                        setting.setting_type === 'boolean' ? 'bg-green-100 text-green-800' :
                        setting.setting_type === 'number' ? 'bg-purple-100 text-purple-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {setting.setting_type}
                      </span>
                    </div>
                    
                    <div className="space-y-3">
                      {setting.setting_type === 'text' && (
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            –ó–Ω–∞—á–µ–Ω–∏–µ
                          </label>
                          <textarea
                            value={setting.setting_value || ''}
                            onChange={(e) => {
                              const newSettings = settings.map(s => 
                                s.setting_key === setting.setting_key 
                                  ? { ...s, setting_value: e.target.value }
                                  : s
                              );
                              setSettings(newSettings);
                            }}
                            rows={4}
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏..."
                          />
                        </div>
                      )}
                      
                      {setting.setting_type === 'boolean' && (
                        <div>
                          <label className="flex items-center">
                            <input
                              type="checkbox"
                              checked={setting.setting_value === 'true'}
                              onChange={(e) => {
                                const newSettings = settings.map(s => 
                                  s.setting_key === setting.setting_key 
                                    ? { ...s, setting_value: e.target.checked.toString() }
                                    : s
                                );
                                setSettings(newSettings);
                              }}
                              className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                            />
                            <span className="text-sm text-gray-700">
                              {setting.setting_value === 'true' ? '–í–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
                            </span>
                          </label>
                        </div>
                      )}
                      
                      {setting.setting_type === 'number' && (
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            –ó–Ω–∞—á–µ–Ω–∏–µ
                          </label>
                          <input
                            type="number"
                            value={setting.setting_value || ''}
                            onChange={(e) => {
                              const newSettings = settings.map(s => 
                                s.setting_key === setting.setting_key 
                                  ? { ...s, setting_value: e.target.value }
                                  : s
                              );
                              setSettings(newSettings);
                            }}
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            placeholder="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ..."
                          />
                        </div>
                      )}
                      
                      <div className="flex justify-end space-x-2">
                        <button
                          onClick={async () => {
                            const success = await deleteSetting(setting.setting_key);
                            if (success) {
                              alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
                            } else {
                              alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
                            }
                          }}
                          className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors flex items-center space-x-1"
                          title="–£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"
                        >
                          <Trash2 className="w-4 h-4" />
                          <span>–£–¥–∞–ª–∏—Ç—å</span>
                        </button>
                        <button
                          onClick={async () => {
                            const success = await updateSetting(setting.setting_key, setting.setting_value);
                            if (success) {
                              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                              alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
                            } else {
                              alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
                            }
                          }}
                          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                        >
                          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
                
                {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è */}
                <div className="border border-blue-200 rounded-lg p-4 bg-blue-50">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex-1">
                      <h4 className="text-md font-medium text-gray-900 mb-1">
                        –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è
                      </h4>
                      <p className="text-sm text-gray-500">
                        –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                      </p>
                    </div>
                    <span className="px-2 py-1 rounded-full text-xs bg-blue-100 text-blue-800">
                      prompt
                    </span>
                  </div>
                  
                  <div className="space-y-3">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        –ü—Ä–æ–º–ø—Ç –¥–ª—è LLM
                      </label>
                      <textarea
                        value={settings.find(s => s.setting_key === 'normcontrol_prompt')?.setting_value || getDefaultNormcontrolPrompt()}
                        onChange={(e) => {
                          const newSettings = settings.map(s => 
                            s.setting_key === 'normcontrol_prompt' 
                              ? { ...s, setting_value: e.target.value }
                              : s
                          );
                          // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
                          if (!newSettings.find(s => s.setting_key === 'normcontrol_prompt')) {
                            newSettings.push({
                              setting_key: 'normcontrol_prompt',
                              setting_value: e.target.value,
                              setting_type: 'text',
                              setting_description: '–ü—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è'
                            });
                          }
                          setSettings(newSettings);
                        }}
                        rows={8}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM..."
                      />
                      <p className="text-xs text-gray-500 mt-1">
                        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {'{document_content}'} - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞, {'{normative_docs}'} - –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                      </p>
                    </div>
                    
                    <div className="flex justify-end space-x-2">
                      <button
                        onClick={async () => {
                          const promptValue = settings.find(s => s.setting_key === 'normcontrol_prompt')?.setting_value || getDefaultNormcontrolPrompt();
                          const success = await updateSetting('normcontrol_prompt', promptValue);
                          if (success) {
                            alert('–ü—Ä–æ–º–ø—Ç –¥–ª—è –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
                          } else {
                            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞');
                          }
                        }}
                        className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                      >
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç
                      </button>
                      <button
                        onClick={() => {
                          const defaultPrompt = getDefaultNormcontrolPrompt();
                          const newSettings = settings.map(s => 
                            s.setting_key === 'normcontrol_prompt' 
                              ? { ...s, setting_value: defaultPrompt }
                              : s
                          );
                          if (!newSettings.find(s => s.setting_key === 'normcontrol_prompt')) {
                            newSettings.push({
                              setting_key: 'normcontrol_prompt',
                              setting_value: defaultPrompt,
                              setting_type: 'text',
                              setting_description: '–ü—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è'
                            });
                          }
                          setSettings(newSettings);
                        }}
                        className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
                      >
                        –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é
                      </button>
                    </div>
                  </div>
                </div>

                {settings.length === 0 && (
                  <div className="text-center py-8 text-gray-500">
                    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default NormativeDocuments;
