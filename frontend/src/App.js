import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { 
  MessageSquare, 
  Send, 
  Bot, 
  User, 
  Settings, 
  Zap, 
  Loader2,
  CheckCircle,
  AlertCircle,
  RefreshCw,
  LogOut,
  Shield,
  BookOpen,
  Upload
} from 'lucide-react';

// Components
import Sidebar from './components/Sidebar';
import Header from './components/Header';
import SettingsPanel from './components/SettingsPanel';
import AuthModal from './components/AuthModal';

// Pages
import DashboardPage from './pages/DashboardPage';
import ChatPage from './pages/ChatPage';
import NormcontrolPage from './pages/NormcontrolPage';
import CalculationsPage from './pages/CalculationsPage';
import StructuralCalculationsPage from './pages/StructuralCalculationsPage';
import DocumentsPage from './pages/DocumentsPage';

function App() {
  const [models, setModels] = useState([]);
  const [selectedModel, setSelectedModel] = useState('');
  const [messages, setMessages] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [showSettings, setShowSettings] = useState(false);
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [authToken, setAuthToken] = useState('');
  const [authMethod, setAuthMethod] = useState('');
  const [userInfo, setUserInfo] = useState(null);
  const [currentPage, setCurrentPage] = useState('dashboard'); // 'dashboard', 'chat', 'normcontrol', 'documents'
  const [systemStatus, setSystemStatus] = useState({
    gateway: false,
    ollama: false,
    keycloak: false
  });
  const [refreshTabs, setRefreshTabs] = useState(false);
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);

  // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    console.log('üîç [DEBUG] App.js: currentPage changed to:', currentPage);
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (window.innerWidth < 1024) {
      setIsSidebarOpen(false);
    }
  }, [currentPage]);

  useEffect(() => {
    console.log('üîç [DEBUG] App.js: systemStatus updated:', systemStatus);
  }, [systemStatus]);

  useEffect(() => {
    console.log('üîç [DEBUG] App.js: models updated:', models);
  }, [models]);

  // API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  const API_BASE = process.env.REACT_APP_API_BASE || '/api/v1';

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const savedUserInfo = localStorage.getItem('userInfo');
    
    if (savedUserInfo) {
      try {
        const user = JSON.parse(savedUserInfo);
        const now = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
        if (user.expiresAt && user.expiresAt > now) {
          setUserInfo(user);
          setAuthToken(user.token);
          setAuthMethod(user.method);
          setIsAuthenticated(true);
        } else {
          // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          localStorage.removeItem('userInfo');
          setShowAuthModal(true);
        }
      } catch (error) {
        console.error('Error parsing saved user info:', error);
        localStorage.removeItem('userInfo');
        setShowAuthModal(true);
      }
    } else {
      setShowAuthModal(true);
    }
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
  const checkSystemStatus = async () => {
    console.log('üîç [DEBUG] App.js: checkSystemStatus started');
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ Gateway (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω)
      try {
        const gatewayResponse = await axios.get('/api/documents');
        setSystemStatus(prev => ({ ...prev, gateway: true }));
      } catch (error) {
        // Gateway –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if (error.response && error.response.status === 401) {
          setSystemStatus(prev => ({ ...prev, gateway: true }));
        } else {
          setSystemStatus(prev => ({ ...prev, gateway: false }));
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama (—á–µ—Ä–µ–∑ Gateway —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)
      try {
        if (isAuthenticated && authToken) {
          const ollamaResponse = await axios.get('/ollama/api/tags', {
            headers: { Authorization: `Bearer ${authToken}` }
          });
          setSystemStatus(prev => ({ ...prev, ollama: true }));
        } else {
          // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Gateway –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
          // Gateway –≤–µ—Ä–Ω–µ—Ç 401, –Ω–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω
          try {
            const ollamaResponse = await axios.get('/ollama/api/tags');
            setSystemStatus(prev => ({ ...prev, ollama: true }));
          } catch (gatewayError) {
            if (gatewayError.response && gatewayError.response.status === 401) {
              // Gateway –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
              setSystemStatus(prev => ({ ...prev, ollama: true }));
            } else {
              setSystemStatus(prev => ({ ...prev, ollama: false }));
            }
          }
        }
      } catch (error) {
        setSystemStatus(prev => ({ ...prev, ollama: false }));
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ Keycloak (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω)
      try {
        const keycloakResponse = await axios.get('/keycloak/realms/ai-nk');
        setSystemStatus(prev => ({ ...prev, keycloak: true }));
      } catch (error) {
        console.log('Keycloak realm not found yet');
        setSystemStatus(prev => ({ ...prev, keycloak: false }));
      }
    } catch (error) {
      console.error('üîç [DEBUG] App.js: Error checking system status:', error);
      setSystemStatus({ gateway: false, ollama: false, keycloak: false });
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const handleAuthSuccess = (userInfo, method) => {
    console.log('üîç [DEBUG] App.js: handleAuthSuccess called with:', { userInfo, method });
    console.log('üîç [DEBUG] App.js: userInfo.token length:', userInfo.token?.length);
    console.log('üîç [DEBUG] App.js: userInfo.token starts with:', userInfo.token?.substring(0, 20));
    
    setUserInfo(userInfo);
    setAuthToken(userInfo.token);
    setAuthMethod(method);
    setIsAuthenticated(true);
    setShowAuthModal(false);
    setError(null); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('userInfo', JSON.stringify(userInfo));
    
    console.log('üîç [DEBUG] App.js: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º loadModels');
    console.log('üîç [DEBUG] App.js: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:', { 
      isAuthenticated: true, 
      authToken: !!userInfo.token, 
      authMethod: method 
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    loadModels();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫
    setRefreshTabs(true);
  };

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  const handleLogout = () => {
    setUserInfo(null);
    setAuthToken('');
    setAuthMethod('');
    setIsAuthenticated(false);
    setModels([]);
    setSelectedModel('');
    setMessages([]);
    
    // –û—á–∏—â–∞–µ–º localStorage
    localStorage.removeItem('userInfo');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    setShowAuthModal(true);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
  const loadModels = async () => {
    console.log('üîç [DEBUG] App.js: loadModels started');
    console.log('üîç [DEBUG] App.js: loadModels auth state:', { 
      isAuthenticated, 
      authToken: !!authToken, 
      authTokenLength: authToken?.length,
      authMethod,
      userInfo: !!userInfo
    });
    
    if (!isAuthenticated || !authToken) {
      console.log('loadModels: –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', { isAuthenticated, authToken: !!authToken });
      return;
    }

    try {
      console.log('loadModels: –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏...');
      console.log('loadModels: –ú–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authMethod);
      console.log('loadModels: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ /ollama/api/tags —Å —Ç–æ–∫–µ–Ω–æ–º:', authToken.substring(0, 20) + '...');
      
      const response = await axios.get('/ollama/api/tags', {
        headers: { Authorization: `Bearer ${authToken}` }
      });
      
      console.log('loadModels: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.status, response.data);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Ollama –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
      const modelsData = response.data.models.map(model => ({
        id: model.name,
        name: model.name,
        size: model.size,
        modified_at: model.modified_at
      }));
      
      console.log('loadModels: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', modelsData);
      
      setModels(modelsData);
      if (modelsData.length > 0 && !selectedModel) {
        setSelectedModel(modelsData[0].id);
        console.log('loadModels: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–≤–∞—è –º–æ–¥–µ–ª—å:', modelsData[0].id);
      }
      setError(null); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      console.log('loadModels: –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', modelsData.length);
    } catch (error) {
      console.error('üîç [DEBUG] App.js: Error loading models:', error);
      console.error('üîç [DEBUG] App.js: Error response:', error.response?.data);
      console.error('üîç [DEBUG] App.js: Error status:', error.response?.status);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π');
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = async (content) => {
    if (!content.trim() || !selectedModel) return;
    if (!isAuthenticated || !authToken) {
      console.log('sendMessage: –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', { isAuthenticated, authToken: !!authToken });
      return;
    }

    const userMessage = {
      id: Date.now(),
      role: 'user',
      content: content,
      timestamp: new Date().toISOString()
    };

    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);
    setError(null);

    try {
      const response = await axios.post(`/ollama/api/generate`, {
        model: selectedModel,
        prompt: content,
        stream: false
      }, {
        headers: { 
          Authorization: `Bearer ${authToken}`,
          'Content-Type': 'application/json'
        }
      });

      const assistantMessage = {
        id: Date.now() + 1,
        role: 'assistant',
        content: response.data.response,
        timestamp: new Date().toISOString(),
        usage: {
          prompt_tokens: response.data.prompt_eval_count,
          completion_tokens: response.data.eval_count,
          total_tokens: response.data.prompt_eval_count + response.data.eval_count
        }
      };

      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
      console.error('Error sending message:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º
  const sendMessageWithFile = async (formData, fileName) => {
    if (!isAuthenticated || !authToken) {
      setError('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      return;
    }

    const userMessage = {
      id: Date.now(),
      role: 'user',
      content: `üìé ${fileName}\n${formData.get('message') || '–û–±—Ä–∞–±–æ—Ç–∞–π —ç—Ç–æ—Ç —Ñ–∞–π–ª'}`,
      timestamp: new Date().toISOString()
    };

    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);
    setError(null);

    try {
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ document-parser
      const uploadResponse = await axios.post(`/api/upload/chat`, formData, {
        headers: { 
          Authorization: `Bearer ${authToken}`,
          'Content-Type': 'multipart/form-data'
        }
      });

      if (uploadResponse.data.success) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        const fileContent = uploadResponse.data.content;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ñ–∞–π–ª–∞
        const prompt = `–§–∞–π–ª: ${fileName}\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n${fileContent}\n\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${formData.get('message') || '–û–±—Ä–∞–±–æ—Ç–∞–π —ç—Ç–æ—Ç —Ñ–∞–π–ª'}`;
        
        const response = await axios.post(`/ollama/api/generate`, {
          model: selectedModel,
          prompt: prompt,
          stream: false
        }, {
          headers: { 
            Authorization: `Bearer ${authToken}`,
            'Content-Type': 'application/json'
          }
        });

        const assistantMessage = {
          id: Date.now() + 1,
          role: 'assistant',
          content: response.data.response,
          timestamp: new Date().toISOString(),
          usage: {
            prompt_tokens: response.data.prompt_eval_count,
            completion_tokens: response.data.eval_count,
            total_tokens: response.data.prompt_eval_count + response.data.eval_count
          }
        };

        setMessages(prev => [...prev, assistantMessage]);
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞');
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞');
      console.error('Error processing file:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
  const clearChat = () => {
    setMessages([]);
    setError(null);
  };

  useEffect(() => {
    console.log('üîç [DEBUG] App.js: Initial useEffect triggered');
    console.log('üîç [DEBUG] App.js: Current auth state:', { isAuthenticated, authToken: !!authToken });
    
    const initializeApp = async () => {
      setIsLoading(true);
      console.log('üîç [DEBUG] App.js: Starting app initialization');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –≤—Å–µ–≥–¥–∞
      await checkSystemStatus();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
      if (isAuthenticated && authToken) {
        console.log('üîç [DEBUG] App.js: User is authenticated, loading models');
        await loadModels();
      } else {
        console.log('üîç [DEBUG] App.js: User is not authenticated, skipping models load');
      }
      
      setIsLoading(false);
      console.log('üîç [DEBUG] App.js: App initialization completed');
    };
    initializeApp();
  }, [isAuthenticated, authToken]);

  console.log('üîç [DEBUG] App.js: Rendering with currentPage:', currentPage, 'isLoading:', isLoading);

  return (
    <div className="min-h-screen bg-gray-50 flex">
      {/* Mobile overlay */}
      {isSidebarOpen && (
        <div 
          className="fixed inset-0 bg-gray-600 bg-opacity-75 z-40 lg:hidden"
          onClick={() => setIsSidebarOpen(false)}
        />
      )}

      {/* Sidebar */}
      <div className={`fixed inset-y-0 left-0 z-50 lg:static lg:z-auto ${isSidebarOpen ? 'block' : 'hidden'} lg:block`}>
        <Sidebar
          currentPage={currentPage}
          onPageChange={setCurrentPage}
          systemStatus={systemStatus}
          isAuthenticated={isAuthenticated}
          userInfo={userInfo}
          authMethod={authMethod}
          onLogout={handleLogout}
          onClose={() => setIsSidebarOpen(false)}
        />
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <Header
          currentPage={currentPage}
          onToggleSidebar={() => setIsSidebarOpen(!isSidebarOpen)}
          isSidebarOpen={isSidebarOpen}
        />

        {/* Page Content */}
        <main className="flex-1 p-6">
          {currentPage === 'dashboard' && (
            <DashboardPage
              systemStatus={systemStatus}
              models={models}
              isAuthenticated={isAuthenticated}
              userInfo={userInfo}
              authMethod={authMethod}
              onPageChange={setCurrentPage}
            />
          )}

          {currentPage === 'chat' && (
            <ChatPage
              models={models}
              selectedModel={selectedModel}
              onModelSelect={setSelectedModel}
              onRefreshModels={loadModels}
              messages={messages}
              onSendMessage={sendMessage}
              onSendMessageWithFile={sendMessageWithFile}
              isLoading={isLoading}
              error={error}
              onClearChat={clearChat}
              isAuthenticated={isAuthenticated}
              showSettings={showSettings}
              SettingsPanel={
                <SettingsPanel
                  onClose={() => setShowSettings(false)}
                  systemStatus={systemStatus}
                  onRefreshStatus={checkSystemStatus}
                />
              }
            />
          )}

          {currentPage === 'normcontrol' && (
            <NormcontrolPage
              isAuthenticated={isAuthenticated}
              authToken={authToken}
              refreshTrigger={refreshTabs}
              onRefreshComplete={() => setRefreshTabs(false)}
            />
          )}

          {currentPage === 'calculations' && (
            <CalculationsPage
              isAuthenticated={isAuthenticated}
              authToken={authToken}
            />
          )}

          {currentPage === 'structural-calculations' && (
            <StructuralCalculationsPage
              isAuthenticated={isAuthenticated}
              authToken={authToken}
            />
          )}

          {currentPage === 'electrical-calculations' && (
            <CalculationsPage
              isAuthenticated={isAuthenticated}
              authToken={authToken}
              calculationType="electrical"
            />
          )}

          {currentPage === 'mechanical-calculations' && (
            <CalculationsPage
              isAuthenticated={isAuthenticated}
              authToken={authToken}
              calculationType="mechanical"
            />
          )}

          {currentPage === 'thermal-calculations' && (
            <CalculationsPage
              isAuthenticated={isAuthenticated}
              authToken={authToken}
              calculationType="thermal"
            />
          )}

          {currentPage === 'safety-calculations' && (
            <CalculationsPage
              isAuthenticated={isAuthenticated}
              authToken={authToken}
              calculationType="safety"
            />
          )}

          {currentPage === 'documents' && (
            <DocumentsPage
              isAuthenticated={isAuthenticated}
              authToken={authToken}
              refreshTrigger={refreshTabs}
              onRefreshComplete={() => setRefreshTabs(false)}
            />
          )}
        </main>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
      <AuthModal
        isOpen={showAuthModal}
        onClose={() => setShowAuthModal(false)}
        onAuthSuccess={handleAuthSuccess}
      />
    </div>
  );
}

export default App;
