#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è "–†–∞—Å—á–µ—Ç—ã"
–í–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ API –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
"""

import asyncio
import aiohttp
import json
import time
import os
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CalculationsTester:
    def __init__(self):
        self.api_url = 'http://localhost:8004'  # Calculation Service
        self.frontend_url = 'https://localhost:443'  # Frontend
        self.test_results = {}
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤
        self.test_calculations = {
            'welding_strength': {
                'material': 'steel',
                'thickness': 10,
                'weld_type': 'butt',
                'load': 1000,
                'expected_result_range': (80, 120)
            },
            'material_properties': {
                'material': 'aluminum',
                'temperature': 20,
                'stress': 100,
                'expected_result_range': (200, 300)
            },
            'safety_factors': {
                'load': 1000,
                'safety_factor': 2.5,
                'material_yield': 250,
                'expected_result_range': (400, 600)
            },
            'dimension_tolerances': {
                'nominal': 100,
                'tolerance_class': 'H7',
                'measurement': 100.05,
                'expected_result_range': (0.01, 0.05)
            },
            'thermal_expansion': {
                'material': 'steel',
                'temperature_change': 50,
                'length': 1000,
                'expected_result_range': (0.5, 1.0)
            },
            'fatigue_analysis': {
                'stress_amplitude': 100,
                'cycles': 1000000,
                'material': 'steel',
                'expected_result_range': (50, 150)
            }
        }

    async def test_service_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.api_url}/health", ssl=False, timeout=10) as response:
                    if response.status == 200:
                        logger.info("‚úÖ Calculation Service –∑–¥–æ—Ä–æ–≤")
                        return True
                    else:
                        logger.error(f"‚ùå Calculation Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Calculation Service: {e}")
            return False

    async def test_welding_strength_calculation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ —Å–≤–∞—Ä–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ —Å–≤–∞—Ä–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    'calculation_type': 'welding_strength',
                    'parameters': self.test_calculations['welding_strength']
                }
                
                async with session.post(
                    f"{self.api_url}/calculate",
                    json=payload,
                    ssl=False,
                    timeout=30
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –†–∞—Å—á–µ—Ç –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ —Å–≤–∞—Ä–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞
                        if 'result' in result:
                            calculated_value = result['result']
                            expected_range = self.test_calculations['welding_strength']['expected_result_range']
                            
                            if expected_range[0] <= calculated_value <= expected_range[1]:
                                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–∂–∏–¥–∞–µ–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {calculated_value}")
                                return True
                            else:
                                logger.warning(f"‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {calculated_value}")
                                return False
                        else:
                            logger.error("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
            return False

    async def test_material_properties_calculation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å–≤–æ–π—Å—Ç–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å–≤–æ–π—Å—Ç–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
        
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    'calculation_type': 'material_properties',
                    'parameters': self.test_calculations['material_properties']
                }
                
                async with session.post(
                    f"{self.api_url}/calculate",
                    json=payload,
                    ssl=False,
                    timeout=30
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –†–∞—Å—á–µ—Ç —Å–≤–æ–π—Å—Ç–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞
                        if 'result' in result:
                            calculated_value = result['result']
                            expected_range = self.test_calculations['material_properties']['expected_result_range']
                            
                            if expected_range[0] <= calculated_value <= expected_range[1]:
                                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–∂–∏–¥–∞–µ–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {calculated_value}")
                                return True
                            else:
                                logger.warning(f"‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {calculated_value}")
                                return False
                        else:
                            logger.error("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
            return False

    async def test_safety_factors_calculation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    'calculation_type': 'safety_factors',
                    'parameters': self.test_calculations['safety_factors']
                }
                
                async with session.post(
                    f"{self.api_url}/calculate",
                    json=payload,
                    ssl=False,
                    timeout=30
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞
                        if 'result' in result:
                            calculated_value = result['result']
                            expected_range = self.test_calculations['safety_factors']['expected_result_range']
                            
                            if expected_range[0] <= calculated_value <= expected_range[1]:
                                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–∂–∏–¥–∞–µ–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {calculated_value}")
                                return True
                            else:
                                logger.warning(f"‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {calculated_value}")
                                return False
                        else:
                            logger.error("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
            return False

    async def test_dimension_tolerances_calculation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ø—É—Å–∫–æ–≤ –∏ –ø–æ—Å–∞–¥–æ–∫"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ø—É—Å–∫–æ–≤ –∏ –ø–æ—Å–∞–¥–æ–∫...")
        
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    'calculation_type': 'dimension_tolerances',
                    'parameters': self.test_calculations['dimension_tolerances']
                }
                
                async with session.post(
                    f"{self.api_url}/calculate",
                    json=payload,
                    ssl=False,
                    timeout=30
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –†–∞—Å—á–µ—Ç –¥–æ–ø—É—Å–∫–æ–≤ –∏ –ø–æ—Å–∞–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞
                        if 'result' in result:
                            calculated_value = result['result']
                            expected_range = self.test_calculations['dimension_tolerances']['expected_result_range']
                            
                            if expected_range[0] <= calculated_value <= expected_range[1]:
                                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–∂–∏–¥–∞–µ–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {calculated_value}")
                                return True
                            else:
                                logger.warning(f"‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {calculated_value}")
                                return False
                        else:
                            logger.error("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
            return False

    async def test_thermal_expansion_calculation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–ø–ª–æ–≤–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–ø–ª–æ–≤–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...")
        
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    'calculation_type': 'thermal_expansion',
                    'parameters': self.test_calculations['thermal_expansion']
                }
                
                async with session.post(
                    f"{self.api_url}/calculate",
                    json=payload,
                    ssl=False,
                    timeout=30
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –†–∞—Å—á–µ—Ç —Ç–µ–ø–ª–æ–≤–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞
                        if 'result' in result:
                            calculated_value = result['result']
                            expected_range = self.test_calculations['thermal_expansion']['expected_result_range']
                            
                            if expected_range[0] <= calculated_value <= expected_range[1]:
                                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–∂–∏–¥–∞–µ–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {calculated_value}")
                                return True
                            else:
                                logger.warning(f"‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {calculated_value}")
                                return False
                        else:
                            logger.error("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
            return False

    async def test_fatigue_analysis_calculation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —É—Å—Ç–∞–ª–æ—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —É—Å—Ç–∞–ª–æ—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    'calculation_type': 'fatigue_analysis',
                    'parameters': self.test_calculations['fatigue_analysis']
                }
                
                async with session.post(
                    f"{self.api_url}/calculate",
                    json=payload,
                    ssl=False,
                    timeout=30
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –†–∞—Å—á–µ—Ç —É—Å—Ç–∞–ª–æ—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞
                        if 'result' in result:
                            calculated_value = result['result']
                            expected_range = self.test_calculations['fatigue_analysis']['expected_result_range']
                            
                            if expected_range[0] <= calculated_value <= expected_range[1]:
                                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–∂–∏–¥–∞–µ–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {calculated_value}")
                                return True
                            else:
                                logger.warning(f"‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {calculated_value}")
                                return False
                        else:
                            logger.error("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
            return False

    async def test_batch_calculations(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤...")
        
        try:
            async with aiohttp.ClientSession() as session:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ —Ä–∞—Å—á–µ—Ç–æ–≤
                calculations = []
                for calc_type, params in self.test_calculations.items():
                    calculations.append({
                        'type': calc_type,
                        'parameters': params
                    })
                
                payload = {
                    'calculations': calculations,
                    'parallel_processing': True
                }
                
                async with session.post(
                    f"{self.api_url}/batch_calculate",
                    json=payload,
                    ssl=False,
                    timeout=120
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –ü–∞–∫–µ—Ç–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        if 'results' in result and len(result['results']) == len(calculations):
                            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(result['results'])} —Ä–∞—Å—á–µ—Ç–æ–≤")
                            return True
                        else:
                            logger.warning("‚ö†Ô∏è –ù–µ –≤—Å–µ —Ä–∞—Å—á–µ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤: {e}")
            return False

    async def test_frontend_calculations(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞—Å—á–µ—Ç–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞—Å—á–µ—Ç–æ–≤...")
        
        try:
            async with aiohttp.ClientSession() as session:
                # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞—Å—á–µ—Ç–æ–≤
                async with session.get(
                    f"{self.frontend_url}/calculations",
                    ssl=False,
                    timeout=30
                ) as response:
                    if response.status == 200:
                        logger.info("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω")
                        
                        # –¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
                        payload = {
                            'calculation_type': 'welding_strength',
                            'parameters': self.test_calculations['welding_strength']
                        }
                        
                        async with session.post(
                            f"{self.frontend_url}/api/calculate",
                            json=payload,
                            ssl=False,
                            timeout=30
                        ) as response:
                            if response.status == 200:
                                result = await response.json()
                                logger.info("‚úÖ API –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                                return True
                            else:
                                logger.warning(f"‚ö†Ô∏è API –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                                return False
                    else:
                        logger.error(f"‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}")
            return False

    async def test_calculation_accuracy(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤...")
        
        try:
            async with aiohttp.ClientSession() as session:
                # –¢–µ—Å—Ç —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                test_cases = [
                    {
                        'type': 'welding_strength',
                        'parameters': {'material': 'steel', 'thickness': 10, 'load': 1000},
                        'expected': 100  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    },
                    {
                        'type': 'safety_factors',
                        'parameters': {'load': 1000, 'safety_factor': 2.5},
                        'expected': 400  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    }
                ]
                
                accuracy_results = []
                
                for test_case in test_cases:
                    payload = {
                        'calculation_type': test_case['type'],
                        'parameters': test_case['parameters']
                    }
                    
                    async with session.post(
                        f"{self.api_url}/calculate",
                        json=payload,
                        ssl=False,
                        timeout=30
                    ) as response:
                        if response.status == 200:
                            result = await response.json()
                            
                            if 'result' in result:
                                calculated = result['result']
                                expected = test_case['expected']
                                accuracy = abs(calculated - expected) / expected
                                
                                if accuracy < 0.1:  # 10% –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                                    accuracy_results.append(True)
                                    logger.info(f"‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å {test_case['type']}: {accuracy:.2%}")
                                else:
                                    accuracy_results.append(False)
                                    logger.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å {test_case['type']}: {accuracy:.2%}")
                            else:
                                accuracy_results.append(False)
                        else:
                            accuracy_results.append(False)
                
                # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
                if sum(accuracy_results) / len(accuracy_results) >= 0.8:
                    logger.info("‚úÖ –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∏–∑–∫–∞—è")
                    return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏: {e}")
            return False

    async def test_error_handling(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        try:
            async with aiohttp.ClientSession() as session:
                # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                payload = {
                    'calculation_type': 'invalid_type',
                    'parameters': {}
                }
                
                async with session.post(
                    f"{self.api_url}/calculate",
                    json=payload,
                    ssl=False,
                    timeout=10
                ) as response:
                    if response.status in [400, 422]:
                        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        return True
                    else:
                        logger.warning("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è")
                        return False
        except Exception as e:
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ)")
            return True

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –º–æ–¥—É–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è '–†–∞—Å—á–µ—Ç—ã'...")
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        self.test_results = {
            'service_health': await self.test_service_health(),
            'welding_strength_calculation': await self.test_welding_strength_calculation(),
            'material_properties_calculation': await self.test_material_properties_calculation(),
            'safety_factors_calculation': await self.test_safety_factors_calculation(),
            'dimension_tolerances_calculation': await self.test_dimension_tolerances_calculation(),
            'thermal_expansion_calculation': await self.test_thermal_expansion_calculation(),
            'fatigue_analysis_calculation': await self.test_fatigue_analysis_calculation(),
            'batch_calculations': await self.test_batch_calculations(),
            'frontend_calculations': await self.test_frontend_calculations(),
            'calculation_accuracy': await self.test_calculation_accuracy(),
            'error_handling': await self.test_error_handling()
        }
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() if result)
        success_rate = (passed_tests / total_tests) * 100
        
        end_time = time.time()
        duration = end_time - start_time
        
        logger.info(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        return self.test_results

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –º–æ–¥—É–ª—é"""
        report = {
            'module': '–†–∞—Å—á–µ—Ç—ã',
            'timestamp': datetime.now().isoformat(),
            'test_results': self.test_results,
            'test_calculations': self.test_calculations,
            'summary': {
                'total_tests': len(self.test_results),
                'passed_tests': sum(1 for result in self.test_results.values() if result),
                'success_rate': (sum(1 for result in self.test_results.values() if result) / len(self.test_results)) * 100
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        report_path = os.path.join(base_dir, 'reports', 'calculations_test_report.json')
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        return report

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = CalculationsTester()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    results = await tester.run_all_tests()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    report = tester.generate_report()
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "="*60)
    print("üìä –û–¢–ß–ï–¢ –ü–û –ú–û–î–£–õ–Æ '–†–ê–°–ß–ï–¢–´'")
    print("="*60)
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
    
    print(f"\nüéØ –£–°–ü–ï–®–ù–û–°–¢–¨: {report['summary']['success_rate']:.1f}%")
    print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: calculations_test_report.json")

if __name__ == "__main__":
    asyncio.run(main())
