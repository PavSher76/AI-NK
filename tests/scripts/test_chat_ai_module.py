#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è "–ß–∞—Ç —Å –ò–ò"
–í–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤, –∞–Ω–∞–ª–∏–∑–∞ PDF/DOCX –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import asyncio
import aiohttp
import json
import time
import os
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ChatAITester:
    def __init__(self):
        self.base_url = 'http://localhost:8005'  # VLLM Service
        # –ü—É—Ç–∏ –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–∞–ø–∫–∏ tests
        base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        self.test_documents = {
            'pdf': os.path.join(base_dir, 'data', 'TestDocs', 'for_check', '–°–ó_–¢–ï–°–¢.pdf'),
            'docx': os.path.join(base_dir, 'data', 'TestDocs', 'for_check', '–°–ó_–¢–ï–°–¢.docx'),
            'gost_pdf': os.path.join(base_dir, 'data', 'TestDocs', 'for_check', '3401-21089-–†–î-01-220-221-–ê–†_4_0_RU_IFC (1).pdf')
        }
        self.test_results = {}

    async def test_service_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.base_url}/health", ssl=False, timeout=10) as response:
                    if response.status == 200:
                        logger.info("‚úÖ VLLM Service –∑–¥–æ—Ä–æ–≤")
                        return True
                    else:
                        logger.error(f"‚ùå VLLM Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VLLM Service: {e}")
            return False

    async def test_pdf_upload_and_analysis(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ PDF"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ PDF...")
        
        if not os.path.exists(self.test_documents['pdf']):
            logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        try:
            async with aiohttp.ClientSession() as session:
                # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
                with open(self.test_documents['pdf'], 'rb') as f:
                    data = aiohttp.FormData()
                    data.add_field('file', f, filename='test_document.pdf')
                    
                    async with session.post(
                        f"{self.base_url}/upload_document",
                        data=data,
                        ssl=False,
                        timeout=60
                    ) as response:
                        if response.status == 200:
                            upload_result = await response.json()
                            logger.info("‚úÖ PDF –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                            
                            # –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                            analysis_result = await self.analyze_document(upload_result.get('document_id'))
                            return analysis_result
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF: {response.status}")
                            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF: {e}")
            return False

    async def test_docx_upload_and_analysis(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ DOCX"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOCX...")
        
        if not os.path.exists(self.test_documents['docx']):
            logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π DOCX —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        try:
            async with aiohttp.ClientSession() as session:
                # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
                with open(self.test_documents['docx'], 'rb') as f:
                    data = aiohttp.FormData()
                    data.add_field('file', f, filename='test_document.docx')
                    
                    async with session.post(
                        f"{self.base_url}/upload_document",
                        data=data,
                        ssl=False,
                        timeout=60
                    ) as response:
                        if response.status == 200:
                            upload_result = await response.json()
                            logger.info("‚úÖ DOCX –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                            
                            # –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                            analysis_result = await self.analyze_document(upload_result.get('document_id'))
                            return analysis_result
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ DOCX: {response.status}")
                            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ DOCX: {e}")
            return False

    async def analyze_document(self, document_id):
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    "document_id": document_id,
                    "analysis_type": "full",
                    "extract_text": True,
                    "extract_metadata": True
                }
                
                async with session.post(
                    f"{self.base_url}/analyze",
                    json=payload,
                    ssl=False,
                    timeout=60
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
                        if 'text' in result and len(result['text']) > 100:
                            logger.info("‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ")
                            return True
                        else:
                            logger.warning("‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∏–∑–∫–æ–µ")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return False

    async def test_chat_with_document_context(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º...")
        
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    "message": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏",
                    "context": "document",
                    "document_id": "test_doc"
                }
                
                async with session.post(
                    f"{self.base_url}/chat",
                    json=payload,
                    ssl=False,
                    timeout=60
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –ß–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
                        if 'response' in result and len(result['response']) > 50:
                            logger.info("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ")
                            return True
                        else:
                            logger.warning("‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∏–∑–∫–æ–µ")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞: {e}")
            return False

    async def test_chat_without_context(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
        
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    "message": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö —Å–∏—Å—Ç–µ–º—ã AI-NK –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤",
                    "context": "general"
                }
                
                async with session.post(
                    f"{self.base_url}/chat",
                    json=payload,
                    ssl=False,
                    timeout=30
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –û–±—â–∏–π —á–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
                        if 'response' in result and len(result['response']) > 100:
                            logger.info("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ")
                            return True
                        else:
                            logger.warning("‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∏–∑–∫–æ–µ")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞: {e}")
            return False

    async def test_document_processing_pipeline(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        
        try:
            # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            upload_success = await self.test_pdf_upload_and_analysis()
            if not upload_success:
                return False
            
            # 2. –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            analysis_success = await self.analyze_document("test_doc")
            if not analysis_success:
                return False
            
            # 3. –ß–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            chat_success = await self.test_chat_with_document_context()
            if not chat_success:
                return False
            
            logger.info("‚úÖ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
            return False

    async def test_error_handling(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        try:
            async with aiohttp.ClientSession() as session:
                # –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–∏–ø–æ–º —Ñ–∞–π–ª–∞
                payload = {
                    "message": "test",
                    "context": "invalid"
                }
                
                async with session.post(
                    f"{self.base_url}/chat",
                    json=payload,
                    ssl=False,
                    timeout=10
                ) as response:
                    if response.status in [400, 422]:
                        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        return True
                    else:
                        logger.warning("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è")
                        return False
        except Exception as e:
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ)")
            return True

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –º–æ–¥—É–ª—è —á–∞—Ç–∞ —Å –ò–ò"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è '–ß–∞—Ç —Å –ò–ò'...")
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        self.test_results = {
            'service_health': await self.test_service_health(),
            'pdf_upload_analysis': await self.test_pdf_upload_and_analysis(),
            'docx_upload_analysis': await self.test_docx_upload_and_analysis(),
            'chat_with_context': await self.test_chat_with_document_context(),
            'chat_without_context': await self.test_chat_without_context(),
            'processing_pipeline': await self.test_document_processing_pipeline(),
            'error_handling': await self.test_error_handling()
        }
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() if result)
        success_rate = (passed_tests / total_tests) * 100
        
        end_time = time.time()
        duration = end_time - start_time
        
        logger.info(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        return self.test_results

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –º–æ–¥—É–ª—é"""
        report = {
            'module': '–ß–∞—Ç —Å –ò–ò',
            'timestamp': datetime.now().isoformat(),
            'test_results': self.test_results,
            'summary': {
                'total_tests': len(self.test_results),
                'passed_tests': sum(1 for result in self.test_results.values() if result),
                'success_rate': (sum(1 for result in self.test_results.values() if result) / len(self.test_results)) * 100
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        report_path = os.path.join(base_dir, 'reports', 'chat_ai_test_report.json')
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        return report

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ChatAITester()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    results = await tester.run_all_tests()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    report = tester.generate_report()
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "="*60)
    print("üìä –û–¢–ß–ï–¢ –ü–û –ú–û–î–£–õ–Æ '–ß–ê–¢ –° –ò–ò'")
    print("="*60)
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
    
    print(f"\nüéØ –£–°–ü–ï–®–ù–û–°–¢–¨: {report['summary']['success_rate']:.1f}%")
    print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: chat_ai_test_report.json")

if __name__ == "__main__":
    asyncio.run(main())
