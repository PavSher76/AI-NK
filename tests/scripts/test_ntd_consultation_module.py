#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ù–¢–î –æ—Ç –ò–ò"
–í–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∏ LLM –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å —Å—Å—ã–ª–∫–∞–º–∏
"""

import asyncio
import aiohttp
import json
import time
import os
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class NTDConsultationTester:
    def __init__(self):
        self.base_url = 'http://localhost:8003'  # RAG Service
        self.test_queries = [
            "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤",
            "–ì–û–°–¢ 14771 —Å–≤–∞—Ä–∫–∞",
            "–¥–æ–ø—É—Å–∫–∏ –∏ –ø–æ—Å–∞–¥–∫–∏",
            "–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞",
            "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ü–∏—é"
        ]
        self.test_results = {}

    async def test_service_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.base_url}/health", ssl=False, timeout=10) as response:
                    if response.status == 200:
                        logger.info("‚úÖ RAG Service –∑–¥–æ—Ä–æ–≤")
                        return True
                    else:
                        logger.error(f"‚ùå RAG Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RAG Service: {e}")
            return False

    async def test_search_functionality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞...")
        
        try:
            async with aiohttp.ClientSession() as session:
                for query in self.test_queries:
                    payload = {
                        "query": query,
                        "limit": 10,
                        "include_metadata": True
                    }
                    
                    async with session.post(
                        f"{self.base_url}/search",
                        json=payload,
                        ssl=False,
                        timeout=30
                    ) as response:
                        if response.status == 200:
                            result = await response.json()
                            logger.info(f"‚úÖ –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –≤—ã–ø–æ–ª–Ω–µ–Ω")
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞
                            if 'results' in result and len(result['results']) > 0:
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result['results'])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                                return True
                            else:
                                logger.warning(f"‚ö†Ô∏è –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}': {response.status}")
                            return False
                
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return False

    async def test_llm_processing(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ LLM"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ LLM...")
        
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    "query": "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –ì–û–°–¢?",
                    "context": "ntd",
                    "include_references": True
                }
                
                async with session.post(
                    f"{self.base_url}/ask",
                    json=payload,
                    ssl=False,
                    timeout=60
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ LLM –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
                        if 'answer' in result and len(result['answer']) > 100:
                            logger.info("‚úÖ –û—Ç–≤–µ—Ç LLM —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
                            return True
                        else:
                            logger.warning("‚ö†Ô∏è –û—Ç–≤–µ—Ç LLM —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ LLM: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ LLM: {e}")
            return False

    async def test_document_references(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
        
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    "query": "–ì–û–°–¢ 14771 —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–≤–∞—Ä–∫–µ",
                    "include_references": True,
                    "reference_format": "detailed"
                }
                
                async with session.post(
                    f"{self.base_url}/ask",
                    json=payload,
                    ssl=False,
                    timeout=60
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Å—ã–ª–æ–∫
                        if 'references' in result and len(result['references']) > 0:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result['references'])} —Å—Å—ã–ª–æ–∫")
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫
                            for ref in result['references']:
                                if 'title' in ref and 'url' in ref:
                                    logger.info(f"‚úÖ –°—Å—ã–ª–∫–∞: {ref['title']}")
                            
                            return True
                        else:
                            logger.warning("‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫: {e}")
            return False

    async def test_response_quality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤...")
        
        try:
            async with aiohttp.ClientSession() as session:
                # –¢–µ—Å—Ç —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                payload = {
                    "query": "–û–±—ä—è—Å–Ω–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–≤–∞—Ä–Ω—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º —Å–æ–≥–ª–∞—Å–Ω–æ –ì–û–°–¢ 14771",
                    "quality_check": True,
                    "include_examples": True
                }
                
                async with session.post(
                    f"{self.base_url}/ask",
                    json=payload,
                    ssl=False,
                    timeout=60
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
                        quality_indicators = [
                            'answer' in result,
                            len(result.get('answer', '')) > 200,
                            'references' in result,
                            'confidence_score' in result
                        ]
                        
                        quality_score = sum(quality_indicators) / len(quality_indicators)
                        
                        if quality_score >= 0.75:
                            logger.info(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞: {quality_score:.2f}")
                            return True
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞: {quality_score:.2f}")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            return False

    async def test_context_awareness(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏...")
        
        try:
            async with aiohttp.ClientSession() as session:
                # –¢–µ—Å—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
                payload = {
                    "query": "–ö–∞–∫–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–≤–∞—Ä–∫–µ –∞–ª—é–º–∏–Ω–∏—è?",
                    "context": "previous_query_about_welding",
                    "include_context": True
                }
                
                async with session.post(
                    f"{self.base_url}/ask",
                    json=payload,
                    ssl=False,
                    timeout=60
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏
                        if 'answer' in result and '–∞–ª—é–º–∏–Ω–∏–π' in result['answer'].lower():
                            logger.info("‚úÖ –û—Ç–≤–µ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç")
                            return True
                        else:
                            logger.warning("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
            return False

    async def test_multilingual_support(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏...")
        
        try:
            async with aiohttp.ClientSession() as session:
                # –¢–µ—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                payload = {
                    "query": "What are the requirements for welding quality?",
                    "language": "en",
                    "include_references": True
                }
                
                async with session.post(
                    f"{self.base_url}/ask",
                    json=payload,
                    ssl=False,
                    timeout=60
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
                        if 'answer' in result and len(result['answer']) > 50:
                            logger.info("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ–ª—É—á–µ–Ω")
                            return True
                        else:
                            logger.warning("‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –Ω–∏–∑–∫–æ–µ")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
            return False

    async def test_knowledge_base_integration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π...")
        
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    "query": "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ì–û–°–¢—ã –ø–æ —Å–≤–∞—Ä–∫–µ",
                    "include_catalog": True,
                    "limit": 20
                }
                
                async with session.post(
                    f"{self.base_url}/catalog",
                    json=payload,
                    ssl=False,
                    timeout=30
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
                        if 'catalog' in result and len(result['catalog']) > 0:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result['catalog'])} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ")
                            return True
                        else:
                            logger.warning("‚ö†Ô∏è –ö–∞—Ç–∞–ª–æ–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π: {e}")
            return False

    async def test_error_handling(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        try:
            async with aiohttp.ClientSession() as session:
                # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
                payload = {
                    "query": "",
                    "context": "invalid"
                }
                
                async with session.post(
                    f"{self.base_url}/ask",
                    json=payload,
                    ssl=False,
                    timeout=10
                ) as response:
                    if response.status in [400, 422]:
                        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        return True
                    else:
                        logger.warning("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è")
                        return False
        except Exception as e:
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ)")
            return True

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –º–æ–¥—É–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ù–¢–î"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ù–¢–î –æ—Ç –ò–ò'...")
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        self.test_results = {
            'service_health': await self.test_service_health(),
            'search_functionality': await self.test_search_functionality(),
            'llm_processing': await self.test_llm_processing(),
            'document_references': await self.test_document_references(),
            'response_quality': await self.test_response_quality(),
            'context_awareness': await self.test_context_awareness(),
            'multilingual_support': await self.test_multilingual_support(),
            'knowledge_base_integration': await self.test_knowledge_base_integration(),
            'error_handling': await self.test_error_handling()
        }
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() if result)
        success_rate = (passed_tests / total_tests) * 100
        
        end_time = time.time()
        duration = end_time - start_time
        
        logger.info(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        return self.test_results

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –º–æ–¥—É–ª—é"""
        report = {
            'module': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ù–¢–î –æ—Ç –ò–ò',
            'timestamp': datetime.now().isoformat(),
            'test_results': self.test_results,
            'summary': {
                'total_tests': len(self.test_results),
                'passed_tests': sum(1 for result in self.test_results.values() if result),
                'success_rate': (sum(1 for result in self.test_results.values() if result) / len(self.test_results)) * 100
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        report_path = os.path.join(base_dir, 'reports', 'ntd_consultation_test_report.json')
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        return report

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = NTDConsultationTester()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    results = await tester.run_all_tests()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    report = tester.generate_report()
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "="*60)
    print("üìä –û–¢–ß–ï–¢ –ü–û –ú–û–î–£–õ–Æ '–ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø –ù–¢–î –û–¢ –ò–ò'")
    print("="*60)
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
    
    print(f"\nüéØ –£–°–ü–ï–®–ù–û–°–¢–¨: {report['summary']['success_rate']:.1f}%")
    print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ntd_consultation_test_report.json")

if __name__ == "__main__":
    asyncio.run(main())
