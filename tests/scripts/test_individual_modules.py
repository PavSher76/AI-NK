#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'rag_service'))

def test_metadata_extractor():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MetadataExtractor...")
    
    try:
        from rag_service.services.metadata_extractor import MetadataExtractor
        metadata_extractor = MetadataExtractor()
        print("‚úÖ MetadataExtractor —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        test_cases = [
            ("–°–ü 22.13330.2016.pdf", "SP", "22.13330", 2016),
            ("–°–ù–∏–ü 2.01.07-85.pdf", "SNiP", "2.01.07", 1985),
            ("–ì–û–°–¢ 27751-2014.pdf", "GOST", "27751", 2014),
            ("–ü–ë 03-428-02.pdf", "CORP_STD", "03-428", 2002),
        ]
        
        for filename, expected_type, expected_number, expected_year in test_cases:
            metadata = metadata_extractor.extract_document_metadata(filename, 1)
            
            if metadata['doc_type'] == expected_type:
                print(f"‚úÖ {filename}: —Ç–∏–ø {metadata['doc_type']} - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"‚ùå {filename}: –æ–∂–∏–¥–∞–ª—Å—è {expected_type}, –ø–æ–ª—É—á–µ–Ω {metadata['doc_type']}")
                return False
            
            if metadata['doc_number'] == expected_number:
                print(f"‚úÖ {filename}: –Ω–æ–º–µ—Ä {metadata['doc_number']} - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"‚ùå {filename}: –æ–∂–∏–¥–∞–ª—Å—è {expected_number}, –ø–æ–ª—É—á–µ–Ω {metadata['doc_number']}")
                return False
            
            if metadata['edition_year'] == expected_year:
                print(f"‚úÖ {filename}: –≥–æ–¥ {metadata['edition_year']} - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"‚ùå {filename}: –æ–∂–∏–¥–∞–ª—Å—è {expected_year}, –ø–æ–ª—É—á–µ–Ω {metadata['edition_year']}")
                return False
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã MetadataExtractor –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MetadataExtractor: {e}")
        return False

def test_document_parser():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DocumentParser...")
    
    try:
        from rag_service.services.document_parser import DocumentParser
        document_parser = DocumentParser()
        print("‚úÖ DocumentParser —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–¥–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        test_cases = [
            ("–°–ü 22.13330.2016.pdf", "–°–ü 22.13330.2016"),
            ("–°–ù–∏–ü 2.01.07-85.pdf", "–°–ù–∏–ü 2.01.07-85"),
            ("–ì–û–°–¢ 27751-2014.pdf", "–ì–û–°–¢ 27751-2014"),
            ("–ü–ë 03-428-02.pdf", "–ü–ë 03-428-02"),
        ]
        
        for filename, expected_code in test_cases:
            code = document_parser.extract_document_code(filename)
            
            if code == expected_code:
                print(f"‚úÖ {filename}: –∫–æ–¥ {code} - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"‚ùå {filename}: –æ–∂–∏–¥–∞–ª—Å—è {expected_code}, –ø–æ–ª—É—á–µ–Ω {code}")
                return False
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–¥–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤
        query_test_cases = [
            ("–ß—Ç–æ —Ç–∞–∫–æ–µ –°–ü 22.13330.2016?", "–°–ü 22.13330.2016"),
            ("–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –°–ù–∏–ü 2.01.07-85", "–°–ù–∏–ü 2.01.07-85"),
            ("–ì–û–°–¢ 27751-2014 —á—Ç–æ —ç—Ç–æ?", "–ì–û–°–¢ 27751-2014"),
        ]
        
        for query, expected_code in query_test_cases:
            code = document_parser.extract_document_code_from_query(query)
            
            if code == expected_code:
                print(f"‚úÖ –ó–∞–ø—Ä–æ—Å '{query}': –∫–æ–¥ {code} - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"‚ùå –ó–∞–ø—Ä–æ—Å '{query}': –æ–∂–∏–¥–∞–ª—Å—è {expected_code}, –ø–æ–ª—É—á–µ–Ω {code}")
                return False
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã DocumentParser –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DocumentParser: {e}")
        return False

def test_document_chunker():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è —á–∞–Ω–∫–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DocumentChunker...")
    
    try:
        from rag_service.services.document_chunker import DocumentChunker
        document_chunker = DocumentChunker()
        print("‚úÖ DocumentChunker —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç —Å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
        simple_text = "–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç. " * 100
        chunks = document_chunker.create_chunks(simple_text, 1, "test.pdf")
        
        if len(chunks) > 0:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤ –∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —á–∞–Ω–∫–∞
            chunk = chunks[0]
            required_fields = ['chunk_id', 'document_id', 'document_title', 'content', 'chunk_type', 'page', 'chapter', 'section']
            
            for field in required_fields:
                if field in chunk:
                    print(f"‚úÖ –ü–æ–ª–µ {field} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                else:
                    print(f"‚ùå –ü–æ–ª–µ {field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    return False
        else:
            print("‚ùå –ß–∞–Ω–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
            return False
        
        # –¢–µ—Å—Ç —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        structured_text = """
        –ì–õ–ê–í–ê 1. –û–ë–©–ò–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø
        
        1.1. –ù–∞—Å—Ç–æ—è—â–∏–π —Å–≤–æ–¥ –ø—Ä–∞–≤–∏–ª —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ—Å–Ω–æ–≤–∞–Ω–∏–π –∑–¥–∞–Ω–∏–π –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π.
        
        1.2. –°–≤–æ–¥ –ø—Ä–∞–≤–∏–ª —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–π –∑–¥–∞–Ω–∏–π –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π.
        
        –ì–õ–ê–í–ê 2. –û–°–ù–û–í–ê–ù–ò–Ø
        
        2.1. –û—Å–Ω–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –ø—Ä–æ—á–Ω–æ—Å—Ç—å –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∑–¥–∞–Ω–∏–π –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π.
        
        2.2. –û—Å–Ω–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã —Å —É—á–µ—Ç–æ–º –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π.
        """ * 50
        
        chunks = document_chunker.create_chunks(structured_text, 2, "structured_test.pdf")
        
        if len(chunks) > 0:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∞–Ω–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≤–∞—Ö
            has_chapter_info = any('–ì–õ–ê–í–ê' in chunk.get('chapter', '') for chunk in chunks)
            if has_chapter_info:
                print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–ª–∞–≤–∞—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∞")
            else:
                print("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–ª–∞–≤–∞—Ö –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        else:
            print("‚ùå –ß–∞–Ω–∫–∏ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
            return False
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã DocumentChunker –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DocumentChunker: {e}")
        return False

def test_embedding_service():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (–±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama)"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OllamaEmbeddingService...")
    
    try:
        from rag_service.services.embedding_service import OllamaEmbeddingService
        embedding_service = OllamaEmbeddingService()
        print("‚úÖ OllamaEmbeddingService —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        assert hasattr(embedding_service, 'ollama_url')
        assert hasattr(embedding_service, 'model_name')
        assert embedding_service.model_name == "bge-m3"
        print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–∏—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã OllamaEmbeddingService –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OllamaEmbeddingService: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π RAG —Å–µ—Ä–≤–∏—Å–∞")
    print("=" * 60)
    
    tests = [
        ("MetadataExtractor", test_metadata_extractor),
        ("DocumentParser", test_document_parser),
        ("DocumentChunker", test_document_chunker),
        ("OllamaEmbeddingService", test_embedding_service),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 40)
        
        try:
            if test_func():
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –û—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ú–æ–¥—É–ª–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("2. –û–±–Ω–æ–≤–∏—Ç–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ Docker —Å—Ä–µ–¥–µ")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return 1

if __name__ == "__main__":
    exit(main())
