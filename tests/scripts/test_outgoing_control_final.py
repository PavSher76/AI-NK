#!/usr/bin/env python3
"""
–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏–∏
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞ E320.E32C-OUT-03484_–æ—Ç_20.05.2025_—Å_–≥—Ä—É–±—ã–º–∏_–æ—à–∏–±–∫–∞–º–∏
"""

import requests
import json
import time
from datetime import datetime
from pathlib import Path

class FinalOutgoingControlTester:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏–∏"""
    
    def __init__(self):
        self.outgoing_control_url = "http://localhost:8006"
        self.spellchecker_url = "http://localhost:8007"
        self.test_document_path = "TestDocs/for_check/E320.E32C-OUT-03484_–æ—Ç_20.05.2025_—Å_–≥—Ä—É–±—ã–º–∏_–æ—à–∏–±–∫–∞–º–∏.pdf"
        self.document_id = None
        self.test_results = []
        self.start_time = datetime.now()
        
    def log_test(self, test_name, status, details=None, error=None, metrics=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        result = {
            "test_name": test_name,
            "status": status,
            "timestamp": datetime.now().isoformat(),
            "details": details,
            "error": error,
            "metrics": metrics
        }
        self.test_results.append(result)
        
        status_icon = "‚úÖ" if status == "PASS" else "‚ùå" if status == "FAIL" else "‚ö†Ô∏è"
        print(f"{status_icon} {test_name}: {status}")
        if details:
            print(f"   –î–µ—Ç–∞–ª–∏: {details}")
        if metrics:
            print(f"   –ú–µ—Ç—Ä–∏–∫–∏: {metrics}")
        if error:
            print(f"   –û—à–∏–±–∫–∞: {error}")
        print()
    
    def test_system_health(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        print("üîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã")
        print("="*60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ outgoing-control-service
        try:
            response = requests.get(f"{self.outgoing_control_url}/health", timeout=10)
            if response.status_code == 200:
                health_data = response.json()
                self.log_test(
                    "Outgoing Control Service Health",
                    "PASS",
                    f"–°—Ç–∞—Ç—É—Å: {health_data.get('status')}, Spellchecker: {health_data.get('spellchecker_service')}"
                )
            else:
                self.log_test("Outgoing Control Service Health", "FAIL", error=f"HTTP {response.status_code}")
        except Exception as e:
            self.log_test("Outgoing Control Service Health", "FAIL", error=str(e))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ spellchecker-service
        try:
            response = requests.get(f"{self.spellchecker_url}/health", timeout=10)
            if response.status_code == 200:
                health_data = response.json()
                hunspell_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if health_data.get('hunspell_available') else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                lt_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if health_data.get('languagetool_available') else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                
                self.log_test(
                    "Spellchecker Service Health",
                    "PASS",
                    f"–°—Ç–∞—Ç—É—Å: {health_data.get('status')}, Hunspell: {hunspell_status}, LanguageTool: {lt_status}",
                    metrics={
                        "hunspell_available": health_data.get('hunspell_available'),
                        "languagetool_available": health_data.get('languagetool_available')
                    }
                )
            else:
                self.log_test("Spellchecker Service Health", "FAIL", error=f"HTTP {response.status_code}")
        except Exception as e:
            self.log_test("Spellchecker Service Health", "FAIL", error=str(e))
    
    def test_document_upload(self):
        """–¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        print("üîç –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        print("="*60)
        
        try:
            if not Path(self.test_document_path).exists():
                self.log_test("Document Upload", "FAIL", error="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            with open(self.test_document_path, 'rb') as f:
                filename = Path(self.test_document_path).name
                files = {'file': (filename, f, 'application/pdf')}
                response = requests.post(f"{self.outgoing_control_url}/upload", files=files, timeout=30)
            
            if response.status_code == 200:
                doc_data = response.json()
                self.document_id = doc_data.get('document_id') or doc_data.get('id')
                
                metrics = {
                    "document_id": self.document_id,
                    "filename": doc_data.get('filename'),
                    "text_length": len(doc_data.get('text', '')),
                    "pages_count": doc_data.get('pages_count', 0),
                    "chunks_count": doc_data.get('chunks_count', 0)
                }
                
                self.log_test(
                    "Document Upload",
                    "PASS",
                    f"–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {doc_data.get('filename')}, ID: {self.document_id}",
                    metrics=metrics
                )
                return True
            else:
                self.log_test("Document Upload", "FAIL", error=f"HTTP {response.status_code}: {response.text}")
                return False
        except Exception as e:
            self.log_test("Document Upload", "FAIL", error=str(e))
            return False
    
    def test_spellcheck_analysis(self):
        """–¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏"""
        print("üîç –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏")
        print("="*60)
        
        if not self.document_id:
            self.log_test("Spellcheck Analysis", "SKIP", "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return
        
        try:
            start_time = time.time()
            response = requests.post(
                f"{self.outgoing_control_url}/spellcheck",
                json={"document_id": self.document_id},
                timeout=60
            )
            end_time = time.time()
            
            if response.status_code == 200:
                result = response.json()
                spell_results = result.get('spell_check_results', {})
                
                metrics = {
                    "total_words": spell_results.get('total_words', 0),
                    "misspelled_count": spell_results.get('misspelled_count', 0),
                    "accuracy": spell_results.get('accuracy', 0),
                    "method": spell_results.get('method', 'unknown'),
                    "processing_time": end_time - start_time,
                    "errors_found": len(spell_results.get('errors', []))
                }
                
                # –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
                errors = spell_results.get('errors', [])
                error_types = {}
                for error in errors:
                    error_type = error.get('type', 'unknown')
                    error_types[error_type] = error_types.get(error_type, 0) + 1
                
                # –ü—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫
                sample_errors = errors[:5] if errors else []
                
                self.log_test(
                    "Spellcheck Analysis",
                    "PASS",
                    f"–ù–∞–π–¥–µ–Ω–æ {metrics['misspelled_count']} –æ—à–∏–±–æ–∫ –∏–∑ {metrics['total_words']} —Å–ª–æ–≤ (—Ç–æ—á–Ω–æ—Å—Ç—å: {metrics['accuracy']:.2f}%)",
                    error=None,
                    metrics=metrics
                )
            else:
                self.log_test("Spellcheck Analysis", "FAIL", error=f"HTTP {response.status_code}: {response.text}")
        except Exception as e:
            self.log_test("Spellcheck Analysis", "FAIL", error=str(e))
    
    def test_grammar_check_analysis(self):
        """–¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏"""
        print("üîç –¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏")
        print("="*60)
        
        if not self.document_id:
            self.log_test("Grammar Check Analysis", "SKIP", "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return
        
        try:
            start_time = time.time()
            response = requests.post(
                f"{self.outgoing_control_url}/grammar-check",
                json={"document_id": self.document_id},
                timeout=60
            )
            end_time = time.time()
            
            if response.status_code == 200:
                result = response.json()
                grammar_results = result.get('grammar_results', {})
                
                metrics = {
                    "total_errors": grammar_results.get('total_errors', 0),
                    "method": grammar_results.get('method', 'unknown'),
                    "processing_time": end_time - start_time,
                    "errors_found": len(grammar_results.get('errors', []))
                }
                
                # –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
                errors = grammar_results.get('errors', [])
                error_types = {}
                for error in errors:
                    error_type = error.get('type', 'unknown')
                    error_types[error_type] = error_types.get(error_type, 0) + 1
                
                # –ü—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫
                sample_errors = errors[:5] if errors else []
                
                self.log_test(
                    "Grammar Check Analysis",
                    "PASS",
                    f"–ù–∞–π–¥–µ–Ω–æ {metrics['total_errors']} –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫",
                    error=None,
                    metrics=metrics
                )
            else:
                self.log_test("Grammar Check Analysis", "FAIL", error=f"HTTP {response.status_code}: {response.text}")
        except Exception as e:
            self.log_test("Grammar Check Analysis", "FAIL", error=str(e))
    
    def test_comprehensive_check_analysis(self):
        """–¢–µ—Å—Ç 5: –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print("üîç –¢–µ—Å—Ç 5: –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
        print("="*60)
        
        if not self.document_id:
            self.log_test("Comprehensive Check Analysis", "SKIP", "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return
        
        try:
            start_time = time.time()
            response = requests.post(
                f"{self.outgoing_control_url}/comprehensive-check",
                json={"document_id": self.document_id},
                timeout=120
            )
            end_time = time.time()
            
            if response.status_code == 200:
                result = response.json()
                comprehensive_results = result.get('comprehensive_results', {})
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏
                spelling = comprehensive_results.get('spelling', {})
                grammar = comprehensive_results.get('grammar', {})
                
                metrics = {
                    "total_errors": comprehensive_results.get('total_errors', 0),
                    "spelling_errors": spelling.get('misspelled_count', 0),
                    "grammar_errors": grammar.get('total_errors', 0),
                    "overall_accuracy": comprehensive_results.get('overall_accuracy', 0),
                    "processing_time": end_time - start_time,
                    "spelling_method": spelling.get('method', 'unknown'),
                    "grammar_method": grammar.get('method', 'unknown')
                }
                
                # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
                all_errors = comprehensive_results.get('all_errors', [])
                error_types = {}
                for error in all_errors:
                    error_type = error.get('type', 'unknown')
                    error_types[error_type] = error_types.get(error_type, 0) + 1
                
                # –ü—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫
                sample_errors = all_errors[:10] if all_errors else []
                
                self.log_test(
                    "Comprehensive Check Analysis",
                    "PASS",
                    f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {metrics['total_errors']} (–æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è: {metrics['spelling_errors']}, –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞: {metrics['grammar_errors']})",
                    error=None,
                    metrics=metrics
                )
            else:
                self.log_test("Comprehensive Check Analysis", "FAIL", error=f"HTTP {response.status_code}: {response.text}")
        except Exception as e:
            self.log_test("Comprehensive Check Analysis", "FAIL", error=str(e))
    
    def test_llm_processing(self):
        """–¢–µ—Å—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ LLM"""
        print("üîç –¢–µ—Å—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ LLM")
        print("="*60)
        
        if not self.document_id:
            self.log_test("LLM Processing", "SKIP", "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return
        
        try:
            start_time = time.time()
            response = requests.post(
                f"{self.outgoing_control_url}/expert-analysis",
                json={"document_id": self.document_id},
                timeout=120
            )
            end_time = time.time()
            
            if response.status_code == 200:
                result = response.json()
                
                metrics = {
                    "status": result.get('status'),
                    "processing_time": end_time - start_time,
                    "has_analysis": bool(result.get('expert_analysis'))
                }
                
                self.log_test(
                    "LLM Processing",
                    "PASS",
                    f"–°—Ç–∞—Ç—É—Å: {metrics['status']}, –í—Ä–µ–º—è: {metrics['processing_time']:.2f}—Å",
                    metrics=metrics
                )
            else:
                self.log_test("LLM Processing", "FAIL", error=f"HTTP {response.status_code}: {response.text}")
        except Exception as e:
            self.log_test("LLM Processing", "FAIL", error=str(e))
    
    def test_report_generation(self):
        """–¢–µ—Å—Ç 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        print("üîç –¢–µ—Å—Ç 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
        print("="*60)
        
        if not self.document_id:
            self.log_test("Report Generation", "SKIP", "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return
        
        try:
            start_time = time.time()
            response = requests.get(
                f"{self.outgoing_control_url}/report/{self.document_id}",
                timeout=60
            )
            end_time = time.time()
            
            if response.status_code == 200:
                result = response.json()
                
                metrics = {
                    "status": result.get('status'),
                    "verdict": result.get('verdict', 'N/A'),
                    "processing_time": end_time - start_time,
                    "has_report": bool(result.get('report'))
                }
                
                self.log_test(
                    "Report Generation",
                    "PASS",
                    f"–°—Ç–∞—Ç—É—Å: {metrics['status']}, –í–µ—Ä–¥–∏–∫—Ç: {metrics['verdict']}",
                    metrics=metrics
                )
            else:
                self.log_test("Report Generation", "FAIL", error=f"HTTP {response.status_code}: {response.text}")
        except Exception as e:
            self.log_test("Report Generation", "FAIL", error=str(e))
    
    def test_performance_benchmark(self):
        """–¢–µ—Å—Ç 8: –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("üîç –¢–µ—Å—Ç 8: –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("="*60)
        
        test_texts = [
            "–≠—Ç–æ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –æ—à–∏–±–∫–∞–º–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏",
            "—Å–∞–∞ —Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–∏—Å—å–º–æ–º –∑–∞–∫–∞–∑—á–∏–∫–∞",
            "—Ç–µ—Ö–Ω–∏–∫–æ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–∏ –¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∞ –±—ä–µ–∫—Ç—É",
            "–Ω–µ –ø–æ–ª—É—á–µ–Ω —ã –ø–∞–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç",
            "—É—Ç–∞—á–Ω–∏—Ç—å –ø–∞—Ä—è–¥–æ–∫ —Ä –∏–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –û–ü–û"
        ]
        
        performance_results = []
        
        for i, text in enumerate(test_texts):
            try:
                start_time = time.time()
                response = requests.post(
                    f"{self.spellchecker_url}/comprehensive-check",
                    json={"text": text, "language": "ru"},
                    timeout=30
                )
                end_time = time.time()
                
                if response.status_code == 200:
                    result = response.json()
                    comprehensive = result.get('comprehensive', {})
                    
                    performance_results.append({
                        "text_length": len(text),
                        "processing_time": end_time - start_time,
                        "total_errors": comprehensive.get('total_errors', 0),
                        "accuracy": comprehensive.get('overall_accuracy', 0)
                    })
                else:
                    performance_results.append({
                        "text_length": len(text),
                        "processing_time": -1,
                        "total_errors": -1,
                        "accuracy": -1
                    })
            except Exception as e:
                performance_results.append({
                    "text_length": len(text),
                    "processing_time": -1,
                    "total_errors": -1,
                    "accuracy": -1
                })
        
        # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        valid_results = [r for r in performance_results if r['processing_time'] > 0]
        if valid_results:
            avg_processing_time = sum(r['processing_time'] for r in valid_results) / len(valid_results)
            avg_accuracy = sum(r['accuracy'] for r in valid_results) / len(valid_results)
            total_errors = sum(r['total_errors'] for r in valid_results)
            
            metrics = {
                "avg_processing_time": avg_processing_time,
                "avg_accuracy": avg_accuracy,
                "total_errors_found": total_errors,
                "tests_completed": len(valid_results),
                "tests_failed": len(performance_results) - len(valid_results)
            }
            
            self.log_test(
                "Performance Benchmark",
                "PASS",
                f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_processing_time:.3f}—Å, –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {avg_accuracy:.2f}%",
                metrics=metrics
            )
        else:
            self.log_test("Performance Benchmark", "FAIL", error="–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
    
    def test_error_detection_accuracy(self):
        """–¢–µ—Å—Ç 9: –¢–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫"""
        print("üîç –¢–µ—Å—Ç 9: –¢–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫")
        print("="*60)
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        known_errors = [
            ("—Å–∞–∞ —Ç–≤–µ—Ç—Å—Ç–≤–∏–∏", "–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏"),
            ("–æ—Ü–µ–Ω–∫ –∞", "–æ—Ü–µ–Ω–∫–∞"),
            ("–ø—Ä–∏ –¥–ª–æ–∂–µ–Ω–∏–µ", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),
            ("–∞ –±—ä–µ–∫—Ç—É", "–æ–±—ä–µ–∫—Ç—É"),
            ("–Ω–µ –ø–æ–ª—É—á–µ–Ω —ã", "–Ω–µ –ø–æ–ª—É—á–µ–Ω—ã"),
            ("–ø–∞–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"),
            ("–≥–∞—Ä–∞–Ω—Ç–∏ –∏", "–≥–∞—Ä–∞–Ω—Ç–∏–∏"),
            ("–ø—Ä–µ –æ—Ä–∏—Ç–µ—Ç–Ω–æ —Å—Ç–∏", "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏"),
            ("—Å–∞ –≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ", "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ"),
            ("–Ω–µ–ø–æ–ª—É—á–µ–Ω –∞", "–Ω–µ –ø–æ–ª—É—á–µ–Ω"),
            ("—Ç–≤–µ—Ç", "–æ—Ç–≤–µ—Ç"),
            ("–ø—Ä–µ–¥–ø—Ä–∞ –µ–∫—Ç–Ω–æ–π", "–ø—Ä–µ–¥–ø—Ä–æ–µ–∫—Ç–Ω–æ–π"),
            ("—Å–∞ –≤–µ—â–∞–Ω–∏–π", "—Å–æ–≤–µ—â–∞–Ω–∏–π"),
            ("–∏–Ω—Ñ–æ —Ä–º–∞—Ü–∏—è", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
            ("—Ä–∞–Ω–Ω–µ–µ", "—Ä–∞–Ω–µ–µ"),
            ("–ø—Ä –∞–µ–∫—Ç—É", "–ø—Ä–æ–µ–∫—Ç—É"),
            ("–ø—Ä–∞ —à—É", "–ø—Ä–æ—à—É"),
            ("–ø–æ—Ç—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
            ("–≥–∞ —Ç–æ–≤–Ω–æ—Å—Ç—å", "–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å"),
            ("–¥–∞–≥–∞–≤–æ—Ä–∞", "–¥–æ–≥–æ–≤–æ—Ä–∞"),
            ("—Ä–∞—Å–º–æ—Ç—Ä–µ—Ç—å", "—Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å"),
            ("–æ–±—å –µ–º", "–æ–±—ä–µ–º"),
            ("—Å—Ç–∞–¥–∏–π–Ω –æ—Å—Ç—å", "—Å—Ç–∞–¥–∏–π–Ω–æ—Å—Ç—å"),
            ("–ø—Ä–∞–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"),
            ("–ø–∞ —Å–∫–æ–ª—å–∫—É", "–ø–æ—Å–∫–æ–ª—å–∫—É"),
            ("—É—Ç–∞—á–Ω–∏—Ç—å", "—É—Ç–æ—á–Ω–∏—Ç—å"),
            ("–ø–∞—Ä—è–¥–æ–∫", "–ø–æ—Ä—è–¥–æ–∫"),
            ("—Ä –∏–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"),
            ("–ü—Ä –∞–µ–∫—Ç", "–ü—Ä–æ–µ–∫—Ç")
        ]
        
        detection_results = []
        
        for error_text, correct_text in known_errors:
            try:
                response = requests.post(
                    f"{self.spellchecker_url}/comprehensive-check",
                    json={"text": error_text, "language": "ru"},
                    timeout=30
                )
                
                if response.status_code == 200:
                    result = response.json()
                    comprehensive = result.get('comprehensive', {})
                    all_errors = comprehensive.get('all_errors', [])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞
                    error_found = len(all_errors) > 0
                    detection_results.append({
                        "error_text": error_text,
                        "correct_text": correct_text,
                        "detected": error_found,
                        "errors_found": len(all_errors)
                    })
                else:
                    detection_results.append({
                        "error_text": error_text,
                        "correct_text": correct_text,
                        "detected": False,
                        "errors_found": 0
                    })
            except Exception as e:
                detection_results.append({
                    "error_text": error_text,
                    "correct_text": correct_text,
                    "detected": False,
                    "errors_found": 0
                })
        
        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        total_errors = len(detection_results)
        detected_errors = sum(1 for r in detection_results if r['detected'])
        detection_rate = (detected_errors / total_errors * 100) if total_errors > 0 else 0
        
        metrics = {
            "total_known_errors": total_errors,
            "detected_errors": detected_errors,
            "detection_rate": detection_rate,
            "missed_errors": total_errors - detected_errors
        }
        
        # –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        missed_errors = [r for r in detection_results if not r['detected']]
        
        self.log_test(
            "Error Detection Accuracy",
            "PASS" if detection_rate >= 70 else "WARN",
            f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {detected_errors} –∏–∑ {total_errors} –æ—à–∏–±–æ–∫ ({detection_rate:.1f}%)",
            error=None,
            metrics=metrics
        )
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û–í–¢–û–†–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*80)
        
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r['status'] == 'PASS'])
        failed_tests = len([r for r in self.test_results if r['status'] == 'FAIL'])
        skipped_tests = len([r for r in self.test_results if r['status'] == 'SKIP'])
        warning_tests = len([r for r in self.test_results if r['status'] == 'WARN'])
        
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warning_tests}")
        print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_tests}")
        print(f"   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests*100):.1f}%")
        
        print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {datetime.now() - self.start_time}")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
        print(f"\nüîç –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
        
        # –ù–∞–π–¥–µ–º —Ç–µ—Å—Ç—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        for result in self.test_results:
            if result.get('metrics'):
                metrics = result['metrics']
                test_name = result['test_name']
                
                if 'accuracy' in metrics:
                    print(f"   {test_name}: –¢–æ—á–Ω–æ—Å—Ç—å {metrics['accuracy']:.2f}%")
                if 'total_errors' in metrics:
                    print(f"   {test_name}: –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫ {metrics['total_errors']}")
                if 'processing_time' in metrics:
                    print(f"   {test_name}: –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ {metrics['processing_time']:.3f}—Å")
                if 'detection_rate' in metrics:
                    print(f"   {test_name}: –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è {metrics['detection_rate']:.1f}%")
        
        print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for result in self.test_results:
            status_icon = "‚úÖ" if result['status'] == "PASS" else "‚ùå" if result['status'] == "FAIL" else "‚ö†Ô∏è" if result['status'] == "WARN" else "‚è≠Ô∏è"
            print(f"   {status_icon} {result['test_name']}: {result['status']}")
            if result.get('details'):
                print(f"      –î–µ—Ç–∞–ª–∏: {result['details']}")
            if result.get('error'):
                print(f"      –û—à–∏–±–∫–∞: {result['error']}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
        report_data = {
            "test_summary": {
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "failed_tests": failed_tests,
                "skipped_tests": skipped_tests,
                "warning_tests": warning_tests,
                "success_rate": passed_tests/total_tests*100,
                "execution_time": str(datetime.now() - self.start_time),
                "test_document": self.test_document_path,
                "document_id": self.document_id
            },
            "test_results": self.test_results,
            "timestamp": datetime.now().isoformat()
        }
        
        report_file = f"outgoing_control_final_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")
        
        return report_data
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –í–´–•–û–î–ù–û–ì–û –ö–û–ù–¢–†–û–õ–Ø –ö–û–†–†–ï–°–ü–û–ù–î–ï–ù–¶–ò–ò")
        print("="*80)
        print(f"üìÑ –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {self.test_document_path}")
        print(f"‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        print("="*80)
        print()
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        self.test_system_health()
        
        # –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if self.test_document_upload():
            # –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏
            self.test_spellcheck_analysis()
            
            # –¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
            self.test_grammar_check_analysis()
            
            # –¢–µ—Å—Ç 5: –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.test_comprehensive_check_analysis()
            
            # –¢–µ—Å—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ LLM
            self.test_llm_processing()
            
            # –¢–µ—Å—Ç 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            self.test_report_generation()
        
        # –¢–µ—Å—Ç 8: –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.test_performance_benchmark()
        
        # –¢–µ—Å—Ç 9: –¢–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
        self.test_error_detection_accuracy()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        return self.generate_final_report()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = FinalOutgoingControlTester()
    report = tester.run_all_tests()
    return report


if __name__ == "__main__":
    main()
