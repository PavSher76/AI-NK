#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–Ω—É–ª—è—Ä–Ω–æ–≥–æ —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'rag_service'))

from services.ollama_rag_service import OllamaRAGService
from config.chunking_config import get_chunking_config, validate_chunking_config

def test_chunking_config():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = get_chunking_config('default')
    print(f"‚úÖ –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config['target_tokens']} —Ç–æ–∫–µ–Ω–æ–≤, –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ {config['overlap_ratio']}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ì–û–°–¢
    gost_config = get_chunking_config('gost')
    print(f"‚úÖ –ì–û–°–¢ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {gost_config['target_tokens']} —Ç–æ–∫–µ–Ω–æ–≤, –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ {gost_config['overlap_ratio']}")
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {validate_chunking_config(config)}")
    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ì–û–°–¢ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {validate_chunking_config(gost_config)}")
    
    return True

def test_granular_chunking():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω—É–ª—è—Ä–Ω–æ–≥–æ —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω—É–ª—è—Ä–Ω–æ–≥–æ —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä RAG —Å–µ—Ä–≤–∏—Å–∞
        rag_service = OllamaRAGService()
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        test_text = """
        –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 3
        
        –°–ü 22.13330.2016 "–û—Å–Ω–æ–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏–π –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π"
        
        –ì–ª–∞–≤–∞ 1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è
        
        1.1. –ù–∞—Å—Ç–æ—è—â–∏–π —Å–≤–æ–¥ –ø—Ä–∞–≤–∏–ª —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ—Å–Ω–æ–≤–∞–Ω–∏–π –∑–¥–∞–Ω–∏–π –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π.
        
        1.2. –û—Å–Ω–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å –∑–¥–∞–Ω–∏–π –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π.
        
        1.3. –ü—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω–∏–π —Å–ª–µ–¥—É–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å:
        - –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ-–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è;
        - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∑–¥–∞–Ω–∏–π;
        - —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.
        
        –ì–ª–∞–≤–∞ 2. –ò–Ω–∂–µ–Ω–µ—Ä–Ω–æ-–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–∑—ã—Å–∫–∞–Ω–∏—è
        
        2.1. –ò–Ω–∂–µ–Ω–µ—Ä–Ω–æ-–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–∑—ã—Å–∫–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –°–ü 47.13330.
        
        2.2. –û–±—ä–µ–º –∏–∑—ã—Å–∫–∞–Ω–∏–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ-–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π.
        
        –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 –∏–∑ 3
        
        –ì–ª–∞–≤–∞ 3. –†–∞—Å—á–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω–∏–π
        
        3.1. –†–∞—Å—á–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ –ø—Ä–µ–¥–µ–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏—è–º.
        
        3.2. –ü—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è:
        - –Ω–∞–≥—Ä—É–∑–∫–∏ –æ—Ç –∑–¥–∞–Ω–∏–π –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π;
        - —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å –≥—Ä—É–Ω—Ç–æ–≤;
        - –≥–∏–¥—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è.
        
        3.3. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–æ –Ω–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –Ω–µ –º–µ–Ω–µ–µ 1,2.
        
        –ì–ª–∞–≤–∞ 4. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
        
        4.1. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å:
        - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å –æ—Å–∞–¥–æ–∫;
        - —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –æ—Ç–∫–æ—Å–æ–≤;
        - –∑–∞—â–∏—Ç—É –æ—Ç –ø–æ–¥—Ç–æ–ø–ª–µ–Ω–∏—è.
        
        –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3 –∏–∑ 3
        
        4.2. –ü—Ä–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–≤ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å:
        - –≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—é;
        - –¥—Ä–µ–Ω–∞–∂;
        - –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—é –ø–æ–¥–ø–æ–ª–∏–π.
        
        4.3. –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏ –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç–∏.
        """
        
        print(f"üìÑ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {len(test_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤
        chunks = rag_service._split_page_into_chunks(test_text, 1000)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤:")
        
        for i, chunk in enumerate(chunks):
            estimated_tokens = rag_service._estimate_tokens(chunk, get_chunking_config('default'))
            print(f"  –ß–∞–Ω–∫ {i+1}: {len(chunk)} —Å–∏–º–≤–æ–ª–æ–≤, ~{estimated_tokens} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"    –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {chunk[:100]}...")
            print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_sentence_splitting():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüî§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        rag_service = OllamaRAGService()
        config = get_chunking_config('default')
        
        test_text = "–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –≠—Ç–æ –≤—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º 1.2. –¢—Ä–µ—Ç—å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞. –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."
        
        sentences = rag_service._split_into_sentences(test_text, config)
        
        print(f"‚úÖ –†–∞–∑–±–∏—Ç–æ –Ω–∞ {len(sentences)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:")
        for i, sentence in enumerate(sentences):
            print(f"  {i+1}. {sentence}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–∏ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False

def test_token_estimation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
    print("\nüî¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤...")
    
    try:
        rag_service = OllamaRAGService()
        config = get_chunking_config('default')
        
        test_texts = [
            "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç",
            "–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤.",
            "–î–ª–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ—Ü–µ–Ω–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
        ]
        
        for text in test_texts:
            tokens = rag_service._estimate_tokens(text, config)
            print(f"  '{text[:30]}...': ~{tokens} —Ç–æ–∫–µ–Ω–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω—É–ª—è—Ä–Ω–æ–≥–æ —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è", test_chunking_config),
        ("–†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", test_sentence_splitting),
        ("–û—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤", test_token_estimation),
        ("–ì—Ä–∞–Ω—É–ª—è—Ä–Ω–æ–µ —á–∞–Ω–∫–æ–≤–∞–Ω–∏–µ", test_granular_chunking),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return 1

if __name__ == "__main__":
    sys.exit(main())
