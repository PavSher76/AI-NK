#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Keycloak –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
"""

import requests
import json
import jwt
from datetime import datetime

def test_keycloak_authentication():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Keycloak"""
    
    print("üîë [TEST] Keycloak Authentication Test")
    print("=" * 50)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç Keycloak
    print("1. –ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –æ—Ç Keycloak...")
    try:
        token_response = requests.post(
            "https://localhost:8081/realms/ai-nk/protocol/openid-connect/token",
            data={
                "grant_type": "password",
                "client_id": "ai-nk-frontend",
                "username": "admin",
                "password": "admin"
            },
            verify=False,
            timeout=10
        )
        
        if token_response.status_code == 200:
            token_data = token_response.json()
            access_token = token_data["access_token"]
            print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"   –¢–∏–ø: {token_data['token_type']}")
            print(f"   –í—Ä–µ–º—è –∂–∏–∑–Ω–∏: {token_data['expires_in']} —Å–µ–∫—É–Ω–¥")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {token_response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {token_response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Keycloak: {e}")
        return False
    
    # 2. –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    print("\n2. –ê–Ω–∞–ª–∏–∑ JWT —Ç–æ–∫–µ–Ω–∞...")
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
        payload = jwt.decode(access_token, options={"verify_signature": False})
        
        print(f"‚úÖ JWT —Ç–æ–∫–µ–Ω –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payload.get('preferred_username')}")
        print(f"   Email: {payload.get('email')}")
        print(f"   –†–æ–ª–∏: {payload.get('realm_access', {}).get('roles', [])}")
        print(f"   Issuer: {payload.get('iss')}")
        print(f"   Audience: {payload.get('azp')}")
        print(f"   –ò—Å—Ç–µ–∫–∞–µ—Ç: {datetime.fromtimestamp(payload.get('exp', 0))}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT: {e}")
        return False
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ API —á–µ—Ä–µ–∑ Gateway
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ API —á–µ—Ä–µ–∑ Gateway...")
    try:
        api_response = requests.get(
            "https://localhost/api/documents",
            headers={
                "Authorization": f"Bearer {access_token}"
            },
            verify=False,
            timeout=10
        )
        
        if api_response.status_code == 200:
            documents = api_response.json()
            print(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ JWT —Ç–æ–∫–µ–Ω")
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents.get('documents', []))}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
            for doc in documents.get('documents', [])[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   - {doc.get('original_filename', 'Unknown')} (ID: {doc.get('id')})")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API: {api_response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {api_response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Å JWT —Ç–æ–∫–µ–Ω–æ–º
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ document-parser
        db_response = requests.get(
            "https://localhost/api/checkable-documents",
            headers={
                "Authorization": f"Bearer {access_token}"
            },
            verify=False,
            timeout=10
        )
        
        if db_response.status_code == 200:
            checkable_docs = db_response.json()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —á–µ—Ä–µ–∑ JWT —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(checkable_docs.get('documents', []))}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {db_response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {db_response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç Keycloak –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    return True

def test_user_roles():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    print("\nüîë [TEST] User Roles Test")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é user
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é 'user'...")
    try:
        user_token_response = requests.post(
            "https://localhost:8081/realms/ai-nk/protocol/openid-connect/token",
            data={
                "grant_type": "password",
                "client_id": "ai-nk-frontend",
                "username": "user",
                "password": "password123"
            },
            verify=False,
            timeout=10
        )
        
        if user_token_response.status_code == 200:
            user_token_data = user_token_response.json()
            user_access_token = user_token_data["access_token"]
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            user_payload = jwt.decode(user_access_token, options={"verify_signature": False})
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'user' –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            print(f"   –†–æ–ª–∏: {user_payload.get('realm_access', {}).get('roles', [])}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ API
            user_api_response = requests.get(
                "https://localhost/api/documents",
                headers={
                    "Authorization": f"Bearer {user_access_token}"
                },
                verify=False,
                timeout=10
            )
            
            if user_api_response.status_code == 200:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'user' –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ API")
            else:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'user' –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ API: {user_api_response.status_code}")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'user': {user_token_response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π: {e}")

if __name__ == "__main__":
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    success = test_keycloak_authentication()
    
    if success:
        # –¢–µ—Å—Ç —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_user_roles()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
