#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã RAG —Å–µ—Ä–≤–∏—Å–∞
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'rag_service'))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π...")
    
    try:
        from rag_service.services.embedding_service import OllamaEmbeddingService
        print("‚úÖ OllamaEmbeddingService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ OllamaEmbeddingService: {e}")
        return False
    
    try:
        from rag_service.services.database_manager import DatabaseManager
        print("‚úÖ DatabaseManager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ DatabaseManager: {e}")
        return False
    
    try:
        from rag_service.services.document_parser import DocumentParser
        print("‚úÖ DocumentParser –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ DocumentParser: {e}")
        return False
    
    try:
        from rag_service.services.metadata_extractor import MetadataExtractor
        print("‚úÖ MetadataExtractor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ MetadataExtractor: {e}")
        return False
    
    try:
        from rag_service.services.document_chunker import DocumentChunker
        print("‚úÖ DocumentChunker –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ DocumentChunker: {e}")
        return False
    
    try:
        from rag_service.services.ollama_rag_service_refactored import OllamaRAGService
        print("‚úÖ OllamaRAGService (—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π) –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ OllamaRAGService: {e}")
        return False
    
    return True

def test_module_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –º–æ–¥—É–ª–µ–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –º–æ–¥—É–ª–µ–π...")
    
    try:
        from rag_service.services.metadata_extractor import MetadataExtractor
        metadata_extractor = MetadataExtractor()
        print("‚úÖ MetadataExtractor —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        metadata = metadata_extractor.extract_document_metadata("–°–ü 22.13330.2016.pdf", 1)
        print(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã: {metadata['doc_type']} - {metadata['doc_number']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MetadataExtractor: {e}")
        return False
    
    try:
        from rag_service.services.document_parser import DocumentParser
        document_parser = DocumentParser()
        print("‚úÖ DocumentParser —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        code = document_parser.extract_document_code("–°–ü 22.13330.2016.pdf")
        print(f"‚úÖ –ö–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω: {code}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DocumentParser: {e}")
        return False
    
    try:
        from rag_service.services.document_chunker import DocumentChunker
        document_chunker = DocumentChunker()
        print("‚úÖ DocumentChunker —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DocumentChunker: {e}")
        return False
    
    return True

def test_main_service():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (–±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î)"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        from rag_service.services.ollama_rag_service_refactored import OllamaRAGService
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å (–º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ë–î, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
        try:
            rag_service = OllamaRAGService()
            print("‚úÖ OllamaRAGService —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
            assert hasattr(rag_service, 'embedding_service')
            assert hasattr(rag_service, 'db_manager')
            assert hasattr(rag_service, 'document_parser')
            assert hasattr(rag_service, 'metadata_extractor')
            assert hasattr(rag_service, 'document_chunker')
            assert hasattr(rag_service, 'methods')
            
            print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            if "connection" in str(e).lower() or "database" in str(e).lower():
                print("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞)")
                print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è OllamaRAGService: {e}")
                return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ OllamaRAGService: {e}")
        return False
    
    return True

def test_api_compatibility():
    """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ API"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ API...")
    
    try:
        from rag_service.services.ollama_rag_service_refactored import OllamaRAGService
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        methods_to_check = [
            'get_structured_context',
            'extract_document_code',
            'index_document_chunks',
            'hybrid_search',
            'get_ntd_consultation',
            'get_documents',
            'get_document_chunks',
            'delete_document_indexes',
            'delete_document',
            'get_stats',
            'save_document_to_db',
            'update_document_status',
            'process_document_async',
            'index_chunks_async',
            'clear_collection',
            'get_hybrid_search_stats'
        ]
        
        for method_name in methods_to_check:
            if hasattr(OllamaRAGService, method_name):
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method_name} –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ùå –ú–µ—Ç–æ–¥ {method_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
        
        print("‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã API –¥–æ—Å—Ç—É–ø–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã RAG —Å–µ—Ä–≤–∏—Å–∞")
    print("=" * 60)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π", test_imports),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤", test_module_creation),
        ("–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å", test_main_service),
        ("–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å API", test_api_compatibility)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 40)
        
        try:
            if test_func():
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return 1

if __name__ == "__main__":
    exit(main())
