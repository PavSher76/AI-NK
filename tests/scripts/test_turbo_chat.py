#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–∞ —Å GPT-4o-mini
"""

import requests
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
RAG_SERVICE_URL = "http://localhost:8003"
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")

def test_turbo_chat():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –≤ —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–µ"""
    
    if not OPENAI_API_KEY:
        print("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export OPENAI_API_KEY=your_key_here")
        return False
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞...")
    print(f"üîë API –∫–ª—é—á: {OPENAI_API_KEY[:10]}...")
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    test_message = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –†–∞—Å—Å–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ –æ –Ω–æ—Ä–º–∞—Ö –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
    
    payload = {
        "message": test_message,
        "model": "gpt-oss:latest",
        "turbo_mode": True,
        "reasoning_depth": "balanced"
    }
    
    try:
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: {test_message}")
        
        response = requests.post(
            f"{RAG_SERVICE_URL}/chat",
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:")
            print(f"üìù –û—Ç–≤–µ—Ç: {result.get('response', '')[:200]}...")
            print(f"ü§ñ –ú–æ–¥–µ–ª—å: {result.get('model', 'unknown')}")
            print(f"‚ö° –¢—É—Ä–±–æ —Ä–µ–∂–∏–º: {result.get('turbo_mode', False)}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.get('generation_time_ms', 0)}ms")
            print(f"üî¢ –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {result.get('tokens_used', 0)}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_regular_chat():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞...")
    
    test_message = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
    
    payload = {
        "message": test_message,
        "model": "gpt-oss:latest",
        "turbo_mode": False,
        "reasoning_depth": "balanced"
    }
    
    try:
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: {test_message}")
        
        response = requests.post(
            f"{RAG_SERVICE_URL}/chat",
            json=payload,
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:")
            print(f"üìù –û—Ç–≤–µ—Ç: {result.get('response', '')[:200]}...")
            print(f"ü§ñ –ú–æ–¥–µ–ª—å: {result.get('model', 'unknown')}")
            print(f"‚ö° –¢—É—Ä–±–æ —Ä–µ–∂–∏–º: {result.get('turbo_mode', False)}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.get('generation_time_ms', 0)}ms")
            print(f"üî¢ –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {result.get('tokens_used', 0)}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –ò–ò")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RAG-—Å–µ—Ä–≤–∏—Å–∞
    try:
        health_response = requests.get(f"{RAG_SERVICE_URL}/health", timeout=5)
        if health_response.status_code == 200:
            print("‚úÖ RAG-—Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå RAG-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            exit(1)
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RAG-—Å–µ—Ä–≤–∏—Å—É: {e}")
        exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º
    turbo_success = test_turbo_chat()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
    regular_success = test_regular_chat()
    
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚ö° –¢—É—Ä–±–æ —Ä–µ–∂–∏–º: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if turbo_success else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"üîÑ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if regular_success else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    if turbo_success and regular_success:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")







