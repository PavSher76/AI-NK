#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è "–í—ã—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏–∏"
–í–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF/DOCX, –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
"""

import asyncio
import aiohttp
import json
import time
import os
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class OutgoingControlTester:
    def __init__(self):
        self.base_url = 'http://localhost:8006'  # Outgoing Control Service
        self.spellchecker_url = 'http://localhost:8007'  # Spellchecker Service
        # –ü—É—Ç–∏ –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–∞–ø–∫–∏ tests
        base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        self.test_documents = {
            'pdf': os.path.join(base_dir, 'data', 'TestDocs', 'for_check', '–°–ó_–¢–ï–°–¢.pdf'),
            'docx': os.path.join(base_dir, 'data', 'TestDocs', 'for_check', '–°–ó_–¢–ï–°–¢.docx'),
            'gost_pdf': os.path.join(base_dir, 'data', 'TestDocs', 'for_check', '3401-21089-–†–î-01-220-221-–ê–†_4_0_RU_IFC (1).pdf')
        }
        self.test_results = {}

    async def test_service_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.base_url}/health", ssl=False, timeout=10) as response:
                    if response.status == 200:
                        logger.info("‚úÖ Outgoing Control Service –∑–¥–æ—Ä–æ–≤")
                        return True
                    else:
                        logger.error(f"‚ùå Outgoing Control Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Outgoing Control Service: {e}")
            return False

    async def test_pdf_processing(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF...")
        
        if not os.path.exists(self.test_documents['pdf']):
            logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        try:
            async with aiohttp.ClientSession() as session:
                # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF
                with open(self.test_documents['pdf'], 'rb') as f:
                    data = aiohttp.FormData()
                    data.add_field('file', f, filename='test_document.pdf')
                    
                    async with session.post(
                        f"{self.base_url}/process",
                        data=data,
                        ssl=False,
                        timeout=120
                    ) as response:
                        if response.status == 200:
                            result = await response.json()
                            logger.info("‚úÖ PDF –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                            if 'text' in result and len(result['text']) > 100:
                                logger.info("‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ")
                                return True
                            else:
                                logger.warning("‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∏–∑–∫–æ–µ")
                                return False
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {response.status}")
                            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {e}")
            return False

    async def test_docx_processing(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ DOCX –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ DOCX...")
        
        if not os.path.exists(self.test_documents['docx']):
            logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π DOCX —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        try:
            async with aiohttp.ClientSession() as session:
                # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ DOCX
                with open(self.test_documents['docx'], 'rb') as f:
                    data = aiohttp.FormData()
                    data.add_field('file', f, filename='test_document.docx')
                    
                    async with session.post(
                        f"{self.base_url}/process",
                        data=data,
                        ssl=False,
                        timeout=120
                    ) as response:
                        if response.status == 200:
                            result = await response.json()
                            logger.info("‚úÖ DOCX –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                            if 'text' in result and len(result['text']) > 100:
                                logger.info("‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ")
                                return True
                            else:
                                logger.warning("‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∏–∑–∫–æ–µ")
                                return False
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ DOCX: {response.status}")
                            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ DOCX: {e}")
            return False

    async def test_spellcheck_functionality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏...")
        
        try:
            async with aiohttp.ClientSession() as session:
                # –¢–µ—Å—Ç —Å —Ç–µ–∫—Å—Ç–æ–º —Å –æ—à–∏–±–∫–∞–º–∏
                test_text = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏."
                
                payload = {
                    "text": test_text,
                    "language": "ru"
                }
                
                async with session.post(
                    f"{self.spellchecker_url}/check",
                    json=payload,
                    ssl=False,
                    timeout=30
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
                        if 'errors' in result:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result['errors'])} –æ—à–∏–±–æ–∫")
                            return True
                        else:
                            logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
            return False

    async def test_document_analysis(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    "document_id": "test_doc",
                    "analysis_type": "full",
                    "include_spellcheck": True,
                    "include_metadata": True
                }
                
                async with session.post(
                    f"{self.base_url}/analyze",
                    json=payload,
                    ssl=False,
                    timeout=60
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
                        required_fields = ['text', 'metadata', 'spellcheck_results']
                        if all(field in result for field in required_fields):
                            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è")
                            return True
                        else:
                            logger.warning("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–µ–ø–æ–ª–Ω—ã–π")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return False

    async def test_report_generation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞...")
        
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    "document_id": "test_doc",
                    "report_type": "outgoing_control",
                    "include_analysis": True,
                    "include_recommendations": True
                }
                
                async with session.post(
                    f"{self.base_url}/generate_report",
                    json=payload,
                    ssl=False,
                    timeout=120
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç—á–µ—Ç–∞
                        if 'report' in result and len(result['report']) > 500:
                            logger.info("‚úÖ –û—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
                            return True
                        else:
                            logger.warning("‚ö†Ô∏è –û—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return False

    async def test_batch_processing(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        
        try:
            async with aiohttp.ClientSession() as session:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                documents = []
                for doc_type, doc_path in self.test_documents.items():
                    if os.path.exists(doc_path):
                        with open(doc_path, 'rb') as f:
                            documents.append({
                                'filename': f'test_{doc_type}.{doc_type}',
                                'content': f.read()
                            })
                
                if not documents:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    return False
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                payload = {
                    "documents": documents,
                    "processing_options": {
                        "extract_text": True,
                        "spellcheck": True,
                        "analyze": True
                    }
                }
                
                async with session.post(
                    f"{self.base_url}/batch_process",
                    json=payload,
                    ssl=False,
                    timeout=300
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        if 'results' in result and len(result['results']) > 0:
                            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(result['results'])} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                            return True
                        else:
                            logger.warning("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return False

    async def test_quality_control(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞...")
        
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    "document_id": "test_doc",
                    "quality_checks": [
                        "spellcheck",
                        "grammar_check",
                        "format_check",
                        "completeness_check"
                    ]
                }
                
                async with session.post(
                    f"{self.base_url}/quality_control",
                    json=payload,
                    ssl=False,
                    timeout=60
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info("‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
                        if 'quality_score' in result and result['quality_score'] > 0:
                            logger.info(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {result['quality_score']}")
                            return True
                        else:
                            logger.warning("‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
                            return False
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            return False

    async def test_error_handling(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        try:
            async with aiohttp.ClientSession() as session:
                # –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–∏–ø–æ–º —Ñ–∞–π–ª–∞
                payload = {
                    "document_id": "nonexistent",
                    "analysis_type": "full"
                }
                
                async with session.post(
                    f"{self.base_url}/analyze",
                    json=payload,
                    ssl=False,
                    timeout=10
                ) as response:
                    if response.status in [400, 404, 422]:
                        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        return True
                    else:
                        logger.warning("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è")
                        return False
        except Exception as e:
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ)")
            return True

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –º–æ–¥—É–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è '–í—ã—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏–∏'...")
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        self.test_results = {
            'service_health': await self.test_service_health(),
            'pdf_processing': await self.test_pdf_processing(),
            'docx_processing': await self.test_docx_processing(),
            'spellcheck_functionality': await self.test_spellcheck_functionality(),
            'document_analysis': await self.test_document_analysis(),
            'report_generation': await self.test_report_generation(),
            'batch_processing': await self.test_batch_processing(),
            'quality_control': await self.test_quality_control(),
            'error_handling': await self.test_error_handling()
        }
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() if result)
        success_rate = (passed_tests / total_tests) * 100
        
        end_time = time.time()
        duration = end_time - start_time
        
        logger.info(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        return self.test_results

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –º–æ–¥—É–ª—é"""
        report = {
            'module': '–í—ã—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏–∏',
            'timestamp': datetime.now().isoformat(),
            'test_results': self.test_results,
            'summary': {
                'total_tests': len(self.test_results),
                'passed_tests': sum(1 for result in self.test_results.values() if result),
                'success_rate': (sum(1 for result in self.test_results.values() if result) / len(self.test_results)) * 100
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        report_path = os.path.join(base_dir, 'reports', 'outgoing_control_test_report.json')
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        return report

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = OutgoingControlTester()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    results = await tester.run_all_tests()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    report = tester.generate_report()
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "="*60)
    print("üìä –û–¢–ß–ï–¢ –ü–û –ú–û–î–£–õ–Æ '–í–´–•–û–î–ù–û–ô –ö–û–ù–¢–†–û–õ–¨ –ö–û–†–†–ï–°–ü–û–ù–î–ï–ù–¶–ò–ò'")
    print("="*60)
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
    
    print(f"\nüéØ –£–°–ü–ï–®–ù–û–°–¢–¨: {report['summary']['success_rate']:.1f}%")
    print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: outgoing_control_test_report.json")

if __name__ == "__main__":
    asyncio.run(main())
