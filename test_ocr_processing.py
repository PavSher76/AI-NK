#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import sys
import os
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'utils'))

from utils.document_parser import UniversalDocumentParser
from utils.ocr_processor import OCRProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def test_ocr_processing(pdf_path: str):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        logger.info(f"üîç [TEST] –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏: {pdf_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(pdf_path):
            logger.error(f"‚ùå [TEST] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å OCR
        parser = UniversalDocumentParser(use_ocr=True)
        
        # –ü–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
        result = parser.parse_document(pdf_path)
        
        if result.get("success", False):
            logger.info("‚úÖ [TEST] –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —É—Å–ø–µ—à–µ–Ω")
            
            # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            print(f"\nüìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ:")
            print(f"   –§–∞–π–ª: {result.get('file_name', 'N/A')}")
            print(f"   –†–∞–∑–º–µ—Ä: {result.get('file_size', 0)} –±–∞–π—Ç")
            print(f"   –°—Ç—Ä–∞–Ω–∏—Ü: {result.get('total_pages', 0)}")
            print(f"   –ú–µ—Ç–æ–¥: {result.get('method', 'N/A')}")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—Å—Ç–µ
            text = result.get("text", "")
            print(f"\nüìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
            print(f"   –î–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –°–ª–æ–≤: {len(text.split())}")
            
            # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            if text:
                print(f"   –ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞: {text[:500]}...")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ OCR –¥–∞–Ω–Ω—ã—Ö
            ocr_data = result.get("ocr_data", {})
            if ocr_data:
                print(f"\nüîç OCR –¥–∞–Ω–Ω—ã–µ:")
                print(f"   –¢–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω–æ: {len(ocr_data.get('tables', []))}")
                print(f"   –ß–µ—Ä—Ç–µ–∂–µ–π –Ω–∞–π–¥–µ–Ω–æ: {len(ocr_data.get('drawings', []))}")
                print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {ocr_data.get('processing_time', 0):.2f} —Å–µ–∫")
                
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
                tables = ocr_data.get("tables", [])
                if tables:
                    print(f"\nüìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
                    for i, table in enumerate(tables, 1):
                        print(f"   –¢–∞–±–ª–∏—Ü–∞ {i}:")
                        print(f"     –°—Ç—Ä–∞–Ω–∏—Ü–∞: {table.get('page_number', 'N/A')}")
                        print(f"     –ü–ª–æ—â–∞–¥—å: {table.get('area', 0)}")
                        print(f"     –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {table.get('confidence', 0):.2f}")
                        table_text = table.get('text', '')
                        if table_text:
                            print(f"     –¢–µ–∫—Å—Ç: {table_text[:200]}...")
                
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ—Ä—Ç–µ–∂–∞—Ö
                drawings = ocr_data.get("drawings", [])
                if drawings:
                    print(f"\nüìê –ù–∞–π–¥–µ–Ω–Ω—ã–µ —á–µ—Ä—Ç–µ–∂–∏:")
                    for i, drawing in enumerate(drawings, 1):
                        print(f"   –ß–µ—Ä—Ç–µ–∂ {i}:")
                        print(f"     –°—Ç—Ä–∞–Ω–∏—Ü–∞: {drawing.get('page_number', 'N/A')}")
                        print(f"     –ü–ª–æ—â–∞–¥—å: {drawing.get('area', 0)}")
                        print(f"     –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {drawing.get('aspect_ratio', 0):.2f}")
                        print(f"     –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {drawing.get('confidence', 0):.2f}")
                        drawing_text = drawing.get('text', '')
                        if drawing_text:
                            print(f"     –¢–µ–∫—Å—Ç: {drawing_text[:200]}...")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
            pages = result.get("pages", [])
            if pages:
                print(f"\nüìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö:")
                for page in pages[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page.get('page_number', 'N/A')}:")
                    print(f"     –°–∏–º–≤–æ–ª–æ–≤: {page.get('char_count', 0)}")
                    print(f"     –°–ª–æ–≤: {page.get('word_count', 0)}")
                    page_text = page.get('text', '')
                    if page_text:
                        print(f"     –ù–∞—á–∞–ª–æ: {page_text[:100]}...")
            
            return True
            
        else:
            logger.error(f"‚ùå [TEST] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå [TEST] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def test_ocr_processor_directly(pdf_path: str):
    """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    try:
        logger.info(f"üîç [TEST] –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {pdf_path}")
        
        # –°–æ–∑–¥–∞–µ–º OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        ocr_processor = OCRProcessor()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
        result = ocr_processor.process_pdf_with_ocr(pdf_path)
        
        if result.get("success", False):
            logger.info("‚úÖ [TEST] OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞")
            
            print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
            print(f"   –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.get('total_pages', 0)}")
            print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_time', 0):.2f} —Å–µ–∫")
            print(f"   –¢–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω–æ: {len(result.get('tables', []))}")
            print(f"   –ß–µ—Ä—Ç–µ–∂–µ–π –Ω–∞–π–¥–µ–Ω–æ: {len(result.get('drawings', []))}")
            
            return True
        else:
            logger.error(f"‚ùå [TEST] –û—à–∏–±–∫–∞ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå [TEST] –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_ocr_processing.py <–ø—É—Ç—å_–∫_pdf_—Ñ–∞–π–ª—É>")
        sys.exit(1)
    
    pdf_path = sys.argv[1]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥ —Å OCR
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Å OCR:")
    success1 = test_ocr_processing(pdf_path)
    
    # –¢–µ—Å—Ç 2: –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    print("\n2Ô∏è‚É£ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:")
    success2 = test_ocr_processor_directly(pdf_path)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –ü–∞—Ä—Å–µ—Ä —Å OCR: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success1 else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"   OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success2 else '‚ùå –û—à–∏–±–∫–∞'}")
    
    if success1 and success2:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        sys.exit(1)


if __name__ == "__main__":
    main()
