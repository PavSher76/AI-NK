"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API —Å–µ—Ä–≤–∏—Å–∞ –∞—Ä—Ö–∏–≤–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""

import requests
import json
import os
from typing import List, Dict, Any

class ArchiveServiceClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Å–µ—Ä–≤–∏—Å–∞ –∞—Ä—Ö–∏–≤–∞"""
    
    def __init__(self, base_url: str = "http://localhost:8008"):
        self.base_url = base_url
        self.session = requests.Session()
    
    def upload_single_document(self, file_path: str, project_code: str, 
                             document_type: str = "OTHER", **kwargs) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        url = f"{self.base_url}/api/archive/upload/single"
        
        with open(file_path, 'rb') as f:
            files = {'file': f}
            data = {
                'project_code': project_code,
                'document_type': document_type,
                **kwargs
            }
            
            response = self.session.post(url, files=files, data=data)
            response.raise_for_status()
            return response.json()
    
    def upload_batch_documents(self, project_code: str, documents: List[Dict[str, Any]], 
                             **options) -> Dict[str, Any]:
        """–ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        url = f"{self.base_url}/api/archive/upload/batch"
        
        payload = {
            'project_code': project_code,
            'documents': documents,
            **options
        }
        
        response = self.session.post(url, json=payload)
        response.raise_for_status()
        return response.json()
    
    def get_project_documents(self, project_code: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        url = f"{self.base_url}/api/archive/projects/{project_code}/documents"
        
        response = self.session.get(url)
        response.raise_for_status()
        return response.json()
    
    def get_project_stats(self, project_code: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        url = f"{self.base_url}/api/archive/projects/{project_code}/stats"
        
        response = self.session.get(url)
        response.raise_for_status()
        return response.json()
    
    def search_documents(self, query: str, project_code: str = None, 
                        document_type: str = None, limit: int = 10) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        url = f"{self.base_url}/api/archive/search"
        
        payload = {
            'search_query': query,
            'limit': limit
        }
        
        if project_code:
            payload['project_code'] = project_code
        if document_type:
            payload['document_type'] = document_type
        
        response = self.session.post(url, json=payload)
        response.raise_for_status()
        return response.json()
    
    def search_similar_sections(self, query: str, project_code: str = None, 
                               limit: int = 10, score_threshold: float = 0.7) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤"""
        url = f"{self.base_url}/api/archive/search/similar"
        
        payload = {
            'query': query,
            'limit': limit,
            'score_threshold': score_threshold
        }
        
        if project_code:
            payload['project_code'] = project_code
        
        response = self.session.post(url, json=payload)
        response.raise_for_status()
        return response.json()
    
    def merge_project_documents(self, project_code: str, output_format: str = "pdf") -> Dict[str, Any]:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        url = f"{self.base_url}/api/archive/projects/{project_code}/merge"
        
        payload = {
            'output_format': output_format,
            'include_sections': True
        }
        
        response = self.session.post(url, json=payload)
        response.raise_for_status()
        return response.json()
    
    def get_upload_progress(self, project_code: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        url = f"{self.base_url}/api/archive/projects/{project_code}/progress"
        
        response = self.session.get(url)
        response.raise_for_status()
        return response.json()
    
    def cancel_upload(self, project_code: str) -> Dict[str, Any]:
        """–û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        url = f"{self.base_url}/api/archive/projects/{project_code}/cancel"
        
        response = self.session.post(url)
        response.raise_for_status()
        return response.json()
    
    def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        url = f"{self.base_url}/api/archive/health"
        
        response = self.session.get(url)
        response.raise_for_status()
        return response.json()

def example_usage():
    """–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = ArchiveServiceClient()
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞...")
    health = client.health_check()
    print(f"–°—Ç–∞—Ç—É—Å: {health['status']}")
    
    # –ü—Ä–∏–º–µ—Ä 1: –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    print("\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    try:
        result = client.upload_single_document(
            file_path="example_document.pdf",
            project_code="–ü–†-2024-001",
            document_type="PD",
            document_name="–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
            author="–ò–≤–∞–Ω–æ–≤ –ò.–ò.",
            department="–ü—Ä–æ–µ–∫—Ç–Ω—ã–π –æ—Ç–¥–µ–ª"
        )
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏: {result['status']}")
        print(f"ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: {result['document_id']}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    # –ü—Ä–∏–º–µ—Ä 2: –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    print("\nüì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    try:
        documents = [
            {
                "file_path": "/path/to/pd_document.pdf",
                "document_type": "PD",
                "document_name": "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
                "author": "–ò–≤–∞–Ω–æ–≤ –ò.–ò."
            },
            {
                "file_path": "/path/to/rd_document.pdf", 
                "document_type": "RD",
                "document_name": "–†–∞–±–æ—á–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
                "author": "–ü–µ—Ç—Ä–æ–≤ –ü.–ü."
            },
            {
                "file_path": "/path/to/teo_document.pdf",
                "document_type": "TEO", 
                "document_name": "–¢–µ—Ö–Ω–∏–∫–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ",
                "author": "–°–∏–¥–æ—Ä–æ–≤ –°.–°."
            }
        ]
        
        result = client.upload_batch_documents(
            project_code="–ü–†-2024-001",
            documents=documents,
            auto_extract_sections=True,
            create_relations=True
        )
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {result['status']}")
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {result['processed_documents']}")
        print(f"–û—à–∏–±–æ–∫: {result['failed_documents']}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    # –ü—Ä–∏–º–µ—Ä 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
    try:
        documents = client.get_project_documents("–ü–†-2024-001")
        print(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {documents['total_count']}")
        for doc in documents['documents']:
            print(f"- {doc['document_name']} ({doc['document_type']})")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
    
    # –ü—Ä–∏–º–µ—Ä 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...")
    try:
        stats = client.get_project_stats("–ü–†-2024-001")
        print(f"–ü—Ä–æ–µ–∫—Ç: {stats['project_name']}")
        print(f"–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {stats['total_documents']}")
        print(f"–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º: {stats['documents_by_type']}")
        print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats['total_size']} –±–∞–π—Ç")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    # –ü—Ä–∏–º–µ—Ä 5: –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    print("\nüîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    try:
        results = client.search_documents(
            query="—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            project_code="–ü–†-2024-001",
            limit=5
        )
        print(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {results['total_count']}")
        for doc in results['documents']:
            print(f"- {doc['document_name']} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {doc.get('score', 'N/A')})")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    # –ü—Ä–∏–º–µ—Ä 6: –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    print("\nüîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤...")
    try:
        results = client.search_similar_sections(
            query="—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º",
            project_code="–ü–†-2024-001",
            limit=3
        )
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤: {results['total_found']}")
        for result in results['results']:
            print(f"- {result['section_title']} (—Å—Ö–æ–∂–µ—Å—Ç—å: {result['score']:.2f})")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤: {e}")
    
    # –ü—Ä–∏–º–µ—Ä 7: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    print("\nüìÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    try:
        result = client.merge_project_documents(
            project_code="–ü–†-2024-001",
            output_format="pdf"
        )
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {result['status']}")
        print(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {result['output_path']}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

def create_test_documents():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.makedirs("test_documents", exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π PDF –¥–æ–∫—É–º–µ–Ω—Ç
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import A4
    
    def create_test_pdf(filename: str, title: str, content: str):
        c = canvas.Canvas(f"test_documents/{filename}", pagesize=A4)
        width, height = A4
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        c.setFont("Helvetica-Bold", 16)
        c.drawString(100, height - 100, title)
        
        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
        c.setFont("Helvetica", 12)
        y = height - 150
        for line in content.split('\n'):
            c.drawString(100, y, line)
            y -= 20
        
        c.save()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    create_test_pdf(
        "pd_document.pdf",
        "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ü–†-2024-001",
        """1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è
1.1. –ù–∞—Å—Ç–æ—è—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
1.2. –î–æ–∫—É–º–µ–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ì–û–°–¢ 21.101-97

2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
2.1. –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
2.2. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –Ω–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –°–ù–∏–ü

3. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
3.1. –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç –∫–æ—Ä—Ä–æ–∑–∏–∏
3.2. –≠–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ü–£–≠"""
    )
    
    create_test_pdf(
        "rd_document.pdf", 
        "–†–∞–±–æ—á–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ü–†-2024-001",
        """1. –†–∞–±–æ—á–∏–µ —á–µ—Ä—Ç–µ–∂–∏
1.1. –ü–ª–∞–Ω—ã —ç—Ç–∞–∂–µ–π
1.2. –†–∞–∑—Ä–µ–∑—ã –∏ —Ñ–∞—Å–∞–¥—ã
1.3. –î–µ—Ç–∞–ª–∏ —É–∑–ª–æ–≤

2. –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
2.1. –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
2.2. –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
2.3. –í–µ–¥–æ–º–æ—Å—Ç—å –æ–±—ä–µ–º–æ–≤ —Ä–∞–±–æ—Ç

3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è
3.1. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
3.2. –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
3.3. –û—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"""
    )
    
    create_test_pdf(
        "teo_document.pdf",
        "–¢–≠–û –ø—Ä–æ–µ–∫—Ç–∞ –ü–†-2024-001", 
        """1. –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
1.1. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
1.2. –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
1.3. –°—Ä–æ–∫–∏ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏

2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
2.1. –í—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
2.2. –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
2.3. –†–µ—Å—É—Ä—Å–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ

3. –°–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã
3.1. –í–ª–∏—è–Ω–∏–µ –Ω–∞ –æ–∫—Ä—É–∂–∞—é—â—É—é —Å—Ä–µ–¥—É
3.2. –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
3.3. –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ"""
    )
    
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ test_documents/")

if __name__ == "__main__":
    print("üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API —Å–µ—Ä–≤–∏—Å–∞ –∞—Ä—Ö–∏–≤–∞")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    create_test_documents()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    example_usage()
    
    print("\n‚úÖ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
