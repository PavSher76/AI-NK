import psycopg2
import qdrant_client
import time
import logging
from datetime import datetime
from typing import Optional
from psycopg2.extras import RealDictCursor

from core.config import (
    get_database_config, 
    get_qdrant_config, 
    MAX_RETRIES, 
    RETRY_DELAY
)

logger = logging.getLogger(__name__)

class DatabaseConnection:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.db_conn = None
        self.qdrant_client = None
        self.connection_retry_count = 0
        self.max_retries = MAX_RETRIES
        self.retry_delay = RETRY_DELAY
        self.connect_databases()
    
    def connect_databases(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        connection_start_time = datetime.now()
        logger.info(f"üîç [CONNECTION] Starting database connections at {connection_start_time.strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]}")
        
        for attempt in range(self.max_retries):
            try:
                logger.info(f"üîç [CONNECTION] Attempt {attempt + 1}/{self.max_retries} to connect to databases")
                
                # PostgreSQL
                postgres_start_time = datetime.now()
                db_config = get_database_config()
                self.db_conn = psycopg2.connect(**db_config)
                postgres_end_time = datetime.now()
                postgres_duration = (postgres_end_time - postgres_start_time).total_seconds()
                logger.info(f"üîç [CONNECTION] Connected to PostgreSQL in {postgres_duration:.3f}s")
                
                # Qdrant
                qdrant_start_time = datetime.now()
                qdrant_config = get_qdrant_config()
                self.qdrant_client = qdrant_client.QdrantClient(**qdrant_config)
                qdrant_end_time = datetime.now()
                qdrant_duration = (qdrant_end_time - qdrant_start_time).total_seconds()
                logger.info(f"üîç [CONNECTION] Connected to Qdrant in {qdrant_duration:.3f}s")
                
                # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                self.connection_retry_count = 0
                connection_end_time = datetime.now()
                total_duration = (connection_end_time - connection_start_time).total_seconds()
                logger.info(f"üîç [CONNECTION] All database connections established successfully in {total_duration:.3f}s")
                return
                
            except Exception as e:
                self.connection_retry_count += 1
                logger.error(f"üîç [CONNECTION] Database connection error (attempt {attempt + 1}/{self.max_retries}): {e}")
                logger.error(f"üîç [CONNECTION] Error type: {type(e).__name__}")
                
                if attempt < self.max_retries - 1:
                    logger.info(f"üîç [CONNECTION] Retrying in {self.retry_delay} seconds...")
                    time.sleep(self.retry_delay)
                else:
                    connection_end_time = datetime.now()
                    total_duration = (connection_end_time - connection_start_time).total_seconds()
                    logger.error(f"üîç [CONNECTION] Failed to connect to databases after {self.max_retries} attempts in {total_duration:.3f}s")
                raise
    
    def get_db_connection(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–æ
            if self.db_conn is None or self.db_conn.closed:
                logger.info("üîç [CONNECTION] Reconnecting to PostgreSQL...")
                db_config = get_database_config()
                self.db_conn = psycopg2.connect(**db_config)
                logger.info("üîç [CONNECTION] Reconnected to PostgreSQL")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            try:
                with self.db_conn.cursor() as cursor:
                    cursor.execute("SELECT 1")
                    cursor.fetchone()
            except Exception as test_error:
                logger.warning(f"üîç [CONNECTION] Database connection test failed: {test_error}")
                # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ç–µ—Å—Ç–∞
                if self.db_conn and not self.db_conn.closed:
                    try:
                        self.db_conn.close()
                    except:
                        pass
                
                db_config = get_database_config()
                self.db_conn = psycopg2.connect(**db_config)
                logger.info("üîç [CONNECTION] Reconnected to PostgreSQL after test failure")
            
            return self.db_conn
            
        except Exception as e:
            logger.error(f"üîç [CONNECTION] Database connection check failed: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            try:
                if self.db_conn and not self.db_conn.closed:
                    self.db_conn.close()
            except Exception as close_error:
                logger.error(f"üîç [CONNECTION] Error closing connection: {close_error}")
            
            try:
                db_config = get_database_config()
                self.db_conn = psycopg2.connect(**db_config)
                logger.info("üîç [CONNECTION] Reconnected to PostgreSQL after error")
                return self.db_conn
            except Exception as reconnect_error:
                logger.error(f"üîç [CONNECTION] Failed to reconnect: {reconnect_error}")
                raise
    
    def get_qdrant_client(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Qdrant"""
        if self.qdrant_client is None:
            logger.info("üîç [CONNECTION] Reconnecting to Qdrant...")
            qdrant_config = get_qdrant_config()
            self.qdrant_client = qdrant_client.QdrantClient(**qdrant_config)
            logger.info("üîç [CONNECTION] Reconnected to Qdrant")
        
        return self.qdrant_client
    
    def close_connections(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            if self.db_conn and not self.db_conn.closed:
                self.db_conn.close()
                logger.info("üîç [CONNECTION] PostgreSQL connection closed")
        except Exception as e:
            logger.error(f"üîç [CONNECTION] Error closing PostgreSQL connection: {e}")
        
        try:
            if self.qdrant_client:
                self.qdrant_client.close()
                logger.info("üîç [CONNECTION] Qdrant connection closed")
        except Exception as e:
            logger.error(f"üîç [CONNECTION] Error closing Qdrant connection: {e}")
    
    def execute_in_transaction(self, func):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        conn = self.get_db_connection()
        with TransactionContext(conn) as transaction_conn:
            return func(transaction_conn)
    
    def execute_in_read_only_transaction(self, func):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"""
        conn = self.get_db_connection()
        with ReadOnlyTransactionContext(conn) as transaction_conn:
            return func(transaction_conn)

class TransactionContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ PostgreSQL"""
    
    def __init__(self, connection):
        self.connection = connection
        self.cursor = None
        self.transaction_id = f"tx_{int(time.time() * 1000)}"
    
    def __enter__(self):
        """–ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            self.cursor = self.connection.cursor()
            logger.debug(f"üîç [TRANSACTION] {self.transaction_id}: Transaction started")
            return self.connection
        except Exception as e:
            logger.error(f"üîç [TRANSACTION] {self.transaction_id}: Error starting transaction: {e}")
            raise
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º commit/rollback"""
        try:
            if exc_type is None:
                # –ù–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π - –∫–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                self.connection.commit()
                logger.debug(f"üîç [TRANSACTION] {self.transaction_id}: Transaction committed successfully")
            else:
                # –ï—Å—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è - –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                self.connection.rollback()
                logger.error(f"üîç [TRANSACTION] {self.transaction_id}: Transaction rolled back due to error: {exc_type.__name__}: {exc_val}")
        except Exception as e:
            logger.error(f"üîç [TRANSACTION] {self.transaction_id}: Error during transaction cleanup: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–∞—Ç–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—á–∏—Å—Ç–∫–∏
            try:
                if not self.connection.closed:
                    self.connection.rollback()
                    logger.debug(f"üîç [TRANSACTION] {self.transaction_id}: Emergency rollback completed")
            except Exception as rollback_error:
                logger.error(f"üîç [TRANSACTION] {self.transaction_id}: Emergency rollback failed: {rollback_error}")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
            if self.cursor:
                try:
                    self.cursor.close()
                    logger.debug(f"üîç [TRANSACTION] {self.transaction_id}: Cursor closed")
                except Exception as cursor_error:
                    logger.error(f"üîç [TRANSACTION] {self.transaction_id}: Error closing cursor: {cursor_error}")

class ReadOnlyTransactionContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è PostgreSQL"""
    
    def __init__(self, connection):
        self.connection = connection
        self.cursor = None
        self.transaction_id = f"read_tx_{int(time.time() * 1000)}"
    
    def __enter__(self):
        """–ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"""
        try:
            self.cursor = self.connection.cursor()
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
            self.cursor.execute("SET TRANSACTION READ ONLY")
            logger.debug(f"üîç [READ_TRANSACTION] {self.transaction_id}: Read-only transaction started")
            return self.connection
        except Exception as e:
            logger.error(f"üîç [READ_TRANSACTION] {self.transaction_id}: Error starting read-only transaction: {e}")
            raise
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"""
        try:
            if exc_type is None:
                # –ù–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π - –∫–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–¥–ª—è —á—Ç–µ–Ω–∏—è —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ)
                self.connection.commit()
                logger.debug(f"üîç [READ_TRANSACTION] {self.transaction_id}: Read-only transaction committed successfully")
            else:
                # –ï—Å—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è - –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                self.connection.rollback()
                logger.error(f"üîç [READ_TRANSACTION] {self.transaction_id}: Read-only transaction rolled back due to error: {exc_type.__name__}: {exc_val}")
        except Exception as e:
            logger.error(f"üîç [READ_TRANSACTION] {self.transaction_id}: Error during read-only transaction cleanup: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–∞—Ç–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—á–∏—Å—Ç–∫–∏
            try:
                if not self.connection.closed:
                    self.connection.rollback()
                    logger.debug(f"üîç [READ_TRANSACTION] {self.transaction_id}: Emergency rollback completed")
            except Exception as rollback_error:
                logger.error(f"üîç [READ_TRANSACTION] {self.transaction_id}: Emergency rollback failed: {rollback_error}")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
            if self.cursor:
                try:
                    self.cursor.close()
                    logger.debug(f"üîç [READ_TRANSACTION] {self.transaction_id}: Cursor closed")
                except Exception as cursor_error:
                    logger.error(f"üîç [READ_TRANSACTION] {self.transaction_id}: Error closing cursor: {cursor_error}")
