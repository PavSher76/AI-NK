import os
import signal
import logging
import asyncio
from datetime import datetime
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException, Depends, UploadFile, File, Form
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn

from core.config import LOG_LEVEL, LOG_FORMAT
from database.connection import DatabaseConnection
from services.norm_control_service import NormControlService
from services.hierarchical_check_service import HierarchicalCheckService
from utils.memory_utils import log_memory_usage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format=LOG_FORMAT,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('/app/document_parser.log')
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
db_connection = None
norm_control_service = None
hierarchical_check_service = None
startup_time = None

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info(f"Received signal {signum}, starting graceful shutdown...")
    if db_connection:
        db_connection.close_connections()
    logger.info("Graceful shutdown completed")
    exit(0)

signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global db_connection, norm_control_service, hierarchical_check_service, startup_time
    
    # Startup
    startup_time = datetime.now()
    logger.info(f"üöÄ [STARTUP] Starting Document Parser Service at {startup_time.strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
        logger.info("üîç [STARTUP] Initializing database connections...")
        db_connection = DatabaseConnection()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        logger.info("üîç [STARTUP] Initializing services...")
        logger.info("üîç [STARTUP] Creating NormControlService...")
        norm_control_service = NormControlService(db_connection)
        logger.info("üîç [STARTUP] NormControlService created successfully")
        logger.info("üîç [STARTUP] Creating HierarchicalCheckService...")
        hierarchical_check_service = HierarchicalCheckService(db_connection)
        logger.info("üîç [STARTUP] HierarchicalCheckService created successfully")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        log_memory_usage("startup")
        
        logger.info("‚úÖ [STARTUP] Document Parser Service started successfully")
        yield
        
    except Exception as e:
        logger.error(f"‚ùå [STARTUP] Failed to start Document Parser Service: {e}")
        raise
    finally:
        # Shutdown
        logger.info("üîÑ [SHUTDOWN] Starting shutdown process...")
        if db_connection:
            db_connection.close_connections()
        logger.info("‚úÖ [SHUTDOWN] Document Parser Service shutdown completed")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Document Parser Service",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    version="1.0.0",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.requests import Request
from starlette.responses import Response

class LargeFileMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        if request.url.path.startswith("/upload"):
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª—å—à–∏–π –ª–∏–º–∏—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            request.scope["client_max_size"] = 100 * 1024 * 1024  # 100 MB
        return await call_next(request)

app.add_middleware(LargeFileMiddleware)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
def get_norm_control_service() -> NormControlService:
    if norm_control_service is None:
        raise HTTPException(status_code=503, detail="Service not initialized")
    return norm_control_service

def get_hierarchical_check_service() -> HierarchicalCheckService:
    if hierarchical_check_service is None:
        raise HTTPException(status_code=503, detail="Service not initialized")
    return hierarchical_check_service

# Health check endpoint
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        if db_connection and db_connection.db_conn and not db_connection.db_conn.closed:
            return {
                "status": "healthy",
                "service": "document-parser",
                "uptime": (datetime.now() - startup_time).total_seconds() if startup_time else 0,
                "timestamp": datetime.now().isoformat()
            }
        else:
            return JSONResponse(
                status_code=503,
                content={
                    "status": "unhealthy",
                    "service": "document-parser",
                    "error": "Database connection not available",
                    "timestamp": datetime.now().isoformat()
                }
            )
    except Exception as e:
        logger.error(f"Health check error: {e}")
        return JSONResponse(
            status_code=503,
            content={
                "status": "unhealthy",
                "service": "document-parser",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
        )

# Metrics endpoint
@app.get("/metrics")
async def get_metrics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–∏—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus"""
    try:
        from utils.memory_utils import get_memory_usage
        
        memory_info = get_memory_usage()
        uptime = (datetime.now() - startup_time).total_seconds() if startup_time else 0
        db_connected = 1 if (db_connection.db_conn is not None and not db_connection.db_conn.closed if db_connection else False) else 0
        qdrant_connected = 1 if (db_connection.qdrant_client is not None if db_connection else False) else 0
        
        # –§–æ—Ä–º–∞—Ç –º–µ—Ç—Ä–∏–∫ Prometheus
        metrics = f"""# HELP document_parser_uptime_seconds –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
# TYPE document_parser_uptime_seconds gauge
document_parser_uptime_seconds {uptime}

# HELP document_parser_memory_usage_mb –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –ú–ë
# TYPE document_parser_memory_usage_mb gauge
document_parser_memory_usage_mb {memory_info.get("rss_mb", 0)}

# HELP document_parser_memory_percent –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
# TYPE document_parser_memory_percent gauge
document_parser_memory_percent {memory_info.get("percent", 0)}

# HELP document_parser_available_memory_mb –î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å –≤ –ú–ë
# TYPE document_parser_available_memory_mb gauge
document_parser_available_memory_mb {memory_info.get("available_mb", 0)}

# HELP document_parser_database_connected –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
# TYPE document_parser_database_connected gauge
document_parser_database_connected {db_connected}

# HELP document_parser_qdrant_connected –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant
# TYPE document_parser_qdrant_connected gauge
document_parser_qdrant_connected {qdrant_connected}

# HELP document_parser_info –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
# TYPE document_parser_info gauge
document_parser_info{{service="document-parser"}} 1
"""
        
        return Response(content=metrics, media_type="text/plain")
    except Exception as e:
        logger.error(f"Metrics error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è
async def perform_async_norm_control_check(document_id: int, document_content: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è"""
    try:
        logger.info(f"üöÄ [ASYNC_CHECK] Starting async norm control check for document {document_id}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        result = await norm_control_service.perform_norm_control_check(document_id, document_content)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "completed"
        update_checkable_document_status(document_id, "completed")
        
        logger.info(f"‚úÖ [ASYNC_CHECK] Async norm control check completed for document {document_id}")
        
    except Exception as e:
        logger.error(f"‚ùå [ASYNC_CHECK] Async norm control check failed for document {document_id}: {e}")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "error"
        try:
            update_checkable_document_status(document_id, "error")
        except Exception:
            pass

def update_checkable_document_status(document_id: int, status: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    def _update_status(conn):
        with conn.cursor() as cursor:
            cursor.execute("""
                UPDATE checkable_documents 
                SET processing_status = %s
                WHERE id = %s
            """, (status, document_id))
            logger.info(f"Updated checkable document {document_id} status to: {status}")
    
    try:
        db_connection.execute_in_transaction(_update_status)
    except Exception as e:
        logger.error(f"Error updating checkable document status: {e}")
        raise

# API endpoints
@app.post("/checkable-documents/{document_id}/check")
async def trigger_norm_control_check(
    document_id: int,
    norm_control_service: NormControlService = Depends(get_norm_control_service)
):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document = get_checkable_document(document_id)
        if not document:
            raise HTTPException(status_code=404, detail="Document not found")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if document.get("processing_status") == "processing":
            return {
                "status": "already_processing",
                "message": "Document is already being processed"
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "processing"
        update_checkable_document_status(document_id, "processing")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        with db_connection.db_conn.cursor() as cursor:
            cursor.execute("""
                SELECT element_content
                FROM checkable_elements
                WHERE checkable_document_id = %s
                ORDER BY page_number, id
            """, (document_id,))
            elements = cursor.fetchall()
        
        if not elements:
            update_checkable_document_status(document_id, "error")
            raise HTTPException(status_code=404, detail="Document content not found")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        document_content = "\n\n".join([elem[0] for elem in elements])  # element_content
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        asyncio.create_task(
            perform_async_norm_control_check(document_id, document_content)
        )
        
        return {
            "status": "started",
            "message": "Norm control check started asynchronously",
            "document_id": document_id
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Trigger norm control check error: {e}")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "error" –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            update_checkable_document_status(document_id, "error")
        except Exception:
            pass
        raise HTTPException(status_code=500, detail=str(e))

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@app.get("/checkable-documents")
async def get_checkable_documents():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        def _get_documents(conn):
            try:
                with conn.cursor() as cursor:
                    cursor.execute("""
                        SELECT id, original_filename, file_type, file_size, upload_date, 
                               processing_status, category, review_deadline, review_status, 
                               assigned_reviewer
                        FROM checkable_documents 
                        ORDER BY upload_date DESC
                    """)
                    documents = cursor.fetchall()
                    result = []
                    for doc in documents:
                        result.append({
                            'id': doc[0],
                            'original_filename': doc[1],
                            'file_type': doc[2],
                            'file_size': doc[3],
                            'upload_date': doc[4],
                            'processing_status': doc[5],
                            'category': doc[6],
                            'review_deadline': doc[7],
                            'review_status': doc[8],
                            'assigned_reviewer': doc[9]
                        })
                    return result
            except Exception as db_error:
                logger.error(f"üîç [DATABASE] Error in _get_documents: {db_error}")
                raise
        
        try:
            logger.debug(f"üîç [DATABASE] Starting read-only transaction for get_checkable_documents")
            documents = db_connection.execute_in_read_only_transaction(_get_documents)
            logger.debug(f"üîç [DATABASE] Successfully retrieved {len(documents)} checkable documents using read-only transaction")
            return {"documents": documents}
        except Exception as e:
            logger.error(f"Get checkable documents error: {e}")
            raise HTTPException(status_code=500, detail=str(e))
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Get checkable documents error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@app.post("/upload/checkable")
async def upload_checkable_document(
    file: UploadFile = File(...),  # –£–±–∏—Ä–∞–µ–º max_length, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å UploadFile
    category: str = Form("other"),
    description: str = Form("")
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è"""
    logger.info(f"üì§ [UPLOAD_CHECKABLE] Uploading document for check: {file.filename}")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not file.filename.lower().endswith(('.pdf', '.dwg', '.ifc', '.docx')):
            raise HTTPException(status_code=400, detail="Unsupported file type. Only PDF, DWG, IFC, and DOCX files are allowed.")
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content = await file.read()
        file_size = len(content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 100 MB)
        max_file_size = 100 * 1024 * 1024  # 100 MB
        if file_size > max_file_size:
            raise HTTPException(
                status_code=413, 
                detail=f"File too large. Maximum size is {max_file_size // (1024*1024)} MB"
            )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        import hashlib
        document_hash = hashlib.sha256(content).hexdigest()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
        import time
        document_id = int(time.time() * 1000) % 100000000  # 8-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ
        
        def _save_document(conn):
            try:
                with conn.cursor() as cursor:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º —Ö–µ—à–µ–º
                    cursor.execute("""
                        SELECT id FROM checkable_documents 
                        WHERE document_hash = %s
                    """, (document_hash,))
                    
                    if cursor.fetchone():
                        raise HTTPException(status_code=409, detail="Document with this content already exists")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    cursor.execute("""
                        INSERT INTO checkable_documents 
                        (id, filename, original_filename, file_type, file_size, document_hash, category, review_deadline)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, CURRENT_TIMESTAMP + INTERVAL '2 days')
                        RETURNING id
                    """, (
                        document_id,
                        file.filename,
                        file.filename,
                        file.filename.split('.')[-1].lower(),
                        file_size,
                        document_hash,
                        category
                    ))
                    
                    saved_id = cursor.fetchone()[0]
                    conn.commit()
                    return saved_id
                    
            except HTTPException:
                raise
            except Exception as db_error:
                logger.error(f"üîç [DATABASE] Error in _save_document: {db_error}")
                conn.rollback()
                raise
        
        try:
            logger.debug(f"üîç [DATABASE] Starting transaction for upload_checkable_document")
            saved_document_id = db_connection.execute_in_transaction(_save_document)
            logger.debug(f"üîç [DATABASE] Successfully saved checkable document {saved_document_id}")
            
            return {
                "status": "success",
                "document_id": saved_document_id,
                "filename": file.filename,
                "file_size": file_size,
                "message": f"Document uploaded successfully for checking"
            }
            
        except HTTPException:
            raise
        except Exception as e:
            logger.error(f"Upload checkable document error: {e}")
            raise HTTPException(status_code=500, detail=str(e))
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå [UPLOAD_CHECKABLE] Upload error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
@app.post("/checkable-documents/{document_id}/hierarchical-check")
async def trigger_hierarchical_check(
    document_id: int,
    hierarchical_check_service: HierarchicalCheckService = Depends(get_hierarchical_check_service)
):
    """–ó–∞–ø—É—Å–∫ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        logger.info(f"üéØ [API] Hierarchical check requested for document {document_id}")
        logger.info(f"üéØ [API] Request timestamp: {datetime.now().isoformat()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        logger.debug(f"üéØ [API] Checking document existence for ID {document_id}")
        document = get_checkable_document(document_id)
        if not document:
            logger.error(f"üéØ [API] Document {document_id} not found")
            raise HTTPException(status_code=404, detail="Document not found")
        
        logger.info(f"üéØ [API] Document found: {document.get('original_filename', 'Unknown')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞
        current_status = document.get("processing_status", "unknown")
        logger.info(f"üéØ [API] Current document status: {current_status}")
        
        if current_status == "processing":
            logger.warning(f"üéØ [API] Document {document_id} is already being processed")
            return {
                "status": "already_processing",
                "message": "Document is already being processed"
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "processing"
        logger.info(f"üéØ [API] Updating document status to 'processing'")
        update_checkable_document_status(document_id, "processing")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        logger.info(f"üéØ [API] Starting async hierarchical check task")
        asyncio.create_task(
            perform_async_hierarchical_check(document_id, hierarchical_check_service)
        )
        
        response = {
            "status": "started",
            "message": "Hierarchical check started asynchronously",
            "document_id": document_id,
            "check_type": "hierarchical"
        }
        
        logger.info(f"üéØ [API] Hierarchical check response: {response}")
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Trigger hierarchical check error: {e}")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "error" –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            update_checkable_document_status(document_id, "error")
        except Exception:
            pass
        raise HTTPException(status_code=500, detail=str(e))

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
async def perform_async_hierarchical_check(document_id: int, hierarchical_check_service: HierarchicalCheckService):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    try:
        logger.info(f"üöÄ [ASYNC_HIERARCHICAL] Starting async hierarchical check for document {document_id}")
        logger.info(f"üöÄ [ASYNC_HIERARCHICAL] Async task started at: {datetime.now().isoformat()}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        logger.info(f"üöÄ [ASYNC_HIERARCHICAL] Calling hierarchical_check_service.perform_hierarchical_check")
        result = await hierarchical_check_service.perform_hierarchical_check(document_id)
        
        logger.info(f"üöÄ [ASYNC_HIERARCHICAL] Hierarchical check result received: {result.get('check_type', 'unknown')}")
        logger.info(f"üöÄ [ASYNC_HIERARCHICAL] Execution time: {result.get('execution_time', 0):.2f}s")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "completed"
        logger.info(f"üöÄ [ASYNC_HIERARCHICAL] Updating document status to 'completed'")
        update_checkable_document_status(document_id, "completed")
        
        logger.info(f"‚úÖ [ASYNC_HIERARCHICAL] Async hierarchical check completed for document {document_id}")
        logger.info(f"‚úÖ [ASYNC_HIERARCHICAL] Async task completed at: {datetime.now().isoformat()}")
        
    except Exception as e:
        logger.error(f"‚ùå [ASYNC_HIERARCHICAL] Async hierarchical check failed for document {document_id}: {e}")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "error"
        try:
            update_checkable_document_status(document_id, "error")
        except Exception:
            pass

def get_checkable_document(document_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
    def _get_document(conn):
        try:
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT id, original_filename, file_type, file_size, upload_date, 
                           processing_status, category, review_deadline, review_status, 
                           assigned_reviewer
                    FROM checkable_documents 
                    WHERE id = %s
                """, (document_id,))
                document = cursor.fetchone()
                if document:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ—Ä—Ç–µ–∂ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
                    return {
                        'id': document[0],
                        'original_filename': document[1],
                        'file_type': document[2],
                        'file_size': document[3],
                        'upload_date': document[4],
                        'processing_status': document[5],
                        'category': document[6],
                        'review_deadline': document[7],
                        'review_status': document[8],
                        'assigned_reviewer': document[9]
                    }
                return None
        except Exception as db_error:
            logger.error(f"üîç [DATABASE] Error in _get_document: {db_error}")
            raise
    
    try:
        logger.debug(f"üîç [DATABASE] Starting read-only transaction for get_checkable_document {document_id}")
        result = db_connection.execute_in_read_only_transaction(_get_document)
        logger.debug(f"üîç [DATABASE] Successfully retrieved checkable document {document_id} using read-only transaction")
        return result
    except Exception as e:
        logger.error(f"Get checkable document error: {e}")
        return None

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
@app.delete("/checkable-documents/{document_id}")
async def delete_checkable_document(document_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        logger.info(f"üóëÔ∏è [DELETE] Deleting checkable document ID: {document_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document = get_checkable_document(document_id)
        if not document:
            logger.error(f"üóëÔ∏è [DELETE] Document {document_id} not found")
            raise HTTPException(status_code=404, detail="Document not found")
        
        # –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        def _delete_document(conn):
            try:
                with conn.cursor() as cursor:
                    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
                    cursor.execute("""
                        DELETE FROM hierarchical_check_results 
                        WHERE checkable_document_id = %s
                    """, (document_id,))
                    logger.info(f"üóëÔ∏è [DELETE] Deleted hierarchical check results for document {document_id}")
                    
                    # –£–¥–∞–ª—è–µ–º —Å–∞–º –¥–æ–∫—É–º–µ–Ω—Ç
                    cursor.execute("""
                        DELETE FROM checkable_documents 
                        WHERE id = %s
                    """, (document_id,))
                    deleted_count = cursor.rowcount
                    conn.commit()
                    
                    if deleted_count > 0:
                        logger.info(f"‚úÖ [DELETE] Successfully deleted document {document_id}")
                        return True
                    else:
                        logger.error(f"‚ùå [DELETE] No document deleted for ID {document_id}")
                        return False
                        
            except Exception as db_error:
                logger.error(f"üîç [DATABASE] Error in _delete_document: {db_error}")
                raise
        
        try:
            logger.debug(f"üîç [DATABASE] Starting transaction for delete_checkable_document {document_id}")
            success = db_connection.execute_in_transaction(_delete_document)
            
            if success:
                return {
                    "status": "success",
                    "message": f"Document {document_id} deleted successfully"
                }
            else:
                raise HTTPException(status_code=404, detail="Document not found")
                
        except Exception as e:
            logger.error(f"üóëÔ∏è [DELETE] Database error: {e}")
            raise HTTPException(status_code=500, detail=str(e))
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üóëÔ∏è [DELETE] Delete checkable document error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
@app.get("/checkable-documents/{document_id}/report")
async def get_report(document_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document = get_checkable_document(document_id)
        if not document:
            raise HTTPException(status_code=404, detail="Document not found")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        def _get_report(conn):
            try:
                with conn.cursor() as cursor:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    cursor.execute("""
                        SELECT project_info, norm_compliance_summary, sections_analysis, 
                               overall_status, execution_time
                        FROM hierarchical_check_results
                        WHERE checkable_document_id = %s
                        ORDER BY analysis_date DESC
                        LIMIT 1
                    """, (document_id,))
                    hierarchical_result = cursor.fetchone()
                    
                    return {
                        'hierarchical_result': {
                            'project_info': hierarchical_result[0] if hierarchical_result else None,
                            'norm_compliance_summary': hierarchical_result[1] if hierarchical_result else None,
                            'sections_analysis': hierarchical_result[2] if hierarchical_result else None,
                            'overall_status': hierarchical_result[3] if hierarchical_result else None,
                            'execution_time': hierarchical_result[4] if hierarchical_result else None
                        } if hierarchical_result else None,
                        'document_info': {
                            'id': document.get('id'),
                            'original_filename': document.get('original_filename'),
                            'processing_status': document.get('processing_status')
                        }
                    }
            except Exception as db_error:
                logger.error(f"üîç [DATABASE] Error in _get_report: {db_error}")
                raise
        
        try:
            logger.debug(f"üîç [DATABASE] Starting read-only transaction for get_report {document_id}")
            report = db_connection.execute_in_read_only_transaction(_get_report)
            logger.debug(f"üîç [DATABASE] Successfully retrieved report for document {document_id}")
            return report
        except Exception as e:
            logger.error(f"Get report error: {e}")
            raise HTTPException(status_code=500, detail=str(e))
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Get report error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF
@app.get("/checkable-documents/{document_id}/download-report")
async def download_report(document_id: int):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document = get_checkable_document(document_id)
        if not document:
            raise HTTPException(status_code=404, detail="Document not found")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
        report_response = await get_report(document_id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –æ—Ç—á–µ—Ç
        try:
            from utils.pdf_generator import PDFReportGenerator
            
            pdf_generator = PDFReportGenerator()
            pdf_content = pdf_generator.generate_report_pdf(report_response)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = f"report_{document_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º PDF —Ñ–∞–π–ª
            from fastapi.responses import Response
            return Response(
                content=pdf_content,
                media_type="application/pdf",
                headers={
                    "Content-Disposition": f"attachment; filename={filename}",
                    "Content-Length": str(len(pdf_content))
                }
            )
            
        except ImportError as e:
            logger.error(f"PDF generator import error: {e}")
            raise HTTPException(status_code=500, detail="PDF generation not available")
        except Exception as e:
            logger.error(f"PDF generation error: {e}")
            raise HTTPException(status_code=500, detail=f"PDF generation failed: {str(e)}")
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Download report error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    uvicorn.run(
        "app:app",
        host="0.0.0.0",
        port=8001,
        reload=False,
        log_level=LOG_LEVEL.lower(),
        timeout_keep_alive=300,  # 5 –º–∏–Ω—É—Ç –¥–ª—è keep-alive
        timeout_graceful_shutdown=30  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è graceful shutdown
    )
