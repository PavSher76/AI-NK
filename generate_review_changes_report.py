#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–∞ Review Changes –≤ —Ñ–æ—Ä–º–∞—Ç–µ DOCX
"""

import os
import sys
from datetime import datetime
from docx import Document
from docx.shared import Inches, Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.table import WD_TABLE_ALIGNMENT
from docx.oxml.shared import OxmlElement, qn

class ReviewChangesDOCXGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä DOCX –æ—Ç—á–µ—Ç–∞ Review Changes"""
    
    def __init__(self):
        self.document = None
        self.default_font = 'Times New Roman'
        
    def generate_review_changes_report(self) -> bytes:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è DOCX –æ—Ç—á–µ—Ç–∞ Review Changes"""
        try:
            print("üìÑ [DOCX_GENERATOR] Generating Review Changes report...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            self.document = Document()
            self._setup_styles()
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
            self._create_header()
            
            # –°–≤–æ–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            self._create_summary_section()
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –º–æ–¥—É–ª—è–º
            self._create_detailed_changes_section()
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
            self._create_technical_architecture_section()
            
            # –°—Ç–∞—Ç—É—Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            self._create_implementation_status_section()
            
            # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
            self._create_conclusion_section()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±—É—Ñ–µ—Ä
            from io import BytesIO
            buffer = BytesIO()
            self.document.save(buffer)
            buffer.seek(0)
            docx_content = buffer.getvalue()
            buffer.close()
            
            print("‚úÖ [DOCX_GENERATOR] Review Changes report generated successfully")
            return docx_content
            
        except Exception as e:
            print(f"‚ùå [DOCX_GENERATOR] Error generating report: {e}")
            raise
    
    def _setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è DOCX –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        styles = self.document.styles
        
        # –°—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ 1
        if 'Custom Heading 1' not in [style.name for style in styles]:
            heading1_style = styles.add_style('Custom Heading 1', 1)
            heading1_font = heading1_style.font
            heading1_font.name = self.default_font
            heading1_font.size = Pt(16)
            heading1_font.bold = True
            heading1_font.color.rgb = RGBColor(0, 51, 102)
        
        # –°—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ 2
        if 'Custom Heading 2' not in [style.name for style in styles]:
            heading2_style = styles.add_style('Custom Heading 2', 1)
            heading2_font = heading2_style.font
            heading2_font.name = self.default_font
            heading2_font.size = Pt(14)
            heading2_font.bold = True
            heading2_font.color.rgb = RGBColor(0, 102, 204)
    
    def _create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = self.document.add_heading('–û–¢–ß–ï–¢ REVIEW CHANGES', 0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        title_run = title.runs[0]
        title_run.font.name = self.default_font
        title_run.font.size = Pt(18)
        title_run.font.bold = True
        title_run.font.color.rgb = RGBColor(0, 51, 102)
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle = self.document.add_paragraph('–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ AI-–ù–ö')
        subtitle.alignment = WD_ALIGN_PARAGRAPH.CENTER
        subtitle_run = subtitle.runs[0]
        subtitle_run.font.name = self.default_font
        subtitle_run.font.size = Pt(14)
        subtitle_run.font.color.rgb = RGBColor(102, 102, 102)
        
        # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        date_para = self.document.add_paragraph(f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime("%d.%m.%Y %H:%M:%S")}')
        date_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        date_run = date_para.runs[0]
        date_run.font.name = self.default_font
        date_run.font.size = Pt(12)
        date_run.font.color.rgb = RGBColor(102, 102, 102)
        
        self.document.add_paragraph()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    
    def _create_summary_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å–≤–æ–¥–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        heading = self.document.add_heading('1. –°–í–û–î–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô', level=1)
        heading_run = heading.runs[0]
        heading_run.font.name = self.default_font
        heading_run.font.size = Pt(16)
        heading_run.font.bold = True
        heading_run.font.color.rgb = RGBColor(0, 51, 102)
        
        # –°–≤–æ–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        summary_data = [
            ("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π", "47+ –∏–∑–º–µ–Ω–µ–Ω–∏–π"),
            ("–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –º–æ–¥—É–ª–∏", "12 –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π —Ä–∞—Å—á–µ—Ç–æ–≤"),
            ("–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π, —ç–∫—Å–ø–æ—Ä—Ç DOCX, UI —É–ª—É—á—à–µ–Ω–∏—è"),
            ("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏", "15+ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"),
            ("–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞", "‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π")
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–≤–æ–¥–∫–∏
        table = self.document.add_table(rows=1, cols=2)
        table.style = 'Table Grid'
        table.alignment = WD_TABLE_ALIGNMENT.CENTER
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = '–ü–∞—Ä–∞–º–µ—Ç—Ä'
        hdr_cells[1].text = '–ó–Ω–∞—á–µ–Ω–∏–µ'
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for cell in hdr_cells:
            for paragraph in cell.paragraphs:
                for run in paragraph.runs:
                    run.font.name = self.default_font
                    run.font.bold = True
                    run.font.size = Pt(12)
                    run.font.color.rgb = RGBColor(255, 255, 255)
            cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
            # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            shading_elm = OxmlElement('w:shd')
            shading_elm.set(qn('w:val'), 'clear')
            shading_elm.set(qn('w:color'), 'auto')
            shading_elm.set(qn('w:fill'), '4472C4')
            cell._tc.get_or_add_tcPr().append(shading_elm)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for param, value in summary_data:
            row_cells = table.add_row().cells
            row_cells[0].text = param
            row_cells[1].text = value
            
            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —è—á–µ–µ–∫
            for cell in row_cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.name = self.default_font
                        run.font.size = Pt(11)
                cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.LEFT
        
        self.document.add_paragraph()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    
    def _create_detailed_changes_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        heading = self.document.add_heading('2. –î–ï–¢–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–û –ú–û–î–£–õ–Ø–ú', level=1)
        heading_run = heading.runs[0]
        heading_run.font.name = self.default_font
        heading_run.font.size = Pt(16)
        heading_run.font.bold = True
        heading_run.font.color.rgb = RGBColor(0, 51, 102)
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ –º–æ–¥—É–ª—è–º
        modules_data = [
            {
                "name": "–ó–∞—â–∏—Ç–∞ –æ—Ç –ë–ü–õ–ê (UAV Protection)",
                "changes": [
                    "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è: '–ú–∞—Å—Å–∞ –ë–ü–õ–ê' ‚Üí '–ú–∞—Å—Å–∞ –í–í' –¥–ª—è shock_wave",
                    "–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π",
                    "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä explosive_mass –≤–º–µ—Å—Ç–æ uav_mass",
                    "–î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—á–µ—Ç–∞ –∏ –≤—ã–≤–æ–¥—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                    "–£–ª—É—á—à–µ–Ω UI –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω"
                ],
                "status": "‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
            },
            {
                "name": "–í—ã—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏–∏",
                "changes": [
                    "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º",
                    "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω spellchecker-service",
                    "–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏",
                    "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ DOCX",
                    "–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –ø—Ä–æ–º–ø—Ç–æ–≤"
                ],
                "status": "‚úÖ –ù–æ–≤—ã–π –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω"
            },
            {
                "name": "Spellchecker Service",
                "changes": [
                    "–°–æ–∑–¥–∞–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–∞",
                    "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã Hunspell –∏ LanguageTool",
                    "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω comprehensive-check API",
                    "–î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ fallback"
                ],
                "status": "‚úÖ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω"
            },
            {
                "name": "Gateway Service",
                "changes": [
                    "–î–æ–±–∞–≤–ª–µ–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤",
                    "–û–±–Ω–æ–≤–ª–µ–Ω—ã public_paths –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                    "–£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"
                ],
                "status": "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω"
            },
            {
                "name": "Frontend (React)",
                "changes": [
                    "–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º",
                    "–£–ª—É—á—à–µ–Ω UX –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω",
                    "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞",
                    "–î–æ–±–∞–≤–ª–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç –≤ DOCX",
                    "–û–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è"
                ],
                "status": "‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω"
            }
        ]
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        for i, module in enumerate(modules_data, 1):
            # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥—É–ª—è
            sub_heading = self.document.add_heading(f'2.{i} {module["name"]}', level=2)
            sub_heading_run = sub_heading.runs[0]
            sub_heading_run.font.name = self.default_font
            sub_heading_run.font.size = Pt(14)
            sub_heading_run.font.bold = True
            sub_heading_run.font.color.rgb = RGBColor(0, 102, 204)
            
            # –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è
            status_para = self.document.add_paragraph(f'–°—Ç–∞—Ç—É—Å: {module["status"]}')
            status_run = status_para.runs[0]
            status_run.font.name = self.default_font
            status_run.font.size = Pt(12)
            status_run.font.bold = True
            if "‚úÖ" in module["status"]:
                status_run.font.color.rgb = RGBColor(0, 150, 0)
            else:
                status_run.font.color.rgb = RGBColor(200, 0, 0)
            
            # –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            changes_para = self.document.add_paragraph('–û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:')
            changes_run = changes_para.runs[0]
            changes_run.font.name = self.default_font
            changes_run.font.size = Pt(12)
            changes_run.font.bold = True
            
            for change in module["changes"]:
                change_para = self.document.add_paragraph(f'‚Ä¢ {change}', style='List Bullet')
                change_run = change_para.runs[0]
                change_run.font.name = self.default_font
                change_run.font.size = Pt(11)
            
            self.document.add_paragraph()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    
    def _create_technical_architecture_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        heading = self.document.add_heading('3. –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê', level=1)
        heading_run = heading.runs[0]
        heading_run.font.name = self.default_font
        heading_run.font.size = Pt(16)
        heading_run.font.bold = True
        heading_run.font.color.rgb = RGBColor(0, 51, 102)
        
        # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        architecture_data = [
            {
                "component": "Frontend (React)",
                "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å 12 —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ —Ä–∞—Å—á–µ—Ç–æ–≤",
                "technologies": "React, JavaScript, HTML5, CSS3",
                "features": "–í–∞–ª–∏–¥–∞—Ü–∏—è, –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞, —ç–∫—Å–ø–æ—Ä—Ç DOCX"
            },
            {
                "component": "Gateway Service (FastAPI)",
                "description": "API Gateway –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤",
                "technologies": "FastAPI, Python 3.11",
                "features": "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, CORS, –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ"
            },
            {
                "component": "Calculation Service (FastAPI)",
                "description": "–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤",
                "technologies": "FastAPI, Pydantic, PostgreSQL",
                "features": "12 —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤, –≤–∞–ª–∏–¥–∞—Ü–∏—è, —ç–∫—Å–ø–æ—Ä—Ç"
            },
            {
                "component": "Spellchecker Service (FastAPI)",
                "description": "–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏",
                "technologies": "FastAPI, LanguageTool, Hunspell",
                "features": "Comprehensive check, fallback –º–µ—Ö–∞–Ω–∏–∑–º"
            },
            {
                "component": "Outgoing Control Service (FastAPI)",
                "description": "–°–µ—Ä–≤–∏—Å –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "technologies": "FastAPI, PyPDF2, python-docx",
                "features": "–ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞, –æ—Ç—á–µ—Ç—ã"
            }
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        table = self.document.add_table(rows=1, cols=4)
        table.style = 'Table Grid'
        table.alignment = WD_TABLE_ALIGNMENT.CENTER
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç'
        hdr_cells[1].text = '–û–ø–∏—Å–∞–Ω–∏–µ'
        hdr_cells[2].text = '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
        hdr_cells[3].text = '–§—É–Ω–∫—Ü–∏–∏'
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for cell in hdr_cells:
            for paragraph in cell.paragraphs:
                for run in paragraph.runs:
                    run.font.name = self.default_font
                    run.font.bold = True
                    run.font.size = Pt(11)
                    run.font.color.rgb = RGBColor(255, 255, 255)
            cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
            # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            shading_elm = OxmlElement('w:shd')
            shading_elm.set(qn('w:val'), 'clear')
            shading_elm.set(qn('w:color'), 'auto')
            shading_elm.set(qn('w:fill'), '4472C4')
            cell._tc.get_or_add_tcPr().append(shading_elm)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for component in architecture_data:
            row_cells = table.add_row().cells
            row_cells[0].text = component["component"]
            row_cells[1].text = component["description"]
            row_cells[2].text = component["technologies"]
            row_cells[3].text = component["features"]
            
            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —è—á–µ–µ–∫
            for cell in row_cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.name = self.default_font
                        run.font.size = Pt(10)
                cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.LEFT
        
        self.document.add_paragraph()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    
    def _create_implementation_status_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        heading = self.document.add_heading('4. –°–¢–ê–¢–£–° –†–ï–ê–õ–ò–ó–ê–¶–ò–ò', level=1)
        heading_run = heading.runs[0]
        heading_run.font.name = self.default_font
        heading_run.font.size = Pt(16)
        heading_run.font.bold = True
        heading_run.font.color.rgb = RGBColor(0, 51, 102)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        status_data = [
            ("–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã", "12 —Ç–∏–ø–æ–≤", "‚úÖ 100%", "–í—Å–µ —Ä–∞—Å—á–µ—Ç—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã"),
            ("–§—Ä–æ–Ω—Ç–µ–Ω–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã", "12 —Å—Ç—Ä–∞–Ω–∏—Ü", "‚úÖ 100%", "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ UI"),
            ("API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã", "27+ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤", "‚úÖ 100%", "–í—Å–µ API —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"),
            ("–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", "–í—Å–µ —Ñ–æ—Ä–º—ã", "‚úÖ 100%", "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è"),
            ("–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤", "DOCX —Ñ–æ—Ä–º–∞—Ç", "‚úÖ 100%", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç"),
            ("–ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏", "2 –º–æ–¥—É–ª—è", "‚úÖ 100%", "UAV Protection –∏ Outgoing Control"),
            ("–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã", "3 —Å–µ—Ä–≤–∏—Å–∞", "‚úÖ 100%", "Spellchecker, Outgoing Control, Gateway"),
            ("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–ü–æ–ª–Ω–∞—è", "‚úÖ 100%", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç—É—Å–∞
        table = self.document.add_table(rows=1, cols=4)
        table.style = 'Table Grid'
        table.alignment = WD_TABLE_ALIGNMENT.CENTER
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        hdr_cells[1].text = '–û–±—ä–µ–º'
        hdr_cells[2].text = '–°—Ç–∞—Ç—É—Å'
        hdr_cells[3].text = '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ'
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for cell in hdr_cells:
            for paragraph in cell.paragraphs:
                for run in paragraph.runs:
                    run.font.name = self.default_font
                    run.font.bold = True
                    run.font.size = Pt(11)
                    run.font.color.rgb = RGBColor(255, 255, 255)
            cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
            # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            shading_elm = OxmlElement('w:shd')
            shading_elm.set(qn('w:val'), 'clear')
            shading_elm.set(qn('w:color'), 'auto')
            shading_elm.set(qn('w:fill'), '4472C4')
            cell._tc.get_or_add_tcPr().append(shading_elm)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for category, volume, status, note in status_data:
            row_cells = table.add_row().cells
            row_cells[0].text = category
            row_cells[1].text = volume
            row_cells[2].text = status
            row_cells[3].text = note
            
            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —è—á–µ–µ–∫
            for j, cell in enumerate(row_cells):
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.name = self.default_font
                        run.font.size = Pt(10)
                        if j == 2 and "‚úÖ" in status:  # –°—Ç–∞—Ç—É—Å –∫–æ–ª–æ–Ω–∫–∞
                            run.font.color.rgb = RGBColor(0, 150, 0)
                cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.LEFT
        
        self.document.add_paragraph()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    
    def _create_conclusion_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        heading = self.document.add_heading('5. –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï', level=1)
        heading_run = heading.runs[0]
        heading_run.font.name = self.default_font
        heading_run.font.size = Pt(16)
        heading_run.font.bold = True
        heading_run.font.color.rgb = RGBColor(0, 51, 102)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements = [
            "‚úÖ –í—Å–µ 12 —Ç–∏–ø–æ–≤ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã",
            "‚úÖ –°–æ–∑–¥–∞–Ω—ã 2 –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª—è: –ó–∞—â–∏—Ç–∞ –æ—Ç –ë–ü–õ–ê –∏ –í—ã—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏–∏",
            "‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏",
            "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º DOCX —Ñ–æ—Ä–º–∞—Ç–µ",
            "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å 3 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏",
            "‚úÖ –£–ª—É—á—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π",
            "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ –±–∞–≥–∏",
            "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"
        ]
        
        for achievement in achievements:
            para = self.document.add_paragraph(achievement, style='List Bullet')
            run = para.runs[0]
            run.font.name = self.default_font
            run.font.size = Pt(12)
            if "‚úÖ" in achievement:
                run.font.color.rgb = RGBColor(0, 150, 0)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        self.document.add_paragraph()
        conclusion_para = self.document.add_paragraph(
            "–ü—Ä–æ–µ–∫—Ç AI-–ù–ö —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏. "
            "–í—Å–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ. –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é "
            "–¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏."
        )
        conclusion_run = conclusion_para.runs[0]
        conclusion_run.font.name = self.default_font
        conclusion_run.font.size = Pt(12)
        conclusion_run.font.italic = True
        
        # –ü–æ–¥–ø–∏—Å—å
        self.document.add_paragraph()
        signature_para = self.document.add_paragraph(f"–û—Ç—á–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        signature_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
        signature_run = signature_para.runs[0]
        signature_run.font.name = self.default_font
        signature_run.font.size = Pt(10)
        signature_run.font.color.rgb = RGBColor(102, 102, 102)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = ReviewChangesDOCXGenerator()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        docx_content = generator.generate_review_changes_report()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        filename = f"Review_Changes_Report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
        filepath = os.path.join(os.getcwd(), filename)
        
        with open(filepath, 'wb') as f:
            f.write(docx_content)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filepath}")
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(docx_content)} –±–∞–π—Ç")
        
        return filepath
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return None


if __name__ == "__main__":
    main()
